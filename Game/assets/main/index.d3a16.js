window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
        o = b;
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  A000_Fire_God_Blessing: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8204b1HKuBJFKeml6GZueH7", "A000_Fire_God_Blessing");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        BattleController: cc.Node
      },
      Check: function Check(Enemy_Injured_Script, Bullet_Attack) {
        var Attack = Enemy_Injured_Script.Enemy_Element_Injured.Fire_Injured(Math.ceil(.05 * Bullet_Attack * this.BattleController.Rogue_Level.Legend_Rogue_Card_Level[0]));
        var a = Math.floor(100 * Math.random());
        var L0_Fire_Probabily = 20 + 5 * (this.BattleController.Rogue_Level.Legend_Rogue_Card_Level[0] - 1);
        L0_Fire_Probabily >= 100 && (L0_Fire_Probabily = 100);
        a < L0_Fire_Probabily && Enemy_Injured_Script.Enemy_Script.Enemy_Schedule.Enemy_Burn_Schedule.Start_Schedule(Math.ceil(.05 * Bullet_Attack));
      }
    });
    cc._RF.pop();
  }, {} ],
  A000_Small_Missile_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9627fhW0SRHFoboZtVWnBcP", "A000_Small_Missile_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        BattleController: cc.Node,
        Cool_Down_Time: 5,
        Is_Cool_Down: 0,
        Small_Missile_Prefab: cc.Prefab
      },
      Check: function Check() {
        if (0 == this.Is_Cool_Down) {
          var Bullet = cc.instantiate(this.Small_Missile_Prefab);
          Bullet.parent = this.BattleController.Hero_Bullet_Parent;
          Bullet.x = this.BattleController.Hero_Parent.children[0].x;
          Bullet.y = this.BattleController.Hero_Parent.children[0].y;
          var Bulet_Script = Bullet.getComponent(Bullet.name);
          this.BattleController.Common_Count.Attack_Count();
          Bulet_Script.Attack = Math.ceil(.5 * this.BattleController.Rogue_Level.Rare_Rogue_Card_Level[0] * this.BattleController.Up_Attack + this.BattleController.Common_Count.Attack);
          Bulet_Script.Enemy_Parent = this.BattleController.Enemy_Parent;
          Bulet_Script.BattleController = this.BattleController;
          this.Is_Cool_Down = 1;
          this.scheduleOnce(function() {
            this.Is_Cool_Down = 0;
          }, this.Cool_Down_Time);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  A002_Small_Missile_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6af2dP5QVRGoK5Q4HTWRN8q", "A002_Small_Missile_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Missile_Prefab: cc.Prefab,
        Probability: 20
      },
      start: function start() {},
      Check: function Check() {
        this.Battle_Controller.Probability_Result_Create();
        var a = this.Battle_Controller.Probability_Result;
        if (a <= this.Probability) {
          var Bullet = cc.instantiate(this.Missile_Prefab);
          Bullet.parent = this.Battle_Controller.Hero_Bullet_Parent;
          Bullet.x = this.Battle_Controller.Hero_Parent.children[0].x;
          Bullet.y = this.Battle_Controller.Hero_Parent.children[0].y;
          this.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 0;
          this.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Battle_Controller.Hero_Script.Hero_Common.Attack_Result + Math.ceil(this.Battle_Controller.Attack * (this.Battle_Controller.Rogue_Script.Haved_Rogue_Level[1] - 1) * 10 / 100);
          Bullet_Script.Crit_Rate = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  A005_Anxious_Enchantment_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ae53043KnFIMqJAep3mtpsA", "A005_Anxious_Enchantment_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Enchantment_Prefab: cc.Prefab
      },
      start: function start() {
        this.schedule(function() {
          var Enchantment = cc.instantiate(this.Enchantment_Prefab);
          Enchantment.parent = this.Battle_Controller.Enchantment_Parent;
          Enchantment.x = Math.floor(-940.195 * Math.random());
          Enchantment.y = Math.floor(651.162 * Math.random() - 330.654);
          Enchantment.scale = Enchantment.scale * (100 + this.Battle_Controller.Enchantment_Sacle_Addition + 10 * (this.Battle_Controller.Rogue_Script.Haved_Rogue_Level[4] - 1)) / 100;
          Enchantment.getComponent(Enchantment.name).Battle_Controller = this.Battle_Controller;
        }, 5);
      }
    });
    cc._RF.pop();
  }, {} ],
  A006_Wait_Rabbit_Start_Move_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39c57wagFxD+Y9ixdIcN/Jk", "A006_Wait_Rabbit_Start_Move_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Enchantment_Prefab: cc.Prefab,
        Stop_Move_Extra_Check: cc.Node,
        Rogue: cc.Node
      },
      Check: function Check() {
        if (1 == this.Stop_Move_Extra_Check.Schedule_Is_Start) {
          this.Stop_Move_Extra_Check.Schedule_Is_Start = 0;
          this.Stop_Move_Extra_Check.Count = 0;
          this.Stop_Move_Extra_Check.unschedule(this.Stop_Move_Extra_Check.Schedule);
        }
        if (1 == this.Stop_Move_Extra_Check.Is_Addition) {
          this.Stop_Move_Extra_Check.Is_Addition = 0;
          this.Battle_Controller.Common_Attack_Addition_Reduce(this.Stop_Move_Extra_Check.Addition_Number);
          null != this.Stop_Move_Extra_Check.Buff_Icon_Animation && this.Stop_Move_Extra_Check.Buff_Icon_Animation.play("Buff_Icon_Dead");
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  A006_Wait_Rabbit_Stop_Move_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "613feDyU7RKKLyDl2D8C6p+", "A006_Wait_Rabbit_Stop_Move_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Start_Move_Extra_Check: cc.Node,
        Schedule_Is_Start: 0,
        Is_Addition: 0,
        Addition_Number: 0,
        Schedule: cc.Schedule,
        Count: 0,
        Rogue: cc.Node,
        Buff_Icon_Prefab: cc.Prefab,
        Buff_Icon_SpriteFrame: cc.SpriteFrame,
        Buff_Icon_Animation: cc.Animation
      },
      start: function start() {
        this.Schedule = function() {
          this.Count++;
          if (3 == this.Count) {
            this.Schedule_Is_Start = 0;
            this.Count = 0;
            this.Is_Addition = 1;
            this.unschedule(this.Schedule);
            this.Addition_Number = 50 + 5 * (this.Rogue.Haved_Rogue_Level[5] - 1);
            this.Battle_Controller.Common_Attack_Addition_Add(this.Addition_Number);
            var Buff_Icon = cc.instantiate(this.Buff_Icon_Prefab);
            Buff_Icon.parent = this.Battle_Controller.Hero_Script.Hero_Common.Buff_Icon_Parent;
            Buff_Icon.x = -70 * (this.Battle_Controller.Hero_Script.Hero_Common.Buff_Icon_Parent.children.length - 1);
            var Buff_Icon_Script = Buff_Icon.getComponent("Buff_Icon");
            Buff_Icon_Script.Battle_Controller = this.Battle_Controller;
            Buff_Icon_Script.Sprite.spriteFrame = this.Buff_Icon_SpriteFrame;
            this.Buff_Icon_Animation = Buff_Icon_Script.Animation;
          }
        };
      },
      Check: function Check() {
        if (0 == this.Schedule_Is_Start) {
          this.Schedule_Is_Start = 1;
          this.schedule(this.Schedule, 1);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  A008_Double_Return_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4521eV0BDZIJ4K93xqDo27a", "A008_Double_Return_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Bullet_Prefab: cc.Prefab,
        Probability: 50
      },
      Check: function Check() {
        this.Battle_Controller.Probability_Result_Create();
        var a = this.Battle_Controller.Probability_Result;
        console.log(a);
        if (a <= this.Probability) {
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Battle_Controller.Hero_Bullet_Parent;
          Bullet.x = this.Battle_Controller.Hero_Parent.children[0].x;
          Bullet.y = this.Battle_Controller.Hero_Parent.children[0].y;
          this.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 0;
          this.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Battle_Controller.Hero_Script.Hero_Common.Attack_Result * (200 + 50 * this.Battle_Controller.Rogue_Script.Haved_Rogue_Level[7]) / 100;
          Bullet_Script.Crit_Rate = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  All_Black: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fd9c4H5Rc5Hq6f3gcOLrwFP", "All_Black");
    "use strict";
    var Main_Controller = require("Main_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Main_Controller: Main_Controller
      },
      start: function start() {
        var _this = this;
        cc.tween(this.node).to(1, {
          opacity: 0
        }).call(function() {
          0 == _this.Main_Controller.Main_Stage && (_this.Main_Controller.Main_Stage = 1);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Main_Controller: "Main_Controller"
  } ],
  Anxious_Enchantment: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "da15a3+Nh5LnKsj9QwgEc+R", "Anxious_Enchantment");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Animation: cc.Animation
      },
      start: function start() {
        this.scheduleOnce(function() {
          this.Animation.play("Enchantment_Dead");
        }, 5);
      },
      To_Surround: function To_Surround() {
        this.Animation.play("Enchantment_Surround");
      },
      Deastroy_Self: function Deastroy_Self() {
        this.node.destroy();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Hero" == other.node.group) {
          var Hero_Animation = this.Battle_Controller.Hero_Script.Animation;
          Hero_Animation.getAnimationState(Hero_Animation.node.name + "_Attack").speed = 1.5 * Hero_Animation.getAnimationState(Hero_Animation.node.name + "_Attack").speed;
        }
      },
      onCollisionExit: function onCollisionExit(other, self) {
        if ("Hero" == other.node.group) {
          var Hero_Animation = this.Battle_Controller.Hero_Script.Animation;
          Hero_Animation.getAnimationState(Hero_Animation.node.name + "_Attack").speed = Hero_Animation.getAnimationState(Hero_Animation.node.name + "_Attack").speed / 1.5;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  BG_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5ef72XqTrxFvLWmUS75emiQ", "BG_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Start: 0,
        Bound: 0,
        Speed: 0
      },
      update: function update(dt) {
        this.node.x -= this.Speed;
        this.node.x <= this.Bound && (this.node.x = this.Start);
      }
    });
    cc._RF.pop();
  }, {} ],
  BUG_Coin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "13b4e7l8OZKDJYdOpsXNZYf", "BUG_Coin");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node,
        Is_Start_Follow: 0,
        Is_Collided: 0,
        Battle_Controller: cc.Node
      },
      Start_Set: function Start_Set() {
        var _this = this;
        var To_X = Math.floor(601 * Math.random() - 300);
        var To_Y = Math.floor(601 * Math.random() - 300);
        cc.tween(this.node).to(.5, {
          position: cc.v2(this.node.x + To_X, this.node.y + To_Y)
        }, {
          easing: "quadOut"
        }).call(function() {
          _this.Is_Start_Follow = 1;
        }).start();
      },
      update: function update() {
        1 == this.Is_Start_Follow && cc.tween(this.node).delay(1e-5).to(Math.abs(this.node.x - this.Hero.x) / 800, {
          position: cc.v2(this.Hero.x, this.Hero.y)
        }).start();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        var _this2 = this;
        if (0 == this.Is_Collided && other.node == this.Hero) {
          this.Is_Collided = 1;
          0 == this.Is_Start_Follow;
          this.Battle_Controller.Boss_Tetris_BUG_Progress += 5;
          cc.tween(this.Battle_Controller.Boss_Tetris_BUG_Progress_Line).to(.2, {
            scaleX: this.Battle_Controller.Boss_Tetris_BUG_Progress / 100 * .45
          }).start();
          cc.tween(this.node).call(function() {
            _this2.node.children[0].getComponent(cc.ParticleSystem).duration = .1;
          }).to(.5, {
            scale: 5,
            opacity: 0
          }).call(function() {
            _this2.node.destroy();
          }).start();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Battle_Audio_Controller: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3b2ac464cZMCJkoFz+lWLyI", "Battle_Audio_Controller");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Music: [ cc.AudioClip ],
        Attack_AudioClip: [ cc.AudioClip ],
        Other_AudioClip: [ cc.AudioClip ],
        Button_Voice: cc.AudioClip
      },
      Start_Set: function Start_Set() {
        1 == this.Battle_Controller.Music_Is_Open && (this.BGM = cc.audioEngine.play(this.Music[0], true, 1));
      },
      Start_Music: function Start_Music() {
        this.BGM = cc.audioEngine.play(this.Music[0], true, 1);
      },
      Stop_Music: function Stop_Music() {
        cc.audioEngine.stop(this.BGM);
      },
      Button_Voice_Play: function Button_Voice_Play() {
        1 == this.Battle_Controller.Voice_Is_Open && cc.audioEngine.play(this.Button_Voice, false, 1);
      },
      Attack: function Attack(Number, Volume) {
        1 == this.Battle_Controller.Voice_Is_Open && cc.audioEngine.play(this.Attack_AudioClip[Number], false, Volume);
      },
      Other: function Other(Number, Volume) {
        1 == this.Battle_Controller.Voice_Is_Open && cc.audioEngine.play(this.Other_AudioClip[Number], false, Volume);
      }
    });
    cc._RF.pop();
  }, {} ],
  Battle_Coin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "826a8OkGIRNrpDzMyJy548a", "Battle_Coin");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node,
        Is_Start_Follow: 0
      },
      start: function start() {
        var _this = this;
        this.Hero = cc.find("Canvas/Hero").children[0];
        var To_X = Math.floor(1001 * Math.random() - 300);
        var To_Y = Math.floor(1001 * Math.random() - 300);
        cc.tween(this.node).to(.5, {
          position: cc.v2(this.node.x + To_X, this.node.y + To_Y)
        }, {
          easing: "quadOut"
        }).call(function() {
          _this.Is_Start_Follow = 1;
        }).start();
      },
      update: function update() {
        1 == this.Is_Start_Follow && cc.tween(this.node).delay(1e-5).to(Math.abs(this.node.x - this.Hero.x) / 800, {
          position: cc.v2(this.Hero.x, this.Hero.y)
        }).start();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        var _this2 = this;
        0 == this.Is_Start_Follow;
        cc.tween(this.node).to(.5, {
          scale: 5,
          opacity: 0
        }).call(function() {
          _this2.node.destroy();
        }).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  "Battle_Controller - 001": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0031dEHYB1JvrPSrPqSnDwF", "Battle_Controller - 001");
    "use strict";
    var Normal_Initial_Data = require("Normal_Initial_Data");
    var Hero_Initial_Data = require("Hero_Initial_Data");
    var JoyStick = require("JoyStick");
    var Sprint = require("Sprint");
    var Enemy_Create = require("Enemy_Create");
    var Rogue = require("Rogue");
    var Pause_Menu = require("Pause_Menu");
    var Battle_Audio_Controller = require("Battle_Audio_Controller");
    var God_Information = require("God_Information");
    var God_Menu = require("God_Menu");
    var Camera_Follow = require("Camera_Follow");
    var Chat_Menu = require("Chat_Menu");
    var Boss_Hp_Line_Parent = require("Boss_Hp_Line_Parent");
    var Boss_Picture = require("Boss_Picture");
    var Lovelace_Skill_Menu = require("Lovelace_Skill_Menu");
    var Mozu_Blackhole = require("Mozu_Blackhole");
    var Qitian_FS = require("Qitian_FS");
    var Qitian_FS_Image = require("Qitian_FS_Image");
    var Normal_Attack_Extra_Check = require("Normal_Attack_Extra_Check");
    var Bullet_Hit_Extra_Check = require("Bullet_Hit_Extra_Check");
    var Sprint_Extra_Check = require("Sprint_Extra_Check");
    var Pet_Born_Extra_Check = require("Pet_Born_Extra_Check");
    var Pet_Dead_Extra_Check = require("Pet_Dead_Extra_Check");
    var Schedule_Extra_Check = require("Schedule_Extra_Check");
    var Start_Move_Extra_Check = require("Start_Move_Extra_Check");
    var Stop_Move_Extra_Check = require("Stop_Move_Extra_Check");
    var Hero_Be_Hit_Extra_Check = require("Hero_Be_Hit_Extra_Check");
    var Next_Xiaoguanqia_Extra_Check = require("Next_Xiaoguanqia_Extra_Check");
    var Normal_Attack_After_Extra_Check = require("Normal_Attack_After_Extra_Check");
    var Hp_Change_Extra_Check = require("Hp_Change_Extra_Check");
    var Recovery_Extra_Check = require("Recovery_Extra_Check");
    var Xiaoguanqia_End_Extra_Check = require("Xiaoguanqia_End_Extra_Check");
    var Pet_Be_Hit_Extra_Check = require("Pet_Be_Hit_Extra_Check");
    var Stop_Attack_Extra_Check = require("Stop_Attack_Extra_Check");
    var Extra_Skill_Script = require("Extra_Skill_Script");
    cc.Class({
      extends: cc.Component,
      properties: {
        All_Black: cc.Node,
        Boci_Tips: cc.Node,
        Boci_Tips_Label: cc.Label,
        Boci_Plate_Label: cc.Label,
        Hero_Initial_Data: Hero_Initial_Data,
        Normal_Initial_Data: Normal_Initial_Data,
        Hero_Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Particle_Parent_Back: cc.Node,
        Hero_Skill_Picture_Parent: cc.Node,
        Hero_Ghost_Parent: cc.Node,
        Enchantment_Parent: cc.Node,
        Fu_Parent: cc.Node,
        Enemy_Create: Enemy_Create,
        Enemy_Parent: cc.Node,
        Wall_Parent: cc.Node,
        Thunder_Red_Parent: cc.Node,
        Mario_Cube_Parent: cc.Node,
        Mario_Parent: cc.Node,
        Enemy_Bullet_Parent: cc.Node,
        Enemy_Bullet_Speed_Ratio: 1,
        BG_Parent: cc.Node,
        BG_Prefab: [ cc.Prefab ],
        Front_BG_Parent: cc.Node,
        Front_BG_Prefab: [ cc.Prefab ],
        Which_BG: 0,
        BG_Black_Animation: cc.Animation,
        Selected_Hero: 0,
        Hero_Prefab: [ cc.Prefab ],
        Hero_Sprint_Ghost_Prefab: [ cc.Prefab ],
        Hero_Parent: cc.Node,
        Hero: cc.Node,
        Hero_Script: cc.Node,
        Attack_Button_Prefab: [ cc.Prefab ],
        Skill_Button_Prefab: [ cc.Prefab ],
        Attack_Button_Parent: cc.Node,
        Skill_Button_Parent: cc.Node,
        Skill_Button: cc.Node,
        Pet_Parent: cc.Node,
        Team_Level: 0,
        Hero_Star: 0,
        Ini_Hp: 0,
        Full_Hp: 0,
        Hp: 0,
        Attack: 0,
        Crit_Rate: 0,
        Crit_Mult: 0,
        Jing_Jie: 0,
        Defend: 0,
        Skill_Cold_Time: 0,
        JoyStick: JoyStick,
        Sprint: Sprint,
        Sprint_Time: .2,
        Coin: 0,
        Exp: 0,
        Now_Rogue_Energy: 0,
        Every_Rogue_Energy_Up: 1,
        Rogue_Energy_Line: cc.Node,
        Can_Create_Rogue: 1,
        Rogue_Script: Rogue,
        Bullet_Scale_Common_Ratio: 1,
        Rogue_Level: 1,
        Wait_Rogue: 0,
        Normal_Attack_Extra_Check: Normal_Attack_Extra_Check,
        Bullet_Hit_Extra_Check: Bullet_Hit_Extra_Check,
        Sprint_Extra_Check: Sprint_Extra_Check,
        Pet_Born_Extra_Check: Pet_Born_Extra_Check,
        Pet_Dead_Extra_Check: Pet_Dead_Extra_Check,
        Schedule_Extra_Check: Schedule_Extra_Check,
        Start_Move_Extra_Check: Start_Move_Extra_Check,
        Stop_Move_Extra_Check: Stop_Move_Extra_Check,
        Hero_Be_Hit_Extra_Check: Hero_Be_Hit_Extra_Check,
        Next_Xiaoguanqia_Extra_Check: Next_Xiaoguanqia_Extra_Check,
        Normal_Attack_After_Extra_Check: Normal_Attack_After_Extra_Check,
        Hp_Change_Extra_Check: Hp_Change_Extra_Check,
        Recovery_Extra_Check: Recovery_Extra_Check,
        Xiaoguanqia_End_Extra_Check: Xiaoguanqia_End_Extra_Check,
        Pet_Be_Hit_Extra_Check: Pet_Be_Hit_Extra_Check,
        Stop_Attack_Extra_Check: Stop_Attack_Extra_Check,
        Camera_Shake_Big_Animation: cc.Animation,
        Camera_Shake_Medium_Animation: cc.Animation,
        Camera_Shake_Small_Animation: cc.Animation,
        Camera_Shake_Shoot_Animation: cc.Animation,
        Camera_Can_Follow: 1,
        Camera: cc.Camera,
        Camera_Follow: Camera_Follow,
        Buff_Icon_Parent: cc.Node,
        Probability_Result: 0,
        Probability_Result_Mult: 1,
        Probability_Result_Addition: 0,
        Hero_Injured_White: cc.Animation,
        Hero_Dead_Ghost_Parent: cc.Node,
        Hero_Dead_Ghost_Animation: cc.Animation,
        Dead_Coin_Label: cc.Label,
        Dead_Level_Label: cc.Label,
        Dead_Exp_Line: cc.Node,
        Dead_Level_Label_Animation: cc.Animation,
        Wukong_FS_Father: cc.Node,
        Wukong_FS_Script: [ cc.Node ],
        UI_Parent: cc.Node,
        Now_Xiaoguanqia: 1,
        Now_Boci: 1,
        Now_Zongboci: 0,
        Pause_Button: cc.Node,
        Pause_Menu_Animation: cc.Animation,
        Pause_Menu_Script: Pause_Menu,
        Battle_Audio_Controller: Battle_Audio_Controller,
        Music_Is_Open: 1,
        Voice_Is_Open: 1,
        Setting_Menu_Music_Button: cc.Node,
        Setting_Menu_Voice_Button: cc.Node,
        God_Information: God_Information,
        God_Menu_Animation: cc.Animation,
        God_Menu: God_Menu,
        Boss_Is_Alive: 1,
        Boss_Tips_Animation: cc.Animation,
        Boss_Stage: 0,
        Win_Menu_Animation: cc.Animation,
        Win_Coin_Number_Label: cc.Label,
        Win_Level_Label: cc.Label,
        Win_Exp_Line: cc.Node,
        Win_Level_Label_Animation: cc.Animation,
        Win_Guanqia_Label: cc.Label,
        Extra_Skill_Script: Extra_Skill_Script,
        Area_Parent: cc.Node,
        Chat_Menu: Chat_Menu,
        Recovery_Particle_Prefab: cc.Prefab,
        Recovery_Number_Label: cc.Prefab,
        Recovery_Extra_Percentage: 0,
        Follow_Hero_Item: cc.Node,
        Enemy_Weak_Time: 5,
        Weak_Injured_Add: 50,
        Common_Attack_Addition: 0,
        Normal_Attack_Addition: 0,
        Skill_Attack_Addition: 0,
        Is_Surround_Common_Attack_Addition: 0,
        Skill_Crit_Rate_Addition: 0,
        Common_Crit_Rate_Addition: 0,
        Normal_Crit_Rate_Addition: 0,
        Skill_Crit_Mult_Addition: 0,
        Common_Crit_Mult_Addition: 0,
        Normal_Crit_Mult_Addition: 0,
        Skill_Bullet_Scale_Addition: 0,
        Common_Bullet_Scale_Addition: 0,
        Normal_Bullet_Scale_Addition: 0,
        Full_Hp_Addition: 0,
        Xuli_Speed_Addition: 0,
        Bullet_Hp_Addition: 0,
        Enchantment_Sacle_Addition: 0,
        Fu_Attack_Addition: 0,
        Pet_Attack_Addition: 0,
        Surround_Attack_Addition: 0,
        Crucial_Attack_Cult: 3,
        Surround_X: 0,
        Surround_Y: 0,
        Surround_Angle: 0,
        Hero_Shield_Parent: cc.Node,
        Boss_Hp_Line_Parent: Boss_Hp_Line_Parent,
        Boss_Hp_Line_Animation: cc.Animation,
        Boss_Hp_Line_White_Animation: cc.Animation,
        Boss_Hp_Number_Label: cc.Label,
        Boss_Picture_Parent: cc.Node,
        Boss_Picture: Boss_Picture,
        To_Next_Xiaoguanqia_Schedule: cc.Schedule,
        Bo_White: cc.Prefab,
        Skill_Follow_Particle: cc.Prefab,
        Skill_Follow_Smoke: cc.Prefab,
        Skill_Up_Fire: cc.Prefab,
        Enemy_Bullet_Destroy_Particle: cc.Prefab,
        Star_Sbsorption: cc.Prefab,
        Gold_Shoot_Fire: cc.Prefab,
        Air_Sbsorption: cc.Prefab,
        Red_Up_Particle: cc.Prefab,
        Up_Power_Particle: cc.Prefab,
        Surround_Thunder: cc.Prefab,
        Vertigo_Particle: cc.Prefab,
        Crucial_Effect_Prefab: cc.Prefab,
        Police_Key_People_Icon: cc.Prefab,
        Purple_Single_Particle: cc.Prefab,
        Purple_Smoke: cc.Prefab,
        Police_Wanted_Icon: cc.Prefab,
        Enemy_Born_Smoke_White_Coin: cc.Prefab,
        Lovelace_Skill_Menu: cc.Node,
        Lovelace_Skill_Menu_Animation: cc.Animation,
        Lovelace_Skill_Menu_Script: Lovelace_Skill_Menu,
        Is_Red_Hood: 0,
        Mozu_Blackhole: Mozu_Blackhole,
        Qitian_FS_Parent: cc.Node,
        Qitian_FS_Parent_Animation: cc.Animation,
        Qitian_FS_Animation: cc.Animation,
        Qitian_FS: Qitian_FS,
        Qitian_FS_Image: Qitian_FS_Image,
        Boss_Tetris_BUG_Progress_Line: cc.Node,
        Boss_Tetris_BUG_Progress: 0,
        Dead_Bullet_Parent: cc.Node,
        Fly_Item: cc.Node,
        Rain: cc.Node,
        Pause_Test_Label: cc.Label
      },
      start: function start() {
        var _this = this;
        cc.game.setFrameRate(59);
        this.Set_BG();
        this.First_Play_Save_Data_Set();
        this.Normal_Initial_Data.Start_Set();
        this.Create_Hero();
        this.Set_Hero_Data();
        this.JoyStick.Start_Set();
        this.JoyStick.Battle_Controller = this;
        this.Hero_Script.Start_Set();
        this.Sprint.Start_Set();
        this.Rogue_Script.Start_Set();
        this.Pause_Button_Set();
        this.Music_Voice_Set();
        this.Lovelace_Skill_Menu_Script.Battle_Controller = this;
        this.Battle_Audio_Controller.Battle_Controller = this;
        this.Battle_Audio_Controller.Start_Set();
        this.God_Menu.Battle_Controller = this;
        this.Extra_Skill_Script.Battle_Controller = this;
        this.Boss_Hp_Line_Parent.Battle_Controller = this;
        this.Boss_Picture.Battle_Controller = this;
        this.Mozu_Blackhole.Battle_Controller = this;
        this.Mozu_Blackhole.Start_Set();
        this.Set_Boci_Tips_Label();
        cc.tween(this.All_Black).to(2, {
          opacity: 0
        }).call(function() {
          cc.tween(_this.Boci_Tips).to(2, {
            opacity: 0
          }).call(function() {
            _this.Enemy_Create.Enemy_Create();
          }).start();
        }).start();
        this.Chat_Menu.Battle_Controller = this;
        this.To_Next_Xiaoguanqia_Schedule = function() {
          if (this.Wait_Rogue > 0) {
            if (1 == this.Can_Create_Rogue) {
              this.Can_Create_Rogue = 0;
              this.JoyStick.Joytick_Back();
              1 == this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Is_Attacking && this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Back_To_Stay();
              this.Battle_Hide();
              this.Rogue_Script.node.active = true;
              this.Rogue_Script.Start_Rogue();
            }
          } else this.To_Next_Xiaoguanqia();
        };
      },
      Set_BG: function Set_BG() {
        this.Which_BG = JSON.parse(cc.sys.localStorage.getItem("Which_BG"));
        null == this.Which_BG && (this.Which_BG = 0);
        var BG = cc.instantiate(this.BG_Prefab[this.Which_BG]);
        var Front_BG = cc.instantiate(this.Front_BG_Prefab[this.Which_BG]);
        BG.parent = this.BG_Parent;
        Front_BG.parent = this.Front_BG_Parent;
        this.Fly_Item.opacity = JSON.parse(cc.sys.localStorage.getItem("Fly_Item_Opacity"));
        this.Rain.opacity = JSON.parse(cc.sys.localStorage.getItem("Rain_Opacity"));
      },
      Music_Voice_Set: function Music_Voice_Set() {
        var Music_Is_Open = cc.sys.localStorage.getItem("Music_Is_Open");
        var Voice_Is_Open = cc.sys.localStorage.getItem("Voice_Is_Open");
        null != Music_Is_Open && (this.Music_Is_Open = Music_Is_Open);
        null != Voice_Is_Open && (this.Voice_Is_Open = Voice_Is_Open);
        1 == this.Music_Is_Open ? this.Setting_Menu_Music_Button.opacity = 255 : this.Setting_Menu_Music_Button.opacity = 100;
        1 == this.Voice_Is_Open ? this.Setting_Menu_Voice_Button.opacity = 255 : this.Setting_Menu_Voice_Button.opacity = 100;
      },
      First_Play_Save_Data_Set: function First_Play_Save_Data_Set() {
        var Selected_Hero = cc.sys.localStorage.getItem("Selected_Hero");
        if (null == Selected_Hero) {
          cc.sys.localStorage.setItem("Selected_Hero", 0);
          cc.sys.localStorage.setItem("Team_Level", 1);
        }
      },
      Create_Hero: function Create_Hero() {
        this.Selected_Hero = 1 * cc.sys.localStorage.getItem("Selected_Hero");
        this.Hero = cc.instantiate(this.Hero_Prefab[this.Selected_Hero]);
        this.Hero.parent = this.Hero_Parent;
        this.Hero.setPosition(-600, 0);
        this.Hero_Script = this.Hero.getComponent(this.Hero.name);
        var Attack_Button = cc.instantiate(this.Attack_Button_Prefab[this.Selected_Hero]);
        Attack_Button.parent = this.Attack_Button_Parent;
        Attack_Button.setPosition(0, 0);
        this.Skill_Button = cc.instantiate(this.Skill_Button_Prefab[this.Selected_Hero]);
        this.Skill_Button.parent = this.Skill_Button_Parent;
        this.Skill_Button.setPosition(0, 0);
      },
      Set_Hero_Data: function Set_Hero_Data() {
        this.Team_Level = 1 * cc.sys.localStorage.getItem("Team_Level");
        this.Hero_Star = JSON.parse(cc.sys.localStorage.getItem("Hero_Star"));
        this.Full_Hp = Math.ceil(this.Hero_Initial_Data.HP[this.Selected_Hero] * (100 + this.Normal_Initial_Data.Team_Level_Up_Hp_Up * (this.Team_Level - 1)) / 100);
        this.Ini_Hp = this.Full_Hp;
        this.Hp = this.Full_Hp;
        this.Attack = Math.ceil(this.Hero_Initial_Data.Attack[this.Selected_Hero] * (100 + this.Normal_Initial_Data.Team_Level_Up_Attack_Up * (this.Team_Level - 1)) / 100);
        this.Crit_Rate = this.Hero_Initial_Data.Crit_Rate[this.Selected_Hero];
        this.Crit_Mult = this.Hero_Initial_Data.Crit_Mult[this.Selected_Hero];
        this.Jing_Jie = this.Team_Level;
        this.Defend = this.Team_Level;
        this.Skill_Cold_Time = this.Hero_Initial_Data.Skill_Cold_Time[this.Selected_Hero];
      },
      Rogue_Energy_Up: function Rogue_Energy_Up() {
        this.Now_Rogue_Energy += this.Every_Rogue_Energy_Up;
        cc.tween(this.Rogue_Energy_Line).to(.2, {
          scaleX: this.Now_Rogue_Energy / this.Normal_Initial_Data.Initial_Rogue_Level_Up_Need
        }).start();
        if (this.Now_Rogue_Energy >= this.Normal_Initial_Data.Initial_Rogue_Level_Up_Need) {
          this.Now_Rogue_Energy = 0;
          this.Normal_Initial_Data.Initial_Rogue_Level_Up_Need += this.Normal_Initial_Data.Every_Rogue_Level_Up_Need_Up;
          this.Wait_Rogue++;
          this.Rogue_Level++;
          this.Rogue_Energy_Linde_To_Zero();
        }
      },
      Rogue_Energy_Linde_To_Zero: function Rogue_Energy_Linde_To_Zero() {
        cc.tween(this.Rogue_Energy_Line).to(.2, {
          scaleX: 0
        }).start();
      },
      Camera_Shake_Big: function Camera_Shake_Big() {
        this.Camera_Shake_Big_Animation.play();
      },
      Camera_Shake_Medium: function Camera_Shake_Medium() {
        this.Camera_Shake_Medium_Animation.play();
      },
      Camera_Shake_Small: function Camera_Shake_Small() {
        this.Camera_Shake_Small_Animation.play();
      },
      Camera_Shake_Shoot: function Camera_Shake_Shoot() {
        this.Camera_Shake_Shoot_Animation.play();
      },
      Probability_Result_Create: function Probability_Result_Create() {
        this.Probability_Result = Math.floor(100 * Math.random()) * this.Probability_Result_Mult + this.Probability_Result_Addition;
      },
      Battle_Hide: function Battle_Hide() {
        this.Hero_Parent.active = false;
        this.Wukong_FS_Father.active = false;
        this.Hero_Bullet_Parent.active = false;
        this.Particle_Parent.active = false;
        this.Enemy_Parent.active = false;
        this.Wall_Parent.active = false;
        this.Thunder_Red_Parent.active = false;
        this.Enemy_Bullet_Parent.active = false;
        this.UI_Parent.active = false;
        this.Area_Parent.active = false;
        this.Follow_Hero_Item.active = false;
        this.Enchantment_Parent.active = false;
        this.Schedule_Extra_Check.node.parent.active = false;
        this.Hero_Skill_Picture_Parent.active = false;
        this.Hero_Shield_Parent.active = false;
        this.Pet_Parent.active = false;
        this.Particle_Parent_Back.active = false;
        this.Fu_Parent.active = false;
      },
      Battle_Show: function Battle_Show() {
        this.Hero_Parent.active = true;
        this.Wukong_FS_Father.active = true;
        this.Hero_Bullet_Parent.active = true;
        this.Particle_Parent.active = true;
        this.Enemy_Parent.active = true;
        this.Wall_Parent.active = true;
        this.Thunder_Red_Parent.active = true;
        this.Enemy_Bullet_Parent.active = true;
        this.UI_Parent.active = true;
        this.Area_Parent.active = true;
        this.Follow_Hero_Item.active = true;
        this.Enchantment_Parent.active = true;
        this.Schedule_Extra_Check.node.parent.active = true;
        this.Hero_Skill_Picture_Parent.active = true;
        this.Hero_Shield_Parent.active = true;
        this.Pet_Parent.active = true;
        this.Particle_Parent_Back.active = true;
        this.Fu_Parent.active = true;
      },
      Dead_Menu_Spoil_Show: function Dead_Menu_Spoil_Show() {
        var _this2 = this;
        var Coin_Number_Show = 0;
        cc.tween(this.node).delay(.5).repeat(this.Coin, cc.tween().call(function() {
          Coin_Number_Show++;
          _this2.Dead_Coin_Label.string = "\u91d1\u5e01   +" + Coin_Number_Show;
        }).delay(1 / this.Coin)).start();
        var Need_Add_Exp = this.Exp;
        var Now_Team_Level = JSON.parse(cc.sys.localStorage.getItem("Team_Level"));
        null == Now_Team_Level && (Now_Team_Level = 1);
        var Now_Team_Exp = JSON.parse(cc.sys.localStorage.getItem("Team_Exp"));
        null == Now_Team_Exp && (Now_Team_Exp = 0);
        this.Win_Level_Label.string = "\u7b49\u7ea7" + Now_Team_Level;
        this.Dead_Exp_Line.scaleX = Now_Team_Exp / 1e4;
        cc.tween(this.node).delay(.5).repeat(Need_Add_Exp, cc.tween().call(function() {
          Now_Team_Exp++;
          if (Now_Team_Exp >= 1e4) {
            Now_Team_Exp = 0;
            Now_Team_Level++;
            _this2.Dead_Level_Label.string = "\u7b49\u7ea7" + Now_Team_Level;
            _this2.Dead_Level_Label_Animation.play();
          }
          _this2.Dead_Exp_Line.scaleX = Now_Team_Exp / 1e4;
        }).delay(1 / Need_Add_Exp)).start();
        var Last_Coin = JSON.parse(cc.sys.localStorage.getItem("Coin"));
        null == Last_Coin && (Last_Coin = 0);
        Last_Coin += Need_Add_Exp;
        cc.sys.localStorage.setItem("Team_Level", JSON.stringify(Now_Team_Level));
        cc.sys.localStorage.setItem("Team_Exp", JSON.stringify(Now_Team_Exp));
        cc.sys.localStorage.setItem("Coin", JSON.stringify(Last_Coin));
      },
      Pause_Button_Set: function Pause_Button_Set() {
        this.Pause_Menu_Script.Battle_Controller = this;
        this.Pause_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          this.Pause_Menu_Animation.node.active = true;
          this.Pause_Menu_Script.Initialization();
          this.Pause_Menu_Animation.play("Pause_Menu_In");
          this.JoyStick.Joytick_Back();
          1 == this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Is_Attacking && this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Back_To_Stay();
          this.Battle_Hide();
          this.Pause_Test_Label.string = "\u6211\u65b9\u5b50\u5f39\uff1a" + this.Hero_Bullet_Parent.children.length + "\n\u654c\u65b9\u5b50\u5f39\uff1a" + this.Enemy_Bullet_Parent.children.length + "\n\u7c92\u5b50\uff1a" + this.Particle_Parent.children.length;
          console.log(this.Particle_Parent.children);
        }, this);
      },
      Enemy_Dead_Check: function Enemy_Dead_Check() {
        var _this3 = this;
        if (10 == this.Now_Xiaoguanqia) {
          if (1 == this.Boss_Is_Alive) {
            if (2 == this.Enemy_Parent.children.length && this.Now_Boci < this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1]) {
              this.Now_Boci++;
              this.Now_Zongboci++;
              this.Set_Boci_Tips_Label();
              cc.tween(this.Boci_Tips).to(.5, {
                opacity: 255
              }).delay(1).to(1, {
                opacity: 0
              }).call(function() {
                _this3.Enemy_Create.Enemy_Create();
              }).start();
            }
          } else if (1 == this.Enemy_Parent.children.length) if (this.Now_Boci < this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1]) {
            this.Now_Boci++;
            this.Now_Zongboci++;
            this.Set_Boci_Tips_Label();
            cc.tween(this.Boci_Tips).to(.5, {
              opacity: 255
            }).delay(1).to(1, {
              opacity: 0
            }).call(function() {
              _this3.Enemy_Create.Enemy_Create();
            }).start();
          } else this.Win();
        } else if (1 == this.Enemy_Parent.children.length) if (this.Now_Boci < this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1]) {
          this.Now_Boci++;
          this.Now_Zongboci++;
          this.Set_Boci_Tips_Label();
          cc.tween(this.Boci_Tips).to(.5, {
            opacity: 255
          }).delay(1).to(1, {
            opacity: 0
          }).call(function() {
            _this3.Enemy_Create.Enemy_Create();
          }).start();
        } else if (this.Now_Xiaoguanqia < this.Normal_Initial_Data.One_Guanqia_Have_Xiaoguangqia) {
          for (var i = 0; i < this.Xiaoguanqia_End_Extra_Check.Xiaoguanqia_End_Extra_Check_Script.length; i++) this.Xiaoguanqia_End_Extra_Check.Xiaoguanqia_End_Extra_Check_Script[i].Check();
          this.unschedule(this.To_Next_Xiaoguanqia_Schedule);
          this.scheduleOnce(this.To_Next_Xiaoguanqia_Schedule, 3);
        }
      },
      To_Next_Xiaoguanqia: function To_Next_Xiaoguanqia() {
        this.Now_Xiaoguanqia++;
        this.Now_Zongboci++;
        this.Now_Boci = 1;
        this.JoyStick.Joytick_Back();
        1 == this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Is_Attacking && this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Back_To_Stay();
        this.Battle_Hide();
        this.God_Menu.node.active = true;
        this.God_Menu_Animation.play("God_Menu_In");
        this.God_Menu.Set();
      },
      New_Xiaoguanqia_Boci_Tips: function New_Xiaoguanqia_Boci_Tips() {
        var _this4 = this;
        cc.tween(this.Boci_Tips).to(.5, {
          opacity: 255
        }).delay(1).to(1, {
          opacity: 0
        }).call(function() {
          22 != _this4.Now_Zongboci ? 3 == _this4.Now_Zongboci ? _this4.Enemy_Create.Angle_Enemy_Create(0) : _this4.Enemy_Create.Enemy_Create() : _this4.Boss_Tips_Animation.play("Boss_Tips");
        }).start();
      },
      Set_Boci_Tips_Label: function Set_Boci_Tips_Label() {
        this.Normal_Initial_Data.Now_Guanqia < 9 ? this.Boci_Tips_Label.string = this.Normal_Initial_Data.Guanqia_Name[this.Normal_Initial_Data.Now_Guanqia - 1] + " - " + this.Normal_Initial_Data.Xiaoguanqia_Name[this.Now_Xiaoguanqia - 1] + "\n\u7b2c" + this.Now_Boci + "\u6ce2\u654c\u4eba/\u5171" + this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1] + "\u6ce2" : this.Boci_Tips_Label.string = this.Normal_Initial_Data.Guanqia_Name[8] + (this.Normal_Initial_Data.Now_Guanqia - 8) + " - " + this.Normal_Initial_Data.Xiaoguanqia_Name[this.Now_Xiaoguanqia - 1] + "\n\u7b2c" + this.Now_Boci + "\u6ce2\u654c\u4eba/\u5171" + this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1] + "\u6ce2";
        this.Boci_Plate_Label.string = "\u7b2c" + this.Now_Boci + "\u6ce2\u654c\u4eba/\u5171" + this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1] + "\u6ce2";
      },
      Win: function Win() {
        var _this5 = this;
        this.Battle_Hide();
        this.Win_Menu_Animation.node.active = true;
        this.Win_Menu_Animation.play("Show_Dead_Menu");
        var Coin_Number_Show = 0;
        cc.tween(this.node).delay(.5).repeat(this.Coin, cc.tween().call(function() {
          Coin_Number_Show++;
          _this5.Win_Coin_Number_Label.string = "\u91d1\u5e01   +" + Coin_Number_Show;
        }).delay(1 / this.Coin)).start();
        var Need_Add_Exp = this.Exp;
        var Now_Team_Level = JSON.parse(cc.sys.localStorage.getItem("Team_Level"));
        null == Now_Team_Level && (Now_Team_Level = 1);
        var Now_Team_Exp = JSON.parse(cc.sys.localStorage.getItem("Team_Exp"));
        null == Now_Team_Exp && (Now_Team_Exp = 0);
        this.Win_Level_Label.string = "\u7b49\u7ea7" + Now_Team_Level;
        this.Win_Exp_Line.scaleX = Now_Team_Exp / 1e4;
        cc.tween(this.node).delay(.5).repeat(Need_Add_Exp, cc.tween().call(function() {
          Now_Team_Exp++;
          if (Now_Team_Exp >= 1e4) {
            Now_Team_Exp = 0;
            Now_Team_Level++;
            _this5.Win_Level_Label.string = "\u7b49\u7ea7" + Now_Team_Level;
            _this5.Win_Level_Label_Animation.play();
          }
          _this5.Win_Exp_Line.scaleX = Now_Team_Exp / 1e4;
        }).delay(1 / Need_Add_Exp)).start();
        if (this.Normal_Initial_Data.Now_Guanqia < 9) var Now_Guanqia_Label = this.Normal_Initial_Data.Guanqia_Name[this.Normal_Initial_Data.Now_Guanqia - 1]; else var Now_Guanqia_Label = this.Normal_Initial_Data.Guanqia_Name[8] + (this.Normal_Initial_Data.Now_Guanqia - 8);
        var Next_Guanqia = this.Normal_Initial_Data.Now_Guanqia + 1;
        if (Next_Guanqia < 9) var Next_Guanqia_Label = this.Normal_Initial_Data.Guanqia_Name[this.Normal_Initial_Data.Now_Guanqia]; else var Next_Guanqia_Label = this.Normal_Initial_Data.Guanqia_Name[8] + (this.Normal_Initial_Data.Now_Guanqia - 7);
        this.Win_Guanqia_Label.string = "\u8bd5\u70bc\u7b49\u7ea7   " + Now_Guanqia_Label + "   =>   " + Next_Guanqia_Label;
        var Last_Coin = JSON.parse(cc.sys.localStorage.getItem("Coin"));
        null == Last_Coin && (Last_Coin = 0);
        Last_Coin += Need_Add_Exp;
        cc.sys.localStorage.setItem("Team_Level", JSON.stringify(Now_Team_Level));
        cc.sys.localStorage.setItem("Team_Exp", JSON.stringify(Now_Team_Exp));
        cc.sys.localStorage.setItem("Coin", JSON.stringify(Last_Coin));
        cc.sys.localStorage.setItem("Now_Guanqia", JSON.stringify(Next_Guanqia));
      },
      Common_Attack_Addition_Add: function Common_Attack_Addition_Add(Number) {
        this.Common_Attack_Addition = this.Common_Attack_Addition + Number;
      },
      Common_Attack_Addition_Reduce: function Common_Attack_Addition_Reduce(Number) {
        this.Common_Attack_Addition = this.Common_Attack_Addition - Number;
      },
      Normal_Attack_Addition_Add: function Normal_Attack_Addition_Add(Number) {
        this.Normal_Attack_Addition = this.Normal_Attack_Addition + Number;
      },
      Normal_Attack_Addition_Reduce: function Normal_Attack_Addition_Reduce(Number) {
        this.Normal_Attack_Addition = this.Normal_Attack_Addition - Number;
      },
      Full_Hp_Addition_Add: function Full_Hp_Addition_Add(Number) {
        var Now_Hp_Proportion = this.Hp / this.Full_Hp;
        this.Full_Hp_Addition += Number;
        this.Full_Hp = Math.ceil(this.Ini_Hp * (100 + this.Full_Hp_Addition) / 100);
        this.Hp = Math.ceil(this.Full_Hp * Now_Hp_Proportion);
      },
      Common_Bullet_Scale_Addition_Add: function Common_Bullet_Scale_Addition_Add(Number) {
        this.Common_Bullet_Scale_Addition += Number;
      },
      Common_Bullet_Scale_Addition_Reduce: function Common_Bullet_Scale_Addition_Reduce(Number) {
        this.Common_Bullet_Scale_Addition -= Number;
      },
      Normal_Crit_Rate_Addition_Add: function Normal_Crit_Rate_Addition_Add(Number) {
        this.Normal_Crit_Rate_Addition += Number;
      },
      Normal_Crit_Rate_Addition_Deduce: function Normal_Crit_Rate_Addition_Deduce(Number) {
        this.Normal_Crit_Rate_Addition -= Number;
      },
      Skill_Attack_Addition_Add: function Skill_Attack_Addition_Add(Number) {
        this.Skill_Attack_Addition += Number;
      },
      Skill_Attack_Addition_Reduce: function Skill_Attack_Addition_Reduce(Number) {
        this.Skill_Attack_Addition -= Number;
      },
      Hp_Change_To: function Hp_Change_To(Number) {
        this.Hp = Math.ceil(this.Full_Hp * Number / 100);
        this.Hero_Script.Hero_Common.Hp_Line.scaleX = this.Hp / this.Full_Hp;
        for (var i = 0; i < this.Hp_Change_Extra_Check.Hp_Change_Extra_Check_Script.length; i++) this.Hp_Change_Extra_Check.Hp_Change_Extra_Check_Script[i].Check();
      },
      Hp_Change_By: function Hp_Change_By(Number) {
        this.Hp = Math.ceil(this.Hp + this.Hp * Number / 100);
        this.Hero_Script.Hero_Common.Hp_Line.scaleX = this.Hp / this.Full_Hp;
        for (var i = 0; i < this.Hp_Change_Extra_Check.Hp_Change_Extra_Check_Script.length; i++) this.Hp_Change_Extra_Check.Hp_Change_Extra_Check_Script[i].Check();
      },
      Buff_Icon_Sort: function Buff_Icon_Sort() {
        if (null != this.Hero_Script.Hero_Common.Buff_Icon_Parent && this.Hero_Script.Hero_Common.Buff_Icon_Parent.children.length > 0) for (var i = 0; i < this.Hero_Script.Hero_Common.Buff_Icon_Parent.children.length; i++) this.Hero_Script.Hero_Common.Buff_Icon_Parent.children[i].x = -200 * i;
      },
      Left_Up_Buff_Icon_Sort: function Left_Up_Buff_Icon_Sort() {
        if (this.Buff_Icon_Parent.children.length > 0) for (var i = 0; i < this.Buff_Icon_Parent.children.length; i++) if (null != this.Buff_Icon_Parent.children[i]) {
          this.Buff_Icon_Parent.children[i].x = i % 4 * 200 - 1400;
          this.Buff_Icon_Parent.children[i].y = 200 * -Math.floor(i / 4) + 550;
        }
      },
      Set_Surround_Position: function Set_Surround_Position() {
        var Yushu = this.Hero_Script.Hero_Common.Surround_Parent.children.length % 8;
        var Quanshu = Math.ceil(this.Hero_Script.Hero_Common.Surround_Parent.children.length / 8);
        var distance = 250 * Quanshu;
        switch (Yushu) {
         case 1:
          this.Surround_Angle = 0;
          break;

         case 2:
          this.Surround_Angle = 180;
          break;

         case 3:
          this.Surround_Angle = 90;
          break;

         case 4:
          this.Surround_Angle = 270;
          break;

         case 5:
          this.Surround_Angle = 45;
          break;

         case 6:
          this.Surround_Angle = 225;
          break;

         case 7:
          this.Surround_Angle = 135;
          break;

         case 0:
          this.Surround_Angle = 315;
        }
        this.Surround_X = distance * Math.cos(this.Surround_Angle * Math.PI / 180);
        this.Surround_Y = distance * Math.sin(this.Surround_Angle * Math.PI / 180);
      },
      Stop_Enemy_Move: function Stop_Enemy_Move() {
        if (null != this.Enemy_Parent.children) for (var i = 0; i < this.Enemy_Parent.children.length; i++) this.Enemy_Parent.children[i].getComponent("Enemy_Common").Stop();
      },
      Restore_Enemy_Move: function Restore_Enemy_Move() {
        if (null != this.Enemy_Parent.children) for (var i = 0; i < this.Enemy_Parent.children.length; i++) {
          var Enemy_Common = this.Enemy_Parent.children[i].getComponent("Enemy_Common");
          0 == Enemy_Common.Is_Special ? Enemy_Common.Move() : Enemy_Common.Special_Move();
        }
      },
      Stop_Enemy_Bullet: function Stop_Enemy_Bullet() {
        this.Enemy_Bullet_Speed_Ratio = .1 * this.Enemy_Bullet_Speed_Ratio;
        if (null != this.Enemy_Bullet_Parent.children) for (var i = 0; i < this.Enemy_Bullet_Parent.children.length; i++) this.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common").Set_Speed();
      },
      Restore_Enemy_Bullet: function Restore_Enemy_Bullet() {
        this.Enemy_Bullet_Speed_Ratio = 10 * this.Enemy_Bullet_Speed_Ratio;
        if (null != this.Enemy_Bullet_Parent.children) for (var i = 0; i < this.Enemy_Bullet_Parent.children.length; i++) this.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common").Set_Speed();
      },
      Boss_Battle_Start: function Boss_Battle_Start() {
        var _this6 = this;
        this.Boss_Picture.Create_Picture();
        cc.tween(this.node).delay(1.5).call(function() {
          cc.tween(_this6.Rogue_Energy_Line.parent).to(.5, {
            opacity: 0
          }).start();
          _this6.UI_Parent.active = true;
          _this6.Boss_Hp_Line_Parent.node.active = true;
          _this6.Boss_Hp_Line_Parent.In();
          var Enemy_Common = _this6.Enemy_Parent.children[0].getComponent("Enemy_Common");
          Enemy_Common.Can_Injured = 1;
          Enemy_Common.Can_Move = 1;
          Enemy_Common.Enemy_Script.Think();
        }).start();
      },
      Continue_Boss_Battle: function Continue_Boss_Battle() {
        this.UI_Parent.active = true;
        this.Boss_Hp_Line_Parent.node.active = true;
        this.Boss_Hp_Line_Parent.In();
        var Enemy_Common = this.Enemy_Parent.children[0].getComponent("Enemy_Common");
        Enemy_Common.Noarmal_Change_Stage();
      },
      Destroy_Enemy_Bullet: function Destroy_Enemy_Bullet() {
        var Bullet_Arrary = [];
        for (var i = 0; i < this.Enemy_Bullet_Parent.children.length; i++) Bullet_Arrary.push(this.Enemy_Bullet_Parent.children[i]);
        for (var i = 0; i < Bullet_Arrary.length; i++) Bullet_Arrary[i].getComponent("Enemy_Bullet_Common").Must_Destroy();
      }
    });
    cc._RF.pop();
  }, {
    Battle_Audio_Controller: "Battle_Audio_Controller",
    Boss_Hp_Line_Parent: "Boss_Hp_Line_Parent",
    Boss_Picture: "Boss_Picture",
    Bullet_Hit_Extra_Check: "Bullet_Hit_Extra_Check",
    Camera_Follow: "Camera_Follow",
    Chat_Menu: "Chat_Menu",
    Enemy_Create: "Enemy_Create",
    Extra_Skill_Script: "Extra_Skill_Script",
    God_Information: "God_Information",
    God_Menu: "God_Menu",
    Hero_Be_Hit_Extra_Check: "Hero_Be_Hit_Extra_Check",
    Hero_Initial_Data: "Hero_Initial_Data",
    Hp_Change_Extra_Check: "Hp_Change_Extra_Check",
    JoyStick: "JoyStick",
    Lovelace_Skill_Menu: "Lovelace_Skill_Menu",
    Mozu_Blackhole: "Mozu_Blackhole",
    Next_Xiaoguanqia_Extra_Check: "Next_Xiaoguanqia_Extra_Check",
    Normal_Attack_After_Extra_Check: "Normal_Attack_After_Extra_Check",
    Normal_Attack_Extra_Check: "Normal_Attack_Extra_Check",
    Normal_Initial_Data: "Normal_Initial_Data",
    Pause_Menu: "Pause_Menu",
    Pet_Be_Hit_Extra_Check: "Pet_Be_Hit_Extra_Check",
    Pet_Born_Extra_Check: "Pet_Born_Extra_Check",
    Pet_Dead_Extra_Check: "Pet_Dead_Extra_Check",
    Qitian_FS: "Qitian_FS",
    Qitian_FS_Image: "Qitian_FS_Image",
    Recovery_Extra_Check: "Recovery_Extra_Check",
    Rogue: "Rogue",
    Schedule_Extra_Check: "Schedule_Extra_Check",
    Sprint: "Sprint",
    Sprint_Extra_Check: "Sprint_Extra_Check",
    Start_Move_Extra_Check: "Start_Move_Extra_Check",
    Stop_Attack_Extra_Check: "Stop_Attack_Extra_Check",
    Stop_Move_Extra_Check: "Stop_Move_Extra_Check",
    Xiaoguanqia_End_Extra_Check: "Xiaoguanqia_End_Extra_Check"
  } ],
  Battle_Controller: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "13d0cdp95hIu60fXVw2/RKu", "Battle_Controller");
    "use strict";
    var Normal_Initial_Data = require("Normal_Initial_Data");
    var Hero_Initial_Data = require("Hero_Initial_Data");
    var JoyStick = require("JoyStick");
    var Sprint = require("Sprint");
    var Enemy_Create = require("Enemy_Create");
    var Rogue = require("Rogue");
    var Pause_Menu = require("Pause_Menu");
    var Battle_Audio_Controller = require("Battle_Audio_Controller");
    var God_Information = require("God_Information");
    var God_Menu = require("God_Menu");
    var Camera_Follow = require("Camera_Follow");
    var Chat_Menu = require("Chat_Menu");
    var Boss_Hp_Line_Parent = require("Boss_Hp_Line_Parent");
    var Boss_Picture = require("Boss_Picture");
    var Lovelace_Skill_Menu = require("Lovelace_Skill_Menu");
    var Mozu_Blackhole = require("Mozu_Blackhole");
    var Qitian_FS = require("Qitian_FS");
    var Qitian_FS_Image = require("Qitian_FS_Image");
    var Normal_Attack_Extra_Check = require("Normal_Attack_Extra_Check");
    var Bullet_Hit_Extra_Check = require("Bullet_Hit_Extra_Check");
    var Sprint_Extra_Check = require("Sprint_Extra_Check");
    var Pet_Born_Extra_Check = require("Pet_Born_Extra_Check");
    var Pet_Dead_Extra_Check = require("Pet_Dead_Extra_Check");
    var Schedule_Extra_Check = require("Schedule_Extra_Check");
    var Start_Move_Extra_Check = require("Start_Move_Extra_Check");
    var Stop_Move_Extra_Check = require("Stop_Move_Extra_Check");
    var Hero_Be_Hit_Extra_Check = require("Hero_Be_Hit_Extra_Check");
    var Next_Xiaoguanqia_Extra_Check = require("Next_Xiaoguanqia_Extra_Check");
    var Normal_Attack_After_Extra_Check = require("Normal_Attack_After_Extra_Check");
    var Hp_Change_Extra_Check = require("Hp_Change_Extra_Check");
    var Recovery_Extra_Check = require("Recovery_Extra_Check");
    var Xiaoguanqia_End_Extra_Check = require("Xiaoguanqia_End_Extra_Check");
    var Pet_Be_Hit_Extra_Check = require("Pet_Be_Hit_Extra_Check");
    var Stop_Attack_Extra_Check = require("Stop_Attack_Extra_Check");
    var Extra_Skill_Script = require("Extra_Skill_Script");
    cc.Class({
      extends: cc.Component,
      properties: {
        Load_Menu: cc.Node,
        Load_Label: cc.Label,
        All_Black: cc.Node,
        Boci_Tips: cc.Node,
        Boci_Tips_Label: cc.Label,
        Boci_Plate_Label: cc.Label,
        Hero_Initial_Data: Hero_Initial_Data,
        Normal_Initial_Data: Normal_Initial_Data,
        Hero_Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Particle_Parent_Back: cc.Node,
        Hero_Skill_Picture_Parent: cc.Node,
        Hero_Ghost_Parent: cc.Node,
        Enchantment_Parent: cc.Node,
        Fu_Parent: cc.Node,
        Enemy_Create: Enemy_Create,
        Will_Create_Enemy: [ cc.Integer ],
        Will_Create_Boss: cc.Integer,
        Enemy_Parent: cc.Node,
        Wall_Parent: cc.Node,
        Thunder_Red_Parent: cc.Node,
        Mario_Cube_Parent: cc.Node,
        Mario_Parent: cc.Node,
        Enemy_Bullet_Parent: cc.Node,
        Enemy_Bullet_Speed_Ratio: 1,
        BG_Parent: cc.Node,
        Front_BG_Parent: cc.Node,
        Which_BG: 0,
        BG_Black_Animation: cc.Animation,
        Selected_Hero: 0,
        Hero_Sprint_Ghost_Prefab: cc.Prefab,
        Hero_Parent: cc.Node,
        Hero: cc.Node,
        Hero_Script: cc.Node,
        Attack_Button_Parent: cc.Node,
        Skill_Button_Parent: cc.Node,
        Skill_Button: cc.Node,
        Pet_Parent: cc.Node,
        Team_Level: 0,
        Hero_Star: 0,
        Ini_Hp: 0,
        Full_Hp: 0,
        Hp: 0,
        Attack: 0,
        Crit_Rate: 0,
        Crit_Mult: 0,
        Jing_Jie: 0,
        Defend: 0,
        Skill_Cold_Time: 0,
        JoyStick: JoyStick,
        Sprint: Sprint,
        Sprint_Time: .2,
        Coin: 0,
        Exp: 0,
        Now_Rogue_Energy: 0,
        Every_Rogue_Energy_Up: 1,
        Rogue_Energy_Line: cc.Node,
        Can_Create_Rogue: 1,
        Rogue_Script: Rogue,
        Bullet_Scale_Common_Ratio: 1,
        Rogue_Level: 1,
        Wait_Rogue: 0,
        Normal_Attack_Extra_Check: Normal_Attack_Extra_Check,
        Bullet_Hit_Extra_Check: Bullet_Hit_Extra_Check,
        Sprint_Extra_Check: Sprint_Extra_Check,
        Pet_Born_Extra_Check: Pet_Born_Extra_Check,
        Pet_Dead_Extra_Check: Pet_Dead_Extra_Check,
        Schedule_Extra_Check: Schedule_Extra_Check,
        Start_Move_Extra_Check: Start_Move_Extra_Check,
        Stop_Move_Extra_Check: Stop_Move_Extra_Check,
        Hero_Be_Hit_Extra_Check: Hero_Be_Hit_Extra_Check,
        Next_Xiaoguanqia_Extra_Check: Next_Xiaoguanqia_Extra_Check,
        Normal_Attack_After_Extra_Check: Normal_Attack_After_Extra_Check,
        Hp_Change_Extra_Check: Hp_Change_Extra_Check,
        Recovery_Extra_Check: Recovery_Extra_Check,
        Xiaoguanqia_End_Extra_Check: Xiaoguanqia_End_Extra_Check,
        Pet_Be_Hit_Extra_Check: Pet_Be_Hit_Extra_Check,
        Stop_Attack_Extra_Check: Stop_Attack_Extra_Check,
        Camera_Shake_Big_Animation: cc.Animation,
        Camera_Shake_Medium_Animation: cc.Animation,
        Camera_Shake_Small_Animation: cc.Animation,
        Camera_Shake_Shoot_Animation: cc.Animation,
        Camera_Can_Follow: 1,
        Camera: cc.Camera,
        Camera_Follow: Camera_Follow,
        Buff_Icon_Parent: cc.Node,
        Probability_Result: 0,
        Probability_Result_Mult: 1,
        Probability_Result_Addition: 0,
        Hero_Injured_White: cc.Animation,
        Hero_Dead_Ghost_Parent: cc.Node,
        Hero_Dead_Ghost_Animation: cc.Animation,
        Dead_Coin_Label: cc.Label,
        Dead_Level_Label: cc.Label,
        Dead_Exp_Line: cc.Node,
        Dead_Level_Label_Animation: cc.Animation,
        Wukong_FS_Father: cc.Node,
        Wukong_FS_Script: [ cc.Node ],
        UI_Parent: cc.Node,
        Now_Xiaoguanqia: 1,
        Now_Boci: 1,
        Now_Zongboci: 0,
        Pause_Button: cc.Node,
        Pause_Menu_Animation: cc.Animation,
        Pause_Menu_Script: Pause_Menu,
        Battle_Audio_Controller: Battle_Audio_Controller,
        Music_Is_Open: 1,
        Voice_Is_Open: 1,
        Setting_Menu_Music_Button: cc.Node,
        Setting_Menu_Voice_Button: cc.Node,
        God_Information: God_Information,
        God_Menu_Animation: cc.Animation,
        God_Menu: God_Menu,
        Boss_Is_Alive: 1,
        Boss_Tips_Animation: cc.Animation,
        Boss_Stage: 0,
        Win_Menu_Animation: cc.Animation,
        Win_Coin_Number_Label: cc.Label,
        Win_Level_Label: cc.Label,
        Win_Exp_Line: cc.Node,
        Win_Level_Label_Animation: cc.Animation,
        Win_Guanqia_Label: cc.Label,
        Extra_Skill_Script: Extra_Skill_Script,
        Area_Parent: cc.Node,
        Chat_Menu: Chat_Menu,
        Recovery_Particle_Prefab: cc.Prefab,
        Recovery_Number_Label: cc.Prefab,
        Recovery_Extra_Percentage: 0,
        Follow_Hero_Item: cc.Node,
        Enemy_Weak_Time: 5,
        Weak_Injured_Add: 50,
        Common_Attack_Addition: 0,
        Normal_Attack_Addition: 0,
        Skill_Attack_Addition: 0,
        Is_Surround_Common_Attack_Addition: 0,
        Skill_Crit_Rate_Addition: 0,
        Common_Crit_Rate_Addition: 0,
        Normal_Crit_Rate_Addition: 0,
        Skill_Crit_Mult_Addition: 0,
        Common_Crit_Mult_Addition: 0,
        Normal_Crit_Mult_Addition: 0,
        Skill_Bullet_Scale_Addition: 0,
        Common_Bullet_Scale_Addition: 0,
        Normal_Bullet_Scale_Addition: 0,
        Full_Hp_Addition: 0,
        Xuli_Speed_Addition: 0,
        Bullet_Hp_Addition: 0,
        Enchantment_Sacle_Addition: 0,
        Fu_Attack_Addition: 0,
        Pet_Attack_Addition: 0,
        Surround_Attack_Addition: 0,
        Crucial_Attack_Cult: 3,
        Surround_X: 0,
        Surround_Y: 0,
        Surround_Angle: 0,
        Hero_Shield_Parent: cc.Node,
        Boss_Hp_Line_Parent: Boss_Hp_Line_Parent,
        Boss_Hp_Line_Animation: cc.Animation,
        Boss_Hp_Line_White_Animation: cc.Animation,
        Boss_Hp_Number_Label: cc.Label,
        Boss_Picture_Parent: cc.Node,
        Boss_Picture: Boss_Picture,
        To_Next_Xiaoguanqia_Schedule: cc.Schedule,
        Bo_White: cc.Prefab,
        Skill_Follow_Particle: cc.Prefab,
        Skill_Follow_Smoke: cc.Prefab,
        Skill_Up_Fire: cc.Prefab,
        Enemy_Bullet_Destroy_Particle: cc.Prefab,
        Star_Sbsorption: cc.Prefab,
        Gold_Shoot_Fire: cc.Prefab,
        Air_Sbsorption: cc.Prefab,
        Red_Up_Particle: cc.Prefab,
        Up_Power_Particle: cc.Prefab,
        Surround_Thunder: cc.Prefab,
        Vertigo_Particle: cc.Prefab,
        Crucial_Effect_Prefab: cc.Prefab,
        Police_Key_People_Icon: cc.Prefab,
        Purple_Single_Particle: cc.Prefab,
        Purple_Smoke: cc.Prefab,
        Police_Wanted_Icon: cc.Prefab,
        Enemy_Born_Smoke_White_Coin: cc.Prefab,
        Lovelace_Skill_Menu: cc.Node,
        Lovelace_Skill_Menu_Animation: cc.Animation,
        Lovelace_Skill_Menu_Script: Lovelace_Skill_Menu,
        Is_Red_Hood: 0,
        Mozu_Blackhole: Mozu_Blackhole,
        Qitian_FS_Parent: cc.Node,
        Qitian_FS_Parent_Animation: cc.Animation,
        Qitian_FS_Animation: cc.Animation,
        Qitian_FS: Qitian_FS,
        Qitian_FS_Image: Qitian_FS_Image,
        Boss_Tetris_BUG_Progress_Line: cc.Node,
        Boss_Tetris_BUG_Progress: 0,
        Dead_Bullet_Parent: cc.Node,
        Fly_Item: cc.Node,
        Rain: cc.Node,
        Pause_Test_Label: cc.Label
      },
      onLoad: function onLoad() {
        cc.sp.autoSwitchMaterial = false;
      },
      start: function start() {
        this.Load_BG();
        this.Fly_Item.opacity = JSON.parse(cc.sys.localStorage.getItem("Fly_Item_Opacity"));
        this.Rain.opacity = JSON.parse(cc.sys.localStorage.getItem("Rain_Opacity"));
      },
      Load_BG: function Load_BG() {
        var _this = this;
        this.Which_BG = cc.sys.localStorage.getItem("Which_BG");
        null == this.Which_BG && (this.Which_BG = 0);
        cc.resources.load("Battle_BG/New_BG_" + this.Which_BG, cc.Prefab, function(err, Prefab) {
          var BG = cc.instantiate(Prefab);
          BG.parent = _this.BG_Parent;
          _this.Load_Front_BG();
        });
      },
      Load_Front_BG: function Load_Front_BG() {
        var _this2 = this;
        this.Load_Label.string = "\u6b63\u5728\u67e5\u627e\u6218\u573a...";
        cc.resources.load("Battle_BG/Front_BG/Front_BG_" + this.Which_BG, cc.Prefab, function(err, Prefab) {
          var Front_BG = cc.instantiate(Prefab);
          Front_BG.parent = _this2.BG_Parent;
          _this2.Load_Hero();
        });
      },
      Load_Hero: function Load_Hero() {
        var _this3 = this;
        this.Load_Label.string = "\u68c0\u67e5\u4f20\u9001\u88c5\u7f6e...";
        this.Selected_Hero = 1 * cc.sys.localStorage.getItem("Selected_Hero");
        var Hero_Prefab_Name = [ "SWAT", "Xiaoming", "Meixi", "Xiake", "Wukong", "Zhaoyun", "Luxue", "Yumo", "Zhiqing", "Lovelace", "Muguiying", "Police", "Red_Hood", "Mozu", "Qitian" ];
        cc.resources.load("Hero/" + Hero_Prefab_Name[this.Selected_Hero], cc.Prefab, function(err, Prefab) {
          _this3.Hero = cc.instantiate(Prefab);
          _this3.Hero.parent = _this3.Hero_Parent;
          _this3.Hero.setPosition(-600, 0);
          _this3.Hero_Script = _this3.Hero.getComponent(_this3.Hero.name);
          _this3.Load_Attack_And_Skill_Button();
        });
        cc.resources.load("Hero_Sprint_Ghost/" + Hero_Prefab_Name[this.Selected_Hero] + "_Sprint_Ghost", cc.Prefab, function(err, Prefab) {
          _this3.Hero_Sprint_Ghost_Prefab = Prefab;
        });
      },
      Load_Attack_And_Skill_Button: function Load_Attack_And_Skill_Button() {
        var _this4 = this;
        this.Load_Label.string = "\u82f1\u96c4\u8fdb\u5165\u4f20\u9001\u8231...";
        var Hero_Prefab_Name = [ "SWAT", "Xiaoming", "Meixi", "Xiake", "Wukong", "Zhaoyun", "Luxue", "Yumo", "Zhiqing", "Lovelace", "Muguiying", "Police", "Red_Hood", "Mozu", "Qitian" ];
        cc.resources.load("Attack_Button/" + Hero_Prefab_Name[this.Selected_Hero] + "_Attack_Button", cc.Prefab, function(err, Prefab) {
          var Attack_Button = cc.instantiate(Prefab);
          Attack_Button.parent = _this4.Attack_Button_Parent;
          Attack_Button.setPosition(0, 0);
        });
        cc.resources.load("Skill_Button/" + Hero_Prefab_Name[this.Selected_Hero] + "_Skill_Button", cc.Prefab, function(err, Prefab) {
          _this4.Skill_Button = cc.instantiate(Prefab);
          _this4.Skill_Button.parent = _this4.Skill_Button_Parent;
          _this4.Skill_Button.setPosition(0, 0);
          _this4.Load_Boss();
        });
      },
      Load_Boss: function Load_Boss() {
        var _this5 = this;
        this.Load_Label.string = "\u4f20\u9001\u8231\u5145\u80fd...";
        this.Will_Create_Boss = JSON.parse(cc.sys.localStorage.getItem("Now_Boss"));
        null == this.Will_Create_Boss && (this.Will_Create_Boss = 0);
        var Boss_Name = [ "Sword", "Tetris", "Water", "YHWD", "YKNG" ];
        cc.resources.load("Boss/Boss_" + Boss_Name[this.Will_Create_Boss], cc.Prefab, function(err, Prefab) {
          _this5.Will_Create_Boss_Prefab = Prefab;
          _this5.Load_Boss_Chat_Image();
        });
      },
      Load_Boss_Chat_Image: function Load_Boss_Chat_Image() {
        var _this6 = this;
        this.Load_Label.string = "\u5f00\u59cb\u4f20\u9001...";
        switch (this.Will_Create_Boss) {
         case 0:
          cc.resources.load("Boss_Chat/Lv_Chat_1", cc.SpriteFrame, function(err, spriteFrame) {
            _this6.Chat_Menu.Boss_Image.push(spriteFrame);
            cc.resources.load("Boss_Chat/Lv_Chat_2", cc.SpriteFrame, function(err, spriteFrame) {
              _this6.Chat_Menu.Boss_Image.push(spriteFrame);
              cc.resources.load("Boss_Chat/Lv_Chat_3", cc.SpriteFrame, function(err, spriteFrame) {
                _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                cc.resources.load("Boss_Chat/Lv_Chat_4", cc.SpriteFrame, function(err, spriteFrame) {
                  _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                  _this6.Load_Boss_Picture();
                });
              });
            });
          });
          break;

         case 1:
          cc.resources.load("Boss_Chat/GBA_Chat_1", cc.SpriteFrame, function(err, spriteFrame) {
            _this6.Chat_Menu.Boss_Image.push(spriteFrame);
            cc.resources.load("Boss_Chat/GBA_Chat_2", cc.SpriteFrame, function(err, spriteFrame) {
              _this6.Chat_Menu.Boss_Image.push(spriteFrame);
              cc.resources.load("Boss_Chat/GBA_Chat_3", cc.SpriteFrame, function(err, spriteFrame) {
                _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                cc.resources.load("Boss_Chat/GBA_Chat_4", cc.SpriteFrame, function(err, spriteFrame) {
                  _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                  cc.resources.load("Boss_Chat/GBA_Chat_5", cc.SpriteFrame, function(err, spriteFrame) {
                    _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                    cc.resources.load("Boss_Chat/GBA_Chat_6", cc.SpriteFrame, function(err, spriteFrame) {
                      _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                      cc.resources.load("Boss_Chat/GBA_Chat_7", cc.SpriteFrame, function(err, spriteFrame) {
                        _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                        cc.resources.load("Boss_Chat/GBA_Chat_8", cc.SpriteFrame, function(err, spriteFrame) {
                          _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                          cc.resources.load("Boss_Chat/GBA_Chat_9", cc.SpriteFrame, function(err, spriteFrame) {
                            _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                            _this6.Load_Boss_Picture();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
          break;

         case 2:
          cc.resources.load("Boss_Chat/WaterFire_Chat_1", cc.SpriteFrame, function(err, spriteFrame) {
            _this6.Chat_Menu.Boss_Image.push(spriteFrame);
            cc.resources.load("Boss_Chat/WaterFire_Chat_2", cc.SpriteFrame, function(err, spriteFrame) {
              _this6.Chat_Menu.Boss_Image.push(spriteFrame);
              cc.resources.load("Boss_Chat/WaterFire_Chat_3", cc.SpriteFrame, function(err, spriteFrame) {
                _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                cc.resources.load("Boss_Chat/WaterFire_Chat_4", cc.SpriteFrame, function(err, spriteFrame) {
                  _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                  cc.resources.load("Boss_Chat/WaterFire_Chat_5", cc.SpriteFrame, function(err, spriteFrame) {
                    _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                    cc.resources.load("Boss_Chat/WaterFire_Chat_6", cc.SpriteFrame, function(err, spriteFrame) {
                      _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                      cc.resources.load("Boss_Chat/WaterFire_Chat_7", cc.SpriteFrame, function(err, spriteFrame) {
                        _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                        cc.resources.load("Boss_Chat/WaterFire_Chat_8", cc.SpriteFrame, function(err, spriteFrame) {
                          _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                          cc.resources.load("Boss_Chat/WaterFire_Chat_9", cc.SpriteFrame, function(err, spriteFrame) {
                            _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                            cc.resources.load("Boss_Chat/WaterFire_Chat_9_5", cc.SpriteFrame, function(err, spriteFrame) {
                              _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                              cc.resources.load("Boss_Chat/WaterFire_Chat_10", cc.SpriteFrame, function(err, spriteFrame) {
                                _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                                cc.resources.load("Boss_Chat/WaterFire_Chat_11", cc.SpriteFrame, function(err, spriteFrame) {
                                  _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                                  cc.resources.load("Boss_Chat/WaterFire_Chat_12", cc.SpriteFrame, function(err, spriteFrame) {
                                    _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                                    cc.resources.load("Boss_Chat/WaterFire_Chat_13", cc.SpriteFrame, function(err, spriteFrame) {
                                      _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                                      cc.resources.load("Boss_Chat/WaterFire_Chat_14", cc.SpriteFrame, function(err, spriteFrame) {
                                        _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                                        cc.resources.load("Boss_Chat/WaterFire_Chat_15", cc.SpriteFrame, function(err, spriteFrame) {
                                          _this6.Chat_Menu.Boss_Image.push(spriteFrame);
                                          _this6.Load_Boss_Picture();
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        }
      },
      Load_Boss_Picture: function Load_Boss_Picture() {
        var _this7 = this;
        this.Load_Label.string = "\u5df2\u5230\u8fbe\u6218\u573a\uff0c\u8bf7\u505a\u597d\u51c6\u5907\uff01";
        switch (this.Will_Create_Boss) {
         case 0:
          cc.resources.load("Boss_Picture/Lv_Picture_1", cc.Prefab, function(err, Prefab) {
            _this7.Boss_Picture.Lv_Picture.push(Prefab);
            cc.resources.load("Boss_Picture/Lv_Picture_2", cc.Prefab, function(err, Prefab) {
              _this7.Boss_Picture.Lv_Picture.push(Prefab);
              cc.resources.load("Boss_Picture/Lv_Picture_3", cc.Prefab, function(err, Prefab) {
                _this7.Boss_Picture.Lv_Picture.push(Prefab);
                cc.resources.load("Boss_Picture/Lv_Picture_4", cc.Prefab, function(err, Prefab) {
                  _this7.Boss_Picture.Lv_Picture.push(Prefab);
                  _this7.Start_Set();
                });
              });
            });
          });
          break;

         case 1:
          cc.resources.load("Boss_Picture/GBA_Picture_1", cc.Prefab, function(err, Prefab) {
            _this7.Boss_Picture.GBA_Picture.push(Prefab);
            cc.resources.load("Boss_Picture/GBA_Picture_2", cc.Prefab, function(err, Prefab) {
              _this7.Boss_Picture.GBA_Picture.push(Prefab);
              cc.resources.load("Boss_Picture/GBA_Picture_3", cc.Prefab, function(err, Prefab) {
                _this7.Boss_Picture.GBA_Picture.push(Prefab);
                _this7.Start_Set();
              });
            });
          });
        }
      },
      Start_Set: function Start_Set() {
        var _this8 = this;
        cc.tween(this.Load_Menu).to(.3, {
          opacity: 0
        }).call(function() {
          _this8.Load_Menu.active = false;
        }).start();
        cc.game.setFrameRate(59);
        this.First_Play_Save_Data_Set();
        this.Normal_Initial_Data.Start_Set();
        this.Enemy_Create.Start_Set();
        this.Set_Hero_Data();
        this.JoyStick.Start_Set();
        this.JoyStick.Battle_Controller = this;
        this.Hero_Script.Start_Set();
        this.Sprint.Start_Set();
        this.Rogue_Script.Start_Set();
        this.Pause_Button_Set();
        this.Music_Voice_Set();
        this.Lovelace_Skill_Menu_Script.Battle_Controller = this;
        this.Battle_Audio_Controller.Battle_Controller = this;
        this.Battle_Audio_Controller.Start_Set();
        this.God_Menu.Battle_Controller = this;
        this.Extra_Skill_Script.Battle_Controller = this;
        this.Boss_Hp_Line_Parent.Battle_Controller = this;
        this.Boss_Picture.Battle_Controller = this;
        this.Mozu_Blackhole.Battle_Controller = this;
        this.Mozu_Blackhole.Start_Set();
        this.Set_Boci_Tips_Label();
        cc.tween(this.All_Black).to(2, {
          opacity: 0
        }).call(function() {
          cc.tween(_this8.Boci_Tips).to(2, {
            opacity: 0
          }).call(function() {
            _this8.Enemy_Create.Enemy_Create();
          }).start();
        }).start();
        this.Chat_Menu.Battle_Controller = this;
        this.To_Next_Xiaoguanqia_Schedule = function() {
          if (this.Wait_Rogue > 0) {
            if (1 == this.Can_Create_Rogue) {
              this.Can_Create_Rogue = 0;
              this.JoyStick.Joytick_Back();
              1 == this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Is_Attacking && this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Back_To_Stay();
              this.Battle_Hide();
              this.Rogue_Script.node.active = true;
              this.Rogue_Script.Start_Rogue();
            }
          } else this.To_Next_Xiaoguanqia();
        };
      },
      Music_Voice_Set: function Music_Voice_Set() {
        var Music_Is_Open = cc.sys.localStorage.getItem("Music_Is_Open");
        var Voice_Is_Open = cc.sys.localStorage.getItem("Voice_Is_Open");
        null != Music_Is_Open && (this.Music_Is_Open = Music_Is_Open);
        null != Voice_Is_Open && (this.Voice_Is_Open = Voice_Is_Open);
        1 == this.Music_Is_Open ? this.Setting_Menu_Music_Button.opacity = 255 : this.Setting_Menu_Music_Button.opacity = 100;
        1 == this.Voice_Is_Open ? this.Setting_Menu_Voice_Button.opacity = 255 : this.Setting_Menu_Voice_Button.opacity = 100;
      },
      First_Play_Save_Data_Set: function First_Play_Save_Data_Set() {
        var Selected_Hero = cc.sys.localStorage.getItem("Selected_Hero");
        if (null == Selected_Hero) {
          cc.sys.localStorage.setItem("Selected_Hero", 0);
          cc.sys.localStorage.setItem("Team_Level", 1);
        }
      },
      Set_Hero_Data: function Set_Hero_Data() {
        this.Team_Level = 1 * cc.sys.localStorage.getItem("Team_Level");
        this.Hero_Star = JSON.parse(cc.sys.localStorage.getItem("Hero_Star"));
        this.Full_Hp = Math.ceil(this.Hero_Initial_Data.HP[this.Selected_Hero] * (100 + this.Normal_Initial_Data.Team_Level_Up_Hp_Up * (this.Team_Level - 1)) / 100);
        this.Ini_Hp = this.Full_Hp;
        this.Hp = this.Full_Hp;
        this.Attack = Math.ceil(this.Hero_Initial_Data.Attack[this.Selected_Hero] * (100 + this.Normal_Initial_Data.Team_Level_Up_Attack_Up * (this.Team_Level - 1)) / 100);
        this.Crit_Rate = this.Hero_Initial_Data.Crit_Rate[this.Selected_Hero];
        this.Crit_Mult = this.Hero_Initial_Data.Crit_Mult[this.Selected_Hero];
        this.Jing_Jie = this.Team_Level;
        this.Defend = this.Team_Level;
        this.Skill_Cold_Time = this.Hero_Initial_Data.Skill_Cold_Time[this.Selected_Hero];
      },
      Rogue_Energy_Up: function Rogue_Energy_Up() {
        this.Now_Rogue_Energy += this.Every_Rogue_Energy_Up;
        cc.tween(this.Rogue_Energy_Line).to(.2, {
          scaleX: this.Now_Rogue_Energy / this.Normal_Initial_Data.Initial_Rogue_Level_Up_Need
        }).start();
        if (this.Now_Rogue_Energy >= this.Normal_Initial_Data.Initial_Rogue_Level_Up_Need) {
          this.Now_Rogue_Energy = 0;
          this.Normal_Initial_Data.Initial_Rogue_Level_Up_Need += this.Normal_Initial_Data.Every_Rogue_Level_Up_Need_Up;
          this.Wait_Rogue++;
          this.Rogue_Level++;
          this.Rogue_Energy_Linde_To_Zero();
        }
      },
      Rogue_Energy_Linde_To_Zero: function Rogue_Energy_Linde_To_Zero() {
        cc.tween(this.Rogue_Energy_Line).to(.2, {
          scaleX: 0
        }).start();
      },
      Camera_Shake_Big: function Camera_Shake_Big() {
        this.Camera_Shake_Big_Animation.play();
      },
      Camera_Shake_Medium: function Camera_Shake_Medium() {
        this.Camera_Shake_Medium_Animation.play();
      },
      Camera_Shake_Small: function Camera_Shake_Small() {
        this.Camera_Shake_Small_Animation.play();
      },
      Camera_Shake_Shoot: function Camera_Shake_Shoot() {
        this.Camera_Shake_Shoot_Animation.play();
      },
      Probability_Result_Create: function Probability_Result_Create() {
        this.Probability_Result = Math.floor(100 * Math.random()) * this.Probability_Result_Mult + this.Probability_Result_Addition;
      },
      Battle_Hide: function Battle_Hide() {
        this.Hero_Parent.active = false;
        this.Wukong_FS_Father.active = false;
        this.Hero_Bullet_Parent.active = false;
        this.Particle_Parent.active = false;
        this.Enemy_Parent.active = false;
        this.Wall_Parent.active = false;
        this.Thunder_Red_Parent.active = false;
        this.Enemy_Bullet_Parent.active = false;
        this.UI_Parent.active = false;
        this.Area_Parent.active = false;
        this.Follow_Hero_Item.active = false;
        this.Enchantment_Parent.active = false;
        this.Schedule_Extra_Check.node.parent.active = false;
        this.Hero_Skill_Picture_Parent.active = false;
        this.Hero_Shield_Parent.active = false;
        this.Pet_Parent.active = false;
        this.Particle_Parent_Back.active = false;
        this.Fu_Parent.active = false;
      },
      Battle_Show: function Battle_Show() {
        this.Hero_Parent.active = true;
        this.Wukong_FS_Father.active = true;
        this.Hero_Bullet_Parent.active = true;
        this.Particle_Parent.active = true;
        this.Enemy_Parent.active = true;
        this.Wall_Parent.active = true;
        this.Thunder_Red_Parent.active = true;
        this.Enemy_Bullet_Parent.active = true;
        this.UI_Parent.active = true;
        this.Area_Parent.active = true;
        this.Follow_Hero_Item.active = true;
        this.Enchantment_Parent.active = true;
        this.Schedule_Extra_Check.node.parent.active = true;
        this.Hero_Skill_Picture_Parent.active = true;
        this.Hero_Shield_Parent.active = true;
        this.Pet_Parent.active = true;
        this.Particle_Parent_Back.active = true;
        this.Fu_Parent.active = true;
      },
      Dead_Menu_Spoil_Show: function Dead_Menu_Spoil_Show() {
        var _this9 = this;
        var Coin_Number_Show = 0;
        cc.tween(this.node).delay(.5).repeat(this.Coin, cc.tween().call(function() {
          Coin_Number_Show++;
          _this9.Dead_Coin_Label.string = "\u91d1\u5e01   +" + Coin_Number_Show;
        }).delay(1 / this.Coin)).start();
        var Need_Add_Exp = this.Exp;
        var Now_Team_Level = JSON.parse(cc.sys.localStorage.getItem("Team_Level"));
        null == Now_Team_Level && (Now_Team_Level = 1);
        var Now_Team_Exp = JSON.parse(cc.sys.localStorage.getItem("Team_Exp"));
        null == Now_Team_Exp && (Now_Team_Exp = 0);
        this.Win_Level_Label.string = "\u7b49\u7ea7" + Now_Team_Level;
        this.Dead_Exp_Line.scaleX = Now_Team_Exp / 1e4;
        cc.tween(this.node).delay(.5).repeat(Need_Add_Exp, cc.tween().call(function() {
          Now_Team_Exp++;
          if (Now_Team_Exp >= 1e4) {
            Now_Team_Exp = 0;
            Now_Team_Level++;
            _this9.Dead_Level_Label.string = "\u7b49\u7ea7" + Now_Team_Level;
            _this9.Dead_Level_Label_Animation.play();
          }
          _this9.Dead_Exp_Line.scaleX = Now_Team_Exp / 1e4;
        }).delay(1 / Need_Add_Exp)).start();
        var Last_Coin = JSON.parse(cc.sys.localStorage.getItem("Coin"));
        null == Last_Coin && (Last_Coin = 0);
        Last_Coin += Need_Add_Exp;
        cc.sys.localStorage.setItem("Team_Level", JSON.stringify(Now_Team_Level));
        cc.sys.localStorage.setItem("Team_Exp", JSON.stringify(Now_Team_Exp));
        cc.sys.localStorage.setItem("Coin", JSON.stringify(Last_Coin));
      },
      Pause_Button_Set: function Pause_Button_Set() {
        this.Pause_Menu_Script.Battle_Controller = this;
        this.Pause_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          this.Pause_Menu_Animation.node.active = true;
          this.Pause_Menu_Script.Initialization();
          this.Pause_Menu_Animation.play("Pause_Menu_In");
          this.JoyStick.Joytick_Back();
          1 == this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Is_Attacking && this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Back_To_Stay();
          this.Battle_Hide();
          this.Pause_Test_Label.string = "\u6211\u65b9\u5b50\u5f39\uff1a" + this.Hero_Bullet_Parent.children.length + "\n\u654c\u65b9\u5b50\u5f39\uff1a" + this.Enemy_Bullet_Parent.children.length + "\n\u7c92\u5b50\uff1a" + this.Particle_Parent.children.length;
          console.log(this.Particle_Parent.children);
        }, this);
      },
      Enemy_Dead_Check: function Enemy_Dead_Check() {
        var _this10 = this;
        if (10 == this.Now_Xiaoguanqia) {
          if (1 == this.Boss_Is_Alive) {
            if (2 == this.Enemy_Parent.children.length && this.Now_Boci < this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1]) {
              this.Now_Boci++;
              this.Now_Zongboci++;
              this.Set_Boci_Tips_Label();
              cc.tween(this.Boci_Tips).to(.5, {
                opacity: 255
              }).delay(1).to(1, {
                opacity: 0
              }).call(function() {
                _this10.Enemy_Create.Enemy_Create();
              }).start();
            }
          } else if (1 == this.Enemy_Parent.children.length) if (this.Now_Boci < this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1]) {
            this.Now_Boci++;
            this.Now_Zongboci++;
            this.Set_Boci_Tips_Label();
            cc.tween(this.Boci_Tips).to(.5, {
              opacity: 255
            }).delay(1).to(1, {
              opacity: 0
            }).call(function() {
              _this10.Enemy_Create.Enemy_Create();
            }).start();
          } else this.Win();
        } else if (1 == this.Enemy_Parent.children.length) if (this.Now_Boci < this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1]) {
          this.Now_Boci++;
          this.Now_Zongboci++;
          this.Set_Boci_Tips_Label();
          cc.tween(this.Boci_Tips).to(.5, {
            opacity: 255
          }).delay(1).to(1, {
            opacity: 0
          }).call(function() {
            _this10.Enemy_Create.Enemy_Create();
          }).start();
        } else if (this.Now_Xiaoguanqia < this.Normal_Initial_Data.One_Guanqia_Have_Xiaoguangqia) {
          for (var i = 0; i < this.Xiaoguanqia_End_Extra_Check.Xiaoguanqia_End_Extra_Check_Script.length; i++) this.Xiaoguanqia_End_Extra_Check.Xiaoguanqia_End_Extra_Check_Script[i].Check();
          this.unschedule(this.To_Next_Xiaoguanqia_Schedule);
          this.scheduleOnce(this.To_Next_Xiaoguanqia_Schedule, 3);
        }
      },
      To_Next_Xiaoguanqia: function To_Next_Xiaoguanqia() {
        this.Now_Xiaoguanqia++;
        this.Now_Zongboci++;
        this.Now_Boci = 1;
        this.JoyStick.Joytick_Back();
        1 == this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Is_Attacking && this.Hero_Parent.children[0].getComponent(this.Hero_Parent.children[0].name).Back_To_Stay();
        this.Battle_Hide();
        this.God_Menu.node.active = true;
        this.God_Menu_Animation.play("God_Menu_In");
        this.God_Menu.Set();
      },
      New_Xiaoguanqia_Boci_Tips: function New_Xiaoguanqia_Boci_Tips() {
        var _this11 = this;
        cc.tween(this.Boci_Tips).to(.5, {
          opacity: 255
        }).delay(1).to(1, {
          opacity: 0
        }).call(function() {
          22 != _this11.Now_Zongboci ? 3 == _this11.Now_Zongboci ? _this11.Enemy_Create.Angle_Enemy_Create(0) : _this11.Enemy_Create.Enemy_Create() : _this11.Boss_Tips_Animation.play("Boss_Tips");
        }).start();
      },
      Set_Boci_Tips_Label: function Set_Boci_Tips_Label() {
        this.Normal_Initial_Data.Now_Guanqia < 9 ? this.Boci_Tips_Label.string = this.Normal_Initial_Data.Guanqia_Name[this.Normal_Initial_Data.Now_Guanqia - 1] + " - " + this.Normal_Initial_Data.Xiaoguanqia_Name[this.Now_Xiaoguanqia - 1] + "\n\u7b2c" + this.Now_Boci + "\u6ce2\u654c\u4eba/\u5171" + this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1] + "\u6ce2" : this.Boci_Tips_Label.string = this.Normal_Initial_Data.Guanqia_Name[8] + (this.Normal_Initial_Data.Now_Guanqia - 8) + " - " + this.Normal_Initial_Data.Xiaoguanqia_Name[this.Now_Xiaoguanqia - 1] + "\n\u7b2c" + this.Now_Boci + "\u6ce2\u654c\u4eba/\u5171" + this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1] + "\u6ce2";
        this.Boci_Plate_Label.string = "\u7b2c" + this.Now_Boci + "\u6ce2\u654c\u4eba/\u5171" + this.Normal_Initial_Data.Every_Xiaoguangqia_Have_Boci[this.Now_Xiaoguanqia - 1] + "\u6ce2";
      },
      Win: function Win() {
        var _this12 = this;
        this.Battle_Hide();
        this.Win_Menu_Animation.node.active = true;
        this.Win_Menu_Animation.play("Show_Dead_Menu");
        var Coin_Number_Show = 0;
        cc.tween(this.node).delay(.5).repeat(this.Coin, cc.tween().call(function() {
          Coin_Number_Show++;
          _this12.Win_Coin_Number_Label.string = "\u91d1\u5e01   +" + Coin_Number_Show;
        }).delay(1 / this.Coin)).start();
        var Need_Add_Exp = this.Exp;
        var Now_Team_Level = JSON.parse(cc.sys.localStorage.getItem("Team_Level"));
        null == Now_Team_Level && (Now_Team_Level = 1);
        var Now_Team_Exp = JSON.parse(cc.sys.localStorage.getItem("Team_Exp"));
        null == Now_Team_Exp && (Now_Team_Exp = 0);
        this.Win_Level_Label.string = "\u7b49\u7ea7" + Now_Team_Level;
        this.Win_Exp_Line.scaleX = Now_Team_Exp / 1e4;
        cc.tween(this.node).delay(.5).repeat(Need_Add_Exp, cc.tween().call(function() {
          Now_Team_Exp++;
          if (Now_Team_Exp >= 1e4) {
            Now_Team_Exp = 0;
            Now_Team_Level++;
            _this12.Win_Level_Label.string = "\u7b49\u7ea7" + Now_Team_Level;
            _this12.Win_Level_Label_Animation.play();
          }
          _this12.Win_Exp_Line.scaleX = Now_Team_Exp / 1e4;
        }).delay(1 / Need_Add_Exp)).start();
        if (this.Normal_Initial_Data.Now_Guanqia < 9) var Now_Guanqia_Label = this.Normal_Initial_Data.Guanqia_Name[this.Normal_Initial_Data.Now_Guanqia - 1]; else var Now_Guanqia_Label = this.Normal_Initial_Data.Guanqia_Name[8] + (this.Normal_Initial_Data.Now_Guanqia - 8);
        var Next_Guanqia = this.Normal_Initial_Data.Now_Guanqia + 1;
        if (Next_Guanqia < 9) var Next_Guanqia_Label = this.Normal_Initial_Data.Guanqia_Name[this.Normal_Initial_Data.Now_Guanqia]; else var Next_Guanqia_Label = this.Normal_Initial_Data.Guanqia_Name[8] + (this.Normal_Initial_Data.Now_Guanqia - 7);
        this.Win_Guanqia_Label.string = "\u8bd5\u70bc\u7b49\u7ea7   " + Now_Guanqia_Label + "   =>   " + Next_Guanqia_Label;
        var Last_Coin = JSON.parse(cc.sys.localStorage.getItem("Coin"));
        null == Last_Coin && (Last_Coin = 0);
        Last_Coin += Need_Add_Exp;
        cc.sys.localStorage.setItem("Team_Level", JSON.stringify(Now_Team_Level));
        cc.sys.localStorage.setItem("Team_Exp", JSON.stringify(Now_Team_Exp));
        cc.sys.localStorage.setItem("Coin", JSON.stringify(Last_Coin));
        cc.sys.localStorage.setItem("Now_Guanqia", JSON.stringify(Next_Guanqia));
      },
      Common_Attack_Addition_Add: function Common_Attack_Addition_Add(Number) {
        this.Common_Attack_Addition = this.Common_Attack_Addition + Number;
      },
      Common_Attack_Addition_Reduce: function Common_Attack_Addition_Reduce(Number) {
        this.Common_Attack_Addition = this.Common_Attack_Addition - Number;
      },
      Normal_Attack_Addition_Add: function Normal_Attack_Addition_Add(Number) {
        this.Normal_Attack_Addition = this.Normal_Attack_Addition + Number;
      },
      Normal_Attack_Addition_Reduce: function Normal_Attack_Addition_Reduce(Number) {
        this.Normal_Attack_Addition = this.Normal_Attack_Addition - Number;
      },
      Full_Hp_Addition_Add: function Full_Hp_Addition_Add(Number) {
        var Now_Hp_Proportion = this.Hp / this.Full_Hp;
        this.Full_Hp_Addition += Number;
        this.Full_Hp = Math.ceil(this.Ini_Hp * (100 + this.Full_Hp_Addition) / 100);
        this.Hp = Math.ceil(this.Full_Hp * Now_Hp_Proportion);
      },
      Common_Bullet_Scale_Addition_Add: function Common_Bullet_Scale_Addition_Add(Number) {
        this.Common_Bullet_Scale_Addition += Number;
      },
      Common_Bullet_Scale_Addition_Reduce: function Common_Bullet_Scale_Addition_Reduce(Number) {
        this.Common_Bullet_Scale_Addition -= Number;
      },
      Normal_Crit_Rate_Addition_Add: function Normal_Crit_Rate_Addition_Add(Number) {
        this.Normal_Crit_Rate_Addition += Number;
      },
      Normal_Crit_Rate_Addition_Deduce: function Normal_Crit_Rate_Addition_Deduce(Number) {
        this.Normal_Crit_Rate_Addition -= Number;
      },
      Skill_Attack_Addition_Add: function Skill_Attack_Addition_Add(Number) {
        this.Skill_Attack_Addition += Number;
      },
      Skill_Attack_Addition_Reduce: function Skill_Attack_Addition_Reduce(Number) {
        this.Skill_Attack_Addition -= Number;
      },
      Hp_Change_To: function Hp_Change_To(Number) {
        this.Hp = Math.ceil(this.Full_Hp * Number / 100);
        this.Hero_Script.Hero_Common.Hp_Line.scaleX = this.Hp / this.Full_Hp;
        for (var i = 0; i < this.Hp_Change_Extra_Check.Hp_Change_Extra_Check_Script.length; i++) this.Hp_Change_Extra_Check.Hp_Change_Extra_Check_Script[i].Check();
      },
      Hp_Change_By: function Hp_Change_By(Number) {
        this.Hp = Math.ceil(this.Hp + this.Hp * Number / 100);
        this.Hero_Script.Hero_Common.Hp_Line.scaleX = this.Hp / this.Full_Hp;
        for (var i = 0; i < this.Hp_Change_Extra_Check.Hp_Change_Extra_Check_Script.length; i++) this.Hp_Change_Extra_Check.Hp_Change_Extra_Check_Script[i].Check();
      },
      Buff_Icon_Sort: function Buff_Icon_Sort() {
        if (null != this.Hero_Script.Hero_Common.Buff_Icon_Parent && this.Hero_Script.Hero_Common.Buff_Icon_Parent.children.length > 0) for (var i = 0; i < this.Hero_Script.Hero_Common.Buff_Icon_Parent.children.length; i++) this.Hero_Script.Hero_Common.Buff_Icon_Parent.children[i].x = -200 * i;
      },
      Left_Up_Buff_Icon_Sort: function Left_Up_Buff_Icon_Sort() {
        if (this.Buff_Icon_Parent.children.length > 0) for (var i = 0; i < this.Buff_Icon_Parent.children.length; i++) if (null != this.Buff_Icon_Parent.children[i]) {
          this.Buff_Icon_Parent.children[i].x = i % 4 * 200 - 1400;
          this.Buff_Icon_Parent.children[i].y = 200 * -Math.floor(i / 4) + 550;
        }
      },
      Set_Surround_Position: function Set_Surround_Position() {
        var Yushu = this.Hero_Script.Hero_Common.Surround_Parent.children.length % 8;
        var Quanshu = Math.ceil(this.Hero_Script.Hero_Common.Surround_Parent.children.length / 8);
        var distance = 250 * Quanshu;
        switch (Yushu) {
         case 1:
          this.Surround_Angle = 0;
          break;

         case 2:
          this.Surround_Angle = 180;
          break;

         case 3:
          this.Surround_Angle = 90;
          break;

         case 4:
          this.Surround_Angle = 270;
          break;

         case 5:
          this.Surround_Angle = 45;
          break;

         case 6:
          this.Surround_Angle = 225;
          break;

         case 7:
          this.Surround_Angle = 135;
          break;

         case 0:
          this.Surround_Angle = 315;
        }
        this.Surround_X = distance * Math.cos(this.Surround_Angle * Math.PI / 180);
        this.Surround_Y = distance * Math.sin(this.Surround_Angle * Math.PI / 180);
      },
      Stop_Enemy_Move: function Stop_Enemy_Move() {
        if (null != this.Enemy_Parent.children) for (var i = 0; i < this.Enemy_Parent.children.length; i++) this.Enemy_Parent.children[i].getComponent("Enemy_Common").Stop();
      },
      Restore_Enemy_Move: function Restore_Enemy_Move() {
        if (null != this.Enemy_Parent.children) for (var i = 0; i < this.Enemy_Parent.children.length; i++) {
          var Enemy_Common = this.Enemy_Parent.children[i].getComponent("Enemy_Common");
          0 == Enemy_Common.Is_Special ? Enemy_Common.Move() : Enemy_Common.Special_Move();
        }
      },
      Stop_Enemy_Bullet: function Stop_Enemy_Bullet() {
        this.Enemy_Bullet_Speed_Ratio = .1 * this.Enemy_Bullet_Speed_Ratio;
        if (null != this.Enemy_Bullet_Parent.children) for (var i = 0; i < this.Enemy_Bullet_Parent.children.length; i++) this.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common").Set_Speed();
      },
      Restore_Enemy_Bullet: function Restore_Enemy_Bullet() {
        this.Enemy_Bullet_Speed_Ratio = 10 * this.Enemy_Bullet_Speed_Ratio;
        if (null != this.Enemy_Bullet_Parent.children) for (var i = 0; i < this.Enemy_Bullet_Parent.children.length; i++) this.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common").Set_Speed();
      },
      Boss_Battle_Start: function Boss_Battle_Start() {
        var _this13 = this;
        this.Boss_Picture.Create_Picture();
        cc.tween(this.node).delay(1.5).call(function() {
          cc.tween(_this13.Rogue_Energy_Line.parent).to(.5, {
            opacity: 0
          }).start();
          _this13.UI_Parent.active = true;
          _this13.Boss_Hp_Line_Parent.node.active = true;
          _this13.Boss_Hp_Line_Parent.In();
          var Enemy_Common = _this13.Enemy_Parent.children[0].getComponent("Enemy_Common");
          Enemy_Common.Can_Injured = 1;
          Enemy_Common.Can_Move = 1;
          Enemy_Common.Enemy_Script.Think();
        }).start();
      },
      Continue_Boss_Battle: function Continue_Boss_Battle() {
        this.UI_Parent.active = true;
        this.Boss_Hp_Line_Parent.node.active = true;
        this.Boss_Hp_Line_Parent.In();
        var Enemy_Common = this.Enemy_Parent.children[0].getComponent("Enemy_Common");
        Enemy_Common.Noarmal_Change_Stage();
      },
      Destroy_Enemy_Bullet: function Destroy_Enemy_Bullet() {
        var Bullet_Arrary = [];
        for (var i = 0; i < this.Enemy_Bullet_Parent.children.length; i++) Bullet_Arrary.push(this.Enemy_Bullet_Parent.children[i]);
        for (var i = 0; i < Bullet_Arrary.length; i++) Bullet_Arrary[i].getComponent("Enemy_Bullet_Common").Must_Destroy();
      }
    });
    cc._RF.pop();
  }, {
    Battle_Audio_Controller: "Battle_Audio_Controller",
    Boss_Hp_Line_Parent: "Boss_Hp_Line_Parent",
    Boss_Picture: "Boss_Picture",
    Bullet_Hit_Extra_Check: "Bullet_Hit_Extra_Check",
    Camera_Follow: "Camera_Follow",
    Chat_Menu: "Chat_Menu",
    Enemy_Create: "Enemy_Create",
    Extra_Skill_Script: "Extra_Skill_Script",
    God_Information: "God_Information",
    God_Menu: "God_Menu",
    Hero_Be_Hit_Extra_Check: "Hero_Be_Hit_Extra_Check",
    Hero_Initial_Data: "Hero_Initial_Data",
    Hp_Change_Extra_Check: "Hp_Change_Extra_Check",
    JoyStick: "JoyStick",
    Lovelace_Skill_Menu: "Lovelace_Skill_Menu",
    Mozu_Blackhole: "Mozu_Blackhole",
    Next_Xiaoguanqia_Extra_Check: "Next_Xiaoguanqia_Extra_Check",
    Normal_Attack_After_Extra_Check: "Normal_Attack_After_Extra_Check",
    Normal_Attack_Extra_Check: "Normal_Attack_Extra_Check",
    Normal_Initial_Data: "Normal_Initial_Data",
    Pause_Menu: "Pause_Menu",
    Pet_Be_Hit_Extra_Check: "Pet_Be_Hit_Extra_Check",
    Pet_Born_Extra_Check: "Pet_Born_Extra_Check",
    Pet_Dead_Extra_Check: "Pet_Dead_Extra_Check",
    Qitian_FS: "Qitian_FS",
    Qitian_FS_Image: "Qitian_FS_Image",
    Recovery_Extra_Check: "Recovery_Extra_Check",
    Rogue: "Rogue",
    Schedule_Extra_Check: "Schedule_Extra_Check",
    Sprint: "Sprint",
    Sprint_Extra_Check: "Sprint_Extra_Check",
    Start_Move_Extra_Check: "Start_Move_Extra_Check",
    Stop_Attack_Extra_Check: "Stop_Attack_Extra_Check",
    Stop_Move_Extra_Check: "Stop_Move_Extra_Check",
    Xiaoguanqia_End_Extra_Check: "Xiaoguanqia_End_Extra_Check"
  } ],
  Boss_Absorb_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "148feEAcctAKJonzWFA5pW5", "Boss_Absorb_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Target: cc.Node,
        Target_Shifting_X: 0,
        Target_Shifting_Y: 0
      },
      Start_Set: function Start_Set() {
        this.node.scaleX = 5 * Math.random() + 3;
        this.node.scaleY = this.node.scaleX;
        this.node.angle = 360 * Math.random();
        if (null != this.Target) {
          var Action = cc.sequence(cc.spawn(cc.moveTo(1, this.Target.x + this.Target_Shifting_X, this.Target.y + this.Target_Shifting_Y), cc.scaleTo(1, 0, 0), cc.fadeTo(1, 50), cc.rotateBy(1, 255)), cc.callFunc(function() {
            this.node.destroy();
          }, this));
          this.node.runAction(Action);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Boss_Fire_First_Heart_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02dfe24sfxMTr7ocENNLMT9", "Boss_Fire_First_Heart_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Target_X: [ cc.Float ],
        Target_Y: [ cc.Float ],
        Number: 0,
        Now_Speed: 0,
        a: 0
      },
      Start_Set: function Start_Set() {
        this.Target_X = [ -10.33, -21.383, -38.378, -60.024, -86.636, -112.868, -135.896, -154.491, -167.343, -174.419, -174.419, -170.402, -157.266, -139.002, -118.641, -96.665, -74.497, -53.937, -34.918, -16.534, -6.834, 0 ];
        this.Target_Y = [ 71.773, 95.037, 114.245, 128.788, 136.129, 133.376, 120.217, 102.299, 79.639, 54.638, 28.221, 1.835, -21.297, -40.237, -56.582, -69.818, -83.536, -99.254, -116.164, -134.628, -158.877, -183.61 ];
        var t = cc.tween;
        t(this.node).parallel(t().to(4, {
          x: 1.2 * this.Target_X[21 - this.Number] - 20
        }), t().to(4, {
          y: 1.2 * this.Target_Y[21 - this.Number] - 20
        }, {
          easing: "quadInOut"
        })).start();
      },
      Shoot: function Shoot() {
        var _this = this;
        this.Enemy_Bullet_Common.Can_Destroy = 1;
        if (null != this.Enemy_Bullet_Common.Battle_Controller.Hero) {
          this.Target = this.Enemy_Bullet_Common.Battle_Controller.Hero;
          var dir = cc.v2(this.node.x, this.node.y);
          var radian = Math.atan2(dir.y, dir.x);
          cc.tween(this.node).to(.3, {
            angle: radian / Math.PI * 180
          }, {
            easing: "backInOut"
          }).call(function() {
            _this.Set_Speed();
          }).start();
        } else this.Enemy_Bullet_Common.RigidBody.linearVelocity = cc.v2(-500, 0);
      },
      Set_Speed: function Set_Speed() {
        this.a = 30;
        this.schedule(function() {
          this.Now_Speed += this.a;
          this.a -= 5;
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Fire_Stage_2_Bullet_1: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b038a50cbhDxrQ36vsKq2Gj", "Boss_Fire_Stage_2_Bullet_1");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Now_Speed: 0,
        Angular_Speed: 0,
        Target: cc.Node
      },
      Start_Set: function Start_Set() {
        this.node.scale = 1 * Math.random() + .25;
        this.Now_Speed = 800 * Math.random() + 400;
        this.Angular_Speed = .4 * Math.random() + .1;
        this.schedule(function() {
          if (null == this.Target || "" == this.Target.name) {
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Set_Speed();
            cc.tween(this.node).delay(1e-5).to(Math.abs(0 - this.node.angle) / this.Angular_Speed, {
              angle: 0
            }, {
              easing: "quadOut"
            }).start();
          } else {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
            this.Target.y < this.node.y ? this.node.angle -= this.Angular_Speed : this.node.angle += this.Angular_Speed;
          }
        }, .01);
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        "Special" == other.node.group && "Boss_Water_Defend" == other.node.name && 0 == this.Enemy_Bullet_Common.Is_Mozu_Blackhole_Absorbing && this.Enemy_Bullet_Common.Be_Destroy();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Fire_Stage_2_Bullet_Big: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9b133oGd1FappoS1BOtXiy", "Boss_Fire_Stage_2_Bullet_Big");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Is_Water: 0,
        Fire_Bullet: cc.Prefab,
        Water_Bullet: cc.Prefab,
        Fire_Somoke: cc.Prefab,
        Water_Somoke: cc.Prefab
      },
      Start_Set: function Start_Set() {
        var dir = cc.v2(this.node.x, this.node.y);
        var radian = Math.atan2(dir.y, dir.x);
        var angle = radian / Math.PI * 180;
        this.Enemy_Bullet_Common.Ini_Speed = 1e4 * Math.cos(angle * Math.PI / 180) * -1;
        this.Enemy_Bullet_Common.Ini_Speed_Y = 1e4 * Math.sin(angle * Math.PI / 180) * -1;
        this.Enemy_Bullet_Common.Set_Speed();
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy_Bullet" == otherCollider.node.group && "Boss_Fire_Stage_2_Bullet_Big" == otherCollider.node.name && 1 == this.Is_Water) {
          this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          var Particle = cc.instantiate(this.Fire_Somoke);
          Particle.parent = this.Enemy_Common.Particle_Parent;
          Particle.setPosition(0, 0);
          var Particle = cc.instantiate(this.Water_Somoke);
          Particle.parent = this.Enemy_Common.Particle_Parent;
          Particle.setPosition(0, 0);
          otherCollider.node.destroy();
          this.node.destroy();
        }
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Fire_Third_Heart_Bullet_Child: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "56823UA3RRLsL40T9MrsdxZ", "Boss_Fire_Third_Heart_Bullet_Child");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Now_Speed: 0,
        a: 0,
        Angle_Add_Number: 0
      },
      Set_Speed: function Set_Speed() {
        var _this = this;
        this.Enemy_Bullet_Common.Can_Destroy = 1;
        var Ini_Angle = this.node.angle;
        cc.tween(this.node).to(8, {
          angle: Ini_Angle + 810
        }, {
          easing: "quadInOut"
        }).call(function() {
          _this.Enemy_Bullet_Common.Can_Bound_Destroy = 1;
        }).start();
        this.a = -35;
        this.schedule(function() {
          if (Math.abs(this.Now_Speed) <= 2e3) {
            this.Now_Speed += this.a;
            this.a -= .5;
          }
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Fire_Third_Heart_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "74510BkbJpJ1ad0085q7Ijr", "Boss_Fire_Third_Heart_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Hero_X: 0,
        Hero_Y: 0,
        Target_X: [ cc.Float ],
        Target_Y: [ cc.Float ],
        Target_Angle: [ cc.Float ],
        Heart_Move_Stage: 0,
        Number: 0,
        Now_Speed: 0,
        a: 0,
        Child_Bullet: cc.Prefab,
        Create_Bullet_Schedule: cc.Schedule,
        Angle_Add_Number: 0
      },
      start: function start() {
        this.Target_X = [ 11.052, 42.633, 42.633, 84.741, 135.211, 187.915, 239.424, 284.052, 317.087, 334.522, 338.47, 332.046, 314.128, 280.851, 236.055, 188.337, 143.709, 104.387, 72.269, 45.657, 30.525, 23.384 ];
        this.Target_Y = [ 151.436, 194.201, 194.201, 226.439, 245.71, 253.83, 241.589, 213.027, 170.815, 120.344, 65.736, 11.595, -39.6, -80.556, -111.273, -137.885, -171.802, -207.554, -250.683, -299.318, -350.637, -404.19 ];
        this.Target_Angle = [ 120, 110, 110, 90, 80, 60, 40, 20, 0, -20, -30, -40, -60, -80, -90, -90, -80, -70, -50, -50, -40, -35 ];
        this.Hero_X = this.Enemy_Bullet_Common.Battle_Controller.Hero.x;
        this.Hero_Y = this.Enemy_Bullet_Common.Battle_Controller.Hero.y;
        this.Create_Bullet_Schedule = function() {
          var Bullet = cc.instantiate(this.Child_Bullet);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = this.node.angle + 60;
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        };
        this.schedule(this.Create_Bullet_Schedule, .05);
        this.Heart_Move();
      },
      Heart_Move: function Heart_Move() {
        var _this = this;
        var dx = this.Hero_X + -1 * this.Target_X[this.Heart_Move_Stage] - this.node.x;
        var dy = this.Hero_Y + this.Target_Y[this.Heart_Move_Stage] - this.node.y + 30;
        var distance = Math.sqrt(dx * dx + dy * dy);
        var time = distance / 1e3;
        cc.tween(this.node).to(time, {
          position: cc.v2(this.Hero_X - this.Target_X[this.Heart_Move_Stage], this.Hero_Y + this.Target_Y[this.Heart_Move_Stage] + 30),
          angle: -1 * this.Target_Angle[this.Heart_Move_Stage]
        }).call(function() {
          if (_this.Heart_Move_Stage < 21) {
            _this.Heart_Move_Stage++;
            _this.Heart_Move();
          } else {
            _this.unschedule(_this.Create_Bullet_Schedule);
            _this.Shoot();
          }
        }).start();
      },
      Shoot: function Shoot() {
        for (var i = 0; i < this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) {
          var Script = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Boss_Fire_Third_Heart_Bullet_Child");
          null != Script && Script.Set_Speed();
        }
        var Ini_Angle = this.node.angle;
        cc.tween(this.node).to(8, {
          angle: Ini_Angle + 810
        }, {
          easing: "quadInOut"
        }).start();
        this.a = 0;
        this.schedule(function() {
          if (Math.abs(this.Now_Speed) <= 2e3) {
            this.Now_Speed += this.a;
            this.a += .5;
          }
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos((this.node.angle - 90) * Math.PI / 180);
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin((this.node.angle - 90) * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Fire_Water_Stage_2_Red_Bar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7baa3dVsuBKZJYY+QreJoa4", "Boss_Fire_Water_Stage_2_Red_Bar");
    "use strict";
    var _properties;
    cc.Class({
      extends: cc.Component,
      properties: (_properties = {
        Attack: 0,
        Jingjie: 0,
        Battle_Controller: cc.Node,
        Number: 0,
        Born_Point_1: cc.Node,
        Born_Point_2: cc.Node,
        Bullet: [ cc.Prefab ]
      }, _properties["Number"] = 0, _properties),
      start: function start() {
        this.node.angle = 180 * Math.random();
      },
      End: function End() {
        var _this = this;
        var Bullet_1 = cc.instantiate(this.Bullet[0]);
        Bullet_1.parent = this.node;
        var Script = Bullet_1.getComponent("Enemy_Bullet_Common");
        Script.Attack = this.Attack;
        Script.Jing_Jie = this.Jingjie;
        Script.Battle_Controller = this.Battle_Controller;
        var Bullet_2 = cc.instantiate(this.Bullet[1]);
        Bullet_2.parent = this.node;
        var Script = Bullet_2.getComponent("Enemy_Bullet_Common");
        Script.Attack = this.Attack;
        Script.Jing_Jie = this.Jingjie;
        Script.Battle_Controller = this.Battle_Controller;
        Script.Special_Number = this.Number;
        Bullet_1.setPosition(this.Born_Point_1.x, this.Born_Point_1.y);
        Bullet_2.setPosition(this.Born_Point_2.x, this.Born_Point_2.y);
        Bullet_1.parent = this.Battle_Controller.Enemy_Bullet_Parent;
        Bullet_2.parent = this.Battle_Controller.Enemy_Bullet_Parent;
        cc.tween(this.node).delay(.01).call(function() {
          Bullet_1.getComponent("Boss_Water_Fire_Stage_2_Bullet_Big").Start_Set();
          Bullet_2.getComponent("Boss_Water_Fire_Stage_2_Bullet_Big").Start_Set();
          _this.node.destroy();
        }).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Boss_Fire: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ea142aJZ0BHp7X705Syst2+", "Boss_Fire");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Back_Particle: cc.ParticleSystem,
        RigidBody: cc.RigidBody,
        BoxCollider: cc.BoxCollider,
        Ghost: cc.Prefab
      },
      start: function start() {},
      Think: function Think() {},
      Special_Move_Content: function Special_Move_Content() {},
      Create_Ghost: function Create_Ghost() {
        this.schedule(function() {
          var Ghost = cc.instantiate(this.Ghost);
          Ghost.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
          Ghost.setPosition(this.node.x, this.node.y);
        }, .01, 30);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_God: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e64ae0pWD9GqoOdhvaCqlMR", "Boss_God");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Thunder_Red_Prefab: cc.Prefab,
        Lingxing_Bullet_Prefab: cc.Prefab,
        Last_Thunder_Prefab: cc.Prefab,
        Circle_Shoot_Schedule: cc.Schedule,
        Circle_Shoot_Schedule_Repeat: 0,
        Circle_Shoot_Schedule_Count: 0,
        Thunder_Schedule: cc.Schedule,
        Thunder_Schedule_Repeat: 0,
        Thunder_Schedule_Count: 0,
        Circle_Bullet_Born_X: [ cc.Integer ],
        Circle_Bullet_Born_Y: [ cc.Integer ]
      },
      start: function start() {
        this.Circle_Bullet_Born_X = [ 0, 100, 200, 300, 400, 500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500, -400, -300, -200, -100 ];
        this.Circle_Bullet_Born_Y = [ 500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400, 500, 400, 300, 200, 100, 0, -100, -200, -300, -400, -500, -400, -300, -200, -100, 0, 100, 200, 300, 400 ];
        this.Circle_Shoot_Schedule = function() {
          if (this.Circle_Shoot_Schedule_Count === this.Circle_Shoot_Schedule_Repeat) {
            this.Circle_Shoot_Schedule_Count = 0;
            this.unschedule(this.Circle_Shoot_Schedule);
            this.Animation.play("Boss_God_Stay");
            this.Enemy_Common.Move();
          }
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          if (null != this.Enemy_Common.Battle_Controller.Hero) {
            Bullet.x = this.Enemy_Common.Battle_Controller.Hero.x + this.Circle_Bullet_Born_X[this.Circle_Shoot_Schedule_Count];
            Bullet.y = this.Enemy_Common.Battle_Controller.Hero.y + this.Circle_Bullet_Born_Y[this.Circle_Shoot_Schedule_Count];
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            this.Enemy_Common.Bullet_Attack_Count();
            Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
            var radian = Math.atan2(dir.y, dir.x);
            var angle = radian / Math.PI * 180 - 180;
            Bullet_Common_Script.Ini_Speed = 400 * Math.cos(angle * Math.PI / 180);
            Bullet_Common_Script.Ini_Speed_Y = 400 * Math.sin(angle * Math.PI / 180);
            Bullet_Common_Script.Set_Speed();
          }
          this.Circle_Shoot_Schedule_Count++;
        };
        this.Thunder_Schedule = function() {
          if (this.Thunder_Schedule_Count === this.Thunder_Schedule_Repeat) {
            this.Thunder_Schedule_Count = 0;
            this.unschedule(this.Thunder_Schedule);
            this.Animation.play("Boss_God_Stay");
            this.Enemy_Common.Move();
          }
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Schedule_Count++;
        };
      },
      Think: function Think() {
        if (0 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack");
          this.Circle_Shoot_Schedule_Repeat = 20;
          this.schedule(this.Circle_Shoot_Schedule, .1);
          this.Think_Stage++;
        } else if (1 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack_1");
          this.Miaozhun_Shoot();
          this.Think_Stage++;
        } else if (2 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack_1");
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Think_Stage++;
        } else if (3 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack");
          this.Thunder_Schedule_Repeat = 3;
          this.schedule(this.Thunder_Schedule, .5);
          this.Think_Stage++;
        } else if (4 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack_1");
          this.Lingxing_Shoot();
          this.Lingxing_Shoot();
          this.Lingxing_Shoot();
          this.Lingxing_Shoot();
          this.Lingxing_Shoot();
          this.Lingxing_Shoot();
          this.Lingxing_Shoot();
          this.Lingxing_Shoot();
          this.Lingxing_Shoot();
          this.Lingxing_Shoot();
          this.Think_Stage++;
        } else if (5 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack_1");
          this.Call_Last_Thunder();
          0 == this.Enemy_Common.Half_Hp ? this.Think_Stage = 0 : this.Think_Stage++;
        } else if (6 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack_1");
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Think_Stage++;
        } else if (7 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack_1");
          this.Call_Last_Thunder_2();
          this.Think_Stage++;
        } else if (8 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack");
          this.Circle_Shoot_Schedule_Repeat = 40;
          this.schedule(this.Circle_Shoot_Schedule, .1);
          this.Think_Stage++;
        } else if (9 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack");
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Thunder_Shoot();
          this.Circle_Shoot_Schedule_Repeat = 20;
          this.schedule(this.Circle_Shoot_Schedule, .1);
          this.Think_Stage++;
        } else if (10 == this.Think_Stage) {
          this.Animation.play("Boss_God_Attack");
          this.Miaozhun_Shoot();
          this.Circle_Shoot_Schedule_Repeat = 20;
          this.schedule(this.Circle_Shoot_Schedule, .1);
          this.Think_Stage = 0;
        }
      },
      Miaozhun_Shoot: function Miaozhun_Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + Math.floor(2001 * Math.random() - 1e3);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var dir = cc.v2(Bullet.x - this.Enemy_Common.Battle_Controller.Hero.x, Bullet.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
        }
      },
      Thunder_Shoot: function Thunder_Shoot() {
        var Bullet = cc.instantiate(this.Thunder_Red_Prefab);
        Bullet.parent = this.Enemy_Common.Battle_Controller.Thunder_Red_Parent;
        Bullet.x = Math.floor(-1031.52 * Math.random());
        Bullet.y = 0;
        var Bullet_Common_Script = Bullet.getComponent("Thunder_Red");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Lingxing_Shoot: function Lingxing_Shoot() {
        var Bullet = cc.instantiate(this.Lingxing_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 150;
        Bullet.y = this.node.y + Math.floor(601 * Math.random() - 300);
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      },
      Call_Last_Thunder: function Call_Last_Thunder() {
        var Bullet = cc.instantiate(this.Last_Thunder_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = 1144.652;
        Bullet.y = 0;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      },
      Call_Last_Thunder_2: function Call_Last_Thunder_2() {
        var Bullet = cc.instantiate(this.Last_Thunder_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = 1144.652;
        Bullet.y = 0;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Last_Thunder_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = -1144.652;
        Bullet.y = 0;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 150;
        Bullet_Common_Script.Set_Speed();
      },
      Half_Hp: function Half_Hp() {
        this.Enemy_Common.Speed = 5 * this.Enemy_Common.Speed;
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_Gun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "322ffv75KJBVLMnjuHUW3dH", "Boss_Gun");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Bomb_Prefab: cc.Prefab,
        Long_Bullet_Prefab: cc.Prefab,
        UAV_Prefab: cc.Prefab,
        Saoshe_Shoot_Schedule: cc.Schedule,
        Saoshe_Shoot_Schedule_Repeat: 0,
        Saoshe_Shoot_Schedule_Count: 0,
        Sky_Shoot_Schedule: cc.Schedule,
        Sky_Shoot_Schedule_Repeat: 0,
        Sky_Shoot_Schedule_Count: 0,
        Duihuakuang: cc.Node,
        Duihuakuang_Label: cc.Label,
        Duihuakuang_Animation: cc.Animation,
        UAV_Born_Smoke: cc.Prefab,
        UAV_Born_Smoke_White: cc.Prefab
      },
      start: function start() {
        this.Saoshe_Shoot_Schedule = function() {
          if (this.Saoshe_Shoot_Schedule_Count === this.Saoshe_Shoot_Schedule_Repeat) {
            this.Saoshe_Shoot_Schedule_Count = 0;
            this.unschedule(this.Saoshe_Shoot_Schedule);
            this.Animation.play("Boss_Gun_Stay");
            this.Enemy_Common.Move();
          }
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 149.959;
          Bullet.y = this.node.y + 89.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -1 * Math.floor(401 * Math.random() + 800);
          Bullet_Common_Script.Ini_Speed_Y = Math.floor(1601 * Math.random() - 800);
          Bullet_Common_Script.Set_Speed();
          this.Saoshe_Shoot_Schedule_Count++;
        };
        this.Sky_Shoot_Schedule = function() {
          if (this.Sky_Shoot_Schedule_Count === this.Sky_Shoot_Schedule_Repeat) {
            this.Sky_Shoot_Schedule_Count = 0;
            this.unschedule(this.Sky_Shoot_Schedule);
          }
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = -1 * Math.floor(2258.604 * Math.random() - 1128.802);
          Bullet.y = 685.994;
          Bullet.angle = 90;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 0;
          Bullet_Common_Script.Ini_Speed_Y = -1e3;
          Bullet_Common_Script.Set_Speed();
          this.Sky_Shoot_Schedule_Count++;
        };
      },
      Think: function Think() {
        if (0 == this.Think_Stage) {
          this.Animation.play("Boss_Gun_Attack");
          this.Saoshe_Shoot_Schedule_Repeat = 40;
          this.schedule(this.Saoshe_Shoot_Schedule, .04);
          this.Think_Stage++;
        } else if (1 == this.Think_Stage) {
          this.Animation.play("Boss_Gun_Bomb");
          this.Think_Stage++;
        } else if (2 == this.Think_Stage) {
          this.Sky_Shoot_Schedule_Repeat = 80;
          this.schedule(this.Sky_Shoot_Schedule, .05);
          this.Duihuakuang_Label.string = "\u6765\u70b9\u7a7a\u4e2d\u652f\u63f4\uff01";
          this.Duihuakuang_Animation.play();
          this.Animation.play("Boss_Gun_Stay");
          this.Enemy_Common.Move();
          this.Think_Stage++;
        } else if (3 == this.Think_Stage) {
          this.Animation.play("Boss_Gun_Bomb_2");
          0 == this.Enemy_Common.Half_Hp ? this.Think_Stage = 0 : this.Think_Stage++;
        } else {
          if (this.node.parent.children.length < 6) {
            this.Duihuakuang_Label.string = "\u6765\u4e2a\u65e0\u4eba\u673a\u652f\u63f4\uff01";
            this.Duihuakuang_Animation.play();
            this.Call_UAV();
          }
          this.Think_Stage = 0;
          this.Enemy_Common.Move();
        }
      },
      Bomb_Shoot: function Bomb_Shoot() {
        var Bullet = cc.instantiate(this.Bomb_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 59.311;
        Bullet.y = this.node.y + 310.236;
        Bullet.scale = 1.5;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bomb_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 30.274;
        Bullet.y = this.node.y + 298.01;
        Bullet.scale = 1.5;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bomb_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 90.458;
        Bullet.y = this.node.y + 290.369;
        Bullet.scale = 1.5;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bomb_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 137.834;
        Bullet.y = this.node.y + 268.973;
        Bullet.scale = 1.5;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      },
      Call_UAV: function Call_UAV() {
        var Enemy = cc.instantiate(this.UAV_Prefab);
        Enemy.parent = this.Enemy_Common.Battle_Controller.Enemy_Parent;
        Enemy.x = this.node.x;
        Enemy.y = this.node.y + 100;
        var Smoke = cc.instantiate(this.UAV_Born_Smoke);
        Smoke.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Smoke.x = this.node.x;
        Smoke.y = this.node.y + 100;
        var Smoke = cc.instantiate(this.UAV_Born_Smoke_White);
        Smoke.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Smoke.x = this.node.x;
        Smoke.y = this.node.y + 100;
      },
      Half_Hp: function Half_Hp() {
        this.Enemy_Common.Speed = 4 * this.Enemy_Common.Speed;
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_Hp_Line_Parent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b0db8EYaIdCq5SU53d02/sZ", "Boss_Hp_Line_Parent");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Contoller: cc.Node,
        Animation: cc.Animation
      },
      start: function start() {},
      In: function In() {
        this.Animation.play("Boss_Hp_Line_Parent_In");
      },
      Out: function Out() {},
      Change: function Change() {}
    });
    cc._RF.pop();
  }, {} ],
  Boss_Japan_Jijia_FS: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f2489G4lUNA5IFM2iP/NS5V", "Boss_Japan_Jijia_FS");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Animation.play("Boss_Japan_Jijia_FS_Attack");
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y;
        Bullet.scaleX = .5 * Bullet.scaleX;
        Bullet.scaleY = .5 * Bullet.scaleY;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_Japan_Jijia: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3a3afoAejNO4JPwLXmh8ww6", "Boss_Japan_Jijia");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Go_Stop_Bullet_Prefab: cc.Prefab,
        FS_Prefab: cc.Prefab,
        Hit_Number_Prefab: cc.Prefab,
        Smoke_Prefab_Black: cc.Prefab,
        Smoke_Prefab_White: cc.Prefab,
        Which_Shoot: 0
      },
      Think: function Think() {
        if (0 == this.Think_Stage) {
          this.Animation.play("Boss_Japan_Jijia_Attack");
          this.Which_Shoot = 0;
          this.Think_Stage++;
        } else if (1 == this.Think_Stage) {
          this.Animation.play("Boss_Japan_Jijia_Attack");
          this.Which_Shoot = 1;
          this.Think_Stage++;
        } else if (2 == this.Think_Stage) {
          this.Think_Stage++;
          this.node.parent.children.length < 8 ? this.FS() : this.Enemy_Common.Move();
        } else if (3 == this.Think_Stage) {
          this.Think_Stage++;
          this.Which_Shoot = 2;
          this.Animation.play("Boss_Japan_Jijia_Attack");
        } else if (4 == this.Think_Stage) {
          this.Think_Stage++;
          this.Which_Shoot = 0;
          this.Animation.play("Boss_Japan_Jijia_Disappear");
        } else if (5 == this.Think_Stage) {
          0 == this.Enemy_Common.Half_Hp ? this.Think_Stage = 0 : this.Think_Stage++;
          this.Which_Shoot = 0;
          this.Animation.play("Boss_Japan_Jijia_Attack_3");
        } else {
          this.Think_Stage = 0;
          this.Which_Shoot = 2;
          this.Animation.play("Boss_Japan_Jijia_Attack_3");
        }
      },
      Shoot: function Shoot() {
        if (0 == this.Which_Shoot) {
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 300;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Set_Speed();
        } else if (1 == this.Which_Shoot) {
          var Bullet = cc.instantiate(this.Go_Stop_Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 300;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Set_Speed();
        } else if (2 == this.Which_Shoot) {
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 300;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 300;
          Bullet.y = this.node.y;
          Bullet.angle = -45;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -600;
          Bullet_Common_Script.Ini_Speed_Y = 600;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 300;
          Bullet.y = this.node.y;
          Bullet.angle = 45;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -600;
          Bullet_Common_Script.Ini_Speed_Y = -600;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 300;
          Bullet.y = this.node.y;
          Bullet.angle = 180;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 1200;
          Bullet_Common_Script.Ini_Speed_Y = 0;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 300;
          Bullet.y = this.node.y;
          Bullet.angle = 135;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 600;
          Bullet_Common_Script.Ini_Speed_Y = -600;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 300;
          Bullet.y = this.node.y;
          Bullet.angle = 225;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 600;
          Bullet_Common_Script.Ini_Speed_Y = 600;
          Bullet_Common_Script.Set_Speed();
        }
      },
      FS: function FS() {
        var Enemy = cc.instantiate(this.FS_Prefab);
        Enemy.parent = this.Enemy_Common.Battle_Controller.Enemy_Parent;
        Enemy.x = this.node.x;
        Enemy.y = this.node.y;
        var Hit_Number = cc.instantiate(this.Enemy_Common.Hit_Number_Prefab);
        Hit_Number.parent = this.Enemy_Common.Particle_Parent;
        Hit_Number.x = this.node.x;
        Hit_Number.y = this.node.y;
        Hit_Number.getComponent(cc.Label).string = "\u5206\u8eab\u672f\uff01";
        this.Enemy_Common.Move();
      },
      SY: function SY() {
        var Bullet = cc.instantiate(this.Smoke_Prefab_Black);
        Bullet.parent = this.Enemy_Common.Particle_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        var Bullet = cc.instantiate(this.Smoke_Prefab_White);
        Bullet.parent = this.Enemy_Common.Particle_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        this.node.x = Math.floor(1056.438 * Math.random());
        this.node.y = Math.floor(525.495 * Math.random() - 158.667);
        var Bullet = cc.instantiate(this.Smoke_Prefab_Black);
        Bullet.parent = this.Enemy_Common.Particle_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        var Bullet = cc.instantiate(this.Smoke_Prefab_White);
        Bullet.parent = this.Enemy_Common.Particle_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
      },
      Half_Hp: function Half_Hp() {
        this.Enemy_Common.Speed = 5 * this.Enemy_Common.Speed;
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_Jijia_Big_Mother_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34afb82GEhP3Y9CT6EmDQXG", "Boss_Jijia_Big_Mother_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Son_Bullet: cc.Prefab
      },
      start: function start() {
        this.schedule(function() {
          if (null != this.node) {
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = 0;
            Bullet_Common_Script.Ini_Speed_Y = 500;
            Bullet_Common_Script.Set_Speed();
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = -250;
            Bullet_Common_Script.Ini_Speed_Y = 250;
            Bullet_Common_Script.Set_Speed();
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = -500;
            Bullet_Common_Script.Ini_Speed_Y = 0;
            Bullet_Common_Script.Set_Speed();
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = -250;
            Bullet_Common_Script.Ini_Speed_Y = -250;
            Bullet_Common_Script.Set_Speed();
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = 0;
            Bullet_Common_Script.Ini_Speed_Y = -500;
            Bullet_Common_Script.Set_Speed();
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = 250;
            Bullet_Common_Script.Ini_Speed_Y = -250;
            Bullet_Common_Script.Set_Speed();
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = 500;
            Bullet_Common_Script.Ini_Speed_Y = 0;
            Bullet_Common_Script.Set_Speed();
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = 250;
            Bullet_Common_Script.Ini_Speed_Y = 250;
            Bullet_Common_Script.Set_Speed();
          }
        }, 1);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Jijia: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4ac9iz9qpBa42nvEVBGXU8", "Boss_Jijia");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Big_Bullet_Prefab: cc.Prefab,
        Which_Attack: 0,
        Is_Diejiashe: 0,
        Sanshe_Shoot_Schedule: cc.Schedule,
        Sanshe_Shoot_Schedule_Repeat: 0,
        Sanshe_Shoot_Schedule_Count: 0,
        Miaozhunshe_Shoot_Schedule: cc.Schedule,
        Miaozhunshe_Shoot_Schedule_Repeat: 0,
        Miaozhunshe_Shoot_Schedule_Count: 0,
        Big_Shoot_Schedule: cc.Schedule,
        Big_Shoot_Schedule_Repeat: 0,
        Big_Shoot_Schedule_Count: 0
      },
      start: function start() {
        this.Sanshe_Shoot_Schedule = function() {
          if (this.Sanshe_Shoot_Schedule_Count === this.Sanshe_Shoot_Schedule_Repeat) {
            this.Sanshe_Shoot_Schedule_Count = 0;
            this.unschedule(this.Sanshe_Shoot_Schedule);
            if (0 == this.Is_Diejiashe) {
              this.Animation.play("Boss_Jijia_Stay");
              this.Enemy_Common.Move();
            }
          }
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -300;
          Bullet_Common_Script.Ini_Speed_Y = 600;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -400;
          Bullet_Common_Script.Ini_Speed_Y = 400;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -800;
          Bullet_Common_Script.Ini_Speed_Y = 0;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -300;
          Bullet_Common_Script.Ini_Speed_Y = -600;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -400;
          Bullet_Common_Script.Ini_Speed_Y = -400;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -600;
          Bullet_Common_Script.Ini_Speed_Y = -300;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -600;
          Bullet_Common_Script.Ini_Speed_Y = 300;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -700;
          Bullet_Common_Script.Ini_Speed_Y = -200;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -700;
          Bullet_Common_Script.Ini_Speed_Y = 200;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 300;
          Bullet_Common_Script.Ini_Speed_Y = 600;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 400;
          Bullet_Common_Script.Ini_Speed_Y = 400;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 800;
          Bullet_Common_Script.Ini_Speed_Y = 0;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 300;
          Bullet_Common_Script.Ini_Speed_Y = -600;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 400;
          Bullet_Common_Script.Ini_Speed_Y = -400;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 600;
          Bullet_Common_Script.Ini_Speed_Y = -300;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 600;
          Bullet_Common_Script.Ini_Speed_Y = 300;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 700;
          Bullet_Common_Script.Ini_Speed_Y = -200;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 700;
          Bullet_Common_Script.Ini_Speed_Y = 200;
          Bullet_Common_Script.Set_Speed();
          this.Sanshe_Shoot_Schedule_Count++;
        };
        this.Miaozhunshe_Shoot_Schedule = function() {
          if (this.Miaozhunshe_Shoot_Schedule_Count === this.Miaozhunshe_Shoot_Schedule_Repeat) {
            this.Miaozhunshe_Shoot_Schedule_Count = 0;
            this.unschedule(this.Miaozhunshe_Shoot_Schedule);
            this.Animation.play("Boss_Jijia_Stay");
            this.Enemy_Common.Move();
          }
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x + 10;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          if (null != this.Enemy_Common.Battle_Controller.Hero) {
            var dir = cc.v2(this.node.x - this.Enemy_Common.Battle_Controller.Hero.x, this.node.y - this.Enemy_Common.Battle_Controller.Hero.y);
            var radian = Math.atan2(dir.y, dir.x);
            var angle = radian / Math.PI * 180 - 180;
            Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
            Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
          } else {
            Bullet_Common_Script.Ini_Speed = -800;
            Bullet_Common_Script.Ini_Speed_Y = 0;
          }
          Bullet_Common_Script.Set_Speed();
          this.Miaozhunshe_Shoot_Schedule_Count++;
        };
        this.Big_Shoot_Schedule = function() {
          if (this.Big_Shoot_Schedule_Count === this.Big_Shoot_Schedule_Repeat) {
            this.Big_Shoot_Schedule_Count = 0;
            this.unschedule(this.Big_Shoot_Schedule);
          }
          var Bullet = cc.instantiate(this.Big_Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 379.378;
          Bullet.y = this.node.y + 81.848;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -300;
          Bullet_Common_Script.Set_Speed();
          this.Big_Shoot_Schedule_Count++;
        };
      },
      Think: function Think() {
        if (0 == this.Think_Stage) {
          this.Is_Diejiashe = 0;
          this.Animation.play("Boss_Jijia_Attack_Ready");
          this.Which_Attack = 0;
          this.Sanshe_Shoot_Schedule_Repeat = 3;
          this.Think_Stage++;
        } else if (1 == this.Think_Stage) {
          this.Is_Diejiashe = 0;
          this.Animation.play("Boss_Jijia_Attack_Ready");
          this.Which_Attack = 1;
          this.Miaozhunshe_Shoot_Schedule_Repeat = 40;
          this.Think_Stage++;
        } else if (2 == this.Think_Stage) {
          this.Is_Diejiashe = 1;
          this.Animation.play("Boss_Jijia_Attack_Ready");
          this.Which_Attack = 2;
          this.Sanshe_Shoot_Schedule_Repeat = 3;
          this.Miaozhunshe_Shoot_Schedule_Repeat = 50;
          this.Think_Stage++;
        } else if (3 == this.Think_Stage) {
          this.Is_Diejiashe = 0;
          this.Animation.play("Boss_Jijia_Attack_Ready");
          this.Which_Attack = 3;
          this.Think_Stage++;
        } else if (4 == this.Think_Stage) {
          this.Is_Diejiashe = 1;
          this.Animation.play("Boss_Jijia_Attack_Ready");
          this.Which_Attack = 4;
          this.Sanshe_Shoot_Schedule_Repeat = 3;
          this.Miaozhunshe_Shoot_Schedule_Repeat = 50;
          1 == this.Enemy_Common.Half_Hp ? this.Think_Stage++ : this.Think_Stage = 0;
        } else {
          this.Is_Diejiashe = 1;
          this.Animation.play("Boss_Jijia_Attack_Ready");
          this.Which_Attack = 5;
          this.Sanshe_Shoot_Schedule_Repeat = 3;
          this.Miaozhunshe_Shoot_Schedule_Repeat = 50;
          this.Big_Shoot_Schedule_Repeat = 3;
          this.Think_Stage = 0;
        }
      },
      Ready_To_Attack: function Ready_To_Attack() {
        this.Animation.play("Boss_Jijia_Attack");
        0 == this.Which_Attack ? this.Sanshe() : 1 == this.Which_Attack ? this.Miaozhunshe() : 2 == this.Which_Attack ? this.DieJiaShe() : 3 == this.Which_Attack ? this.She_Big() : 4 == this.Which_Attack ? this.Sangediejiashe() : this.Ex();
      },
      Sanshe: function Sanshe() {
        this.schedule(this.Sanshe_Shoot_Schedule, .2);
      },
      Miaozhunshe: function Miaozhunshe() {
        this.schedule(this.Miaozhunshe_Shoot_Schedule, .05);
      },
      DieJiaShe: function DieJiaShe() {
        this.schedule(this.Sanshe_Shoot_Schedule, .2);
        this.schedule(this.Miaozhunshe_Shoot_Schedule, .05);
      },
      She_Big: function She_Big() {
        var Bullet = cc.instantiate(this.Big_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 379.378;
        Bullet.y = this.node.y + 81.848;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -300;
        Bullet_Common_Script.Set_Speed();
        if (0 == this.Is_Diejiashe) {
          this.Animation.play("Boss_Jijia_Stay");
          this.Enemy_Common.Move();
        }
      },
      Sangediejiashe: function Sangediejiashe() {
        this.schedule(this.Sanshe_Shoot_Schedule, .2);
        this.schedule(this.Miaozhunshe_Shoot_Schedule, .05);
        this.She_Big();
      },
      Ex: function Ex() {
        this.schedule(this.Sanshe_Shoot_Schedule, .2);
        this.schedule(this.Miaozhunshe_Shoot_Schedule, .05);
        this.schedule(this.Big_Shoot_Schedule, .5);
      },
      Half_Hp: function Half_Hp() {
        this.Enemy_Common.Speed = 4 * this.Enemy_Common.Speed;
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_Picture: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3f01fddlWBJQbJmivQgb3sA", "Boss_Picture");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Lv_Picture: [ cc.Prefab ],
        GBA_Picture: [ cc.Prefab ],
        Water_Fire_Picture: [ cc.Prefab ],
        YHWD_Picture: [ cc.Prefab ],
        YKNG_Picture: [ cc.Prefab ]
      },
      Create_Picture: function Create_Picture() {
        switch (this.Battle_Controller.Enemy_Create.Boss_ID) {
         case 0:
          var node = cc.instantiate(this.Lv_Picture[this.Battle_Controller.Boss_Stage]);
          node.parent = this.Battle_Controller.Boss_Picture_Parent;
          node.setPosition(0, 0);
          break;

         case 1:
          var node = cc.instantiate(this.GBA_Picture[this.Battle_Controller.Boss_Stage]);
          node.parent = this.Battle_Controller.Boss_Picture_Parent;
          node.setPosition(0, 0);
          break;

         case 2:
          var node = cc.instantiate(this.Water_Fire_Picture[this.Battle_Controller.Boss_Stage]);
          node.parent = this.Battle_Controller.Boss_Picture_Parent;
          node.setPosition(0, 0);
          break;

         case 3:
          var node = cc.instantiate(this.YHWD_Picture[this.Battle_Controller.Boss_Stage]);
          node.parent = this.Battle_Controller.Boss_Picture_Parent;
          node.setPosition(0, 0);
          break;

         case 4:
          var node = cc.instantiate(this.YKNG_Picture[this.Battle_Controller.Boss_Stage]);
          node.parent = this.Battle_Controller.Boss_Picture_Parent;
          node.setPosition(0, 0);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Boss_Sword: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d4c1d+thy9NSYnVKbHYArd/", "Boss_Sword");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Luan_Prefab: cc.Prefab,
        Bullet_San_Prefab: cc.Prefab,
        Is_Luan_Or_San: 0,
        Small_Sword_Bullet_Prefab: cc.Prefab,
        Big_Sword_Bullet_Prefab: cc.Prefab,
        Bo_Black: cc.Prefab,
        Bullet_Fish_Prefab: cc.Prefab,
        Bullet_Fish_Red_Prefab: cc.Prefab,
        Ink_Particle_Big: cc.Prefab,
        Ink_Particle_Black: cc.Prefab,
        Ink_Particle_Red: cc.Prefab,
        Fire_Bomb_Absorb: cc.Prefab,
        Enemy_Bullet_Sword_Follow: cc.Prefab,
        Enemy_Bullet_Sword_Crazy: cc.Prefab,
        Enemy_Bullet_Sword_Crazy_Red: cc.Prefab,
        Enemy_Bullet_Sword_Crazy_Blue: cc.Prefab,
        Bo_Gold: cc.Prefab,
        Bomb_Particle_Big: cc.Prefab,
        Enemy_Bullet_Coin: cc.Prefab,
        Enemy_Bullet_Heart: cc.Prefab,
        Bo_Absorb: cc.Prefab,
        Boss_Sword_Follow_Coin: cc.Prefab,
        Boss_Sword_Follow_Flower: cc.Prefab,
        Boss_Sword_Follow_Heart: cc.Prefab,
        Enemy_Bullet_Seed_Wait_Trigger: cc.Prefab,
        Write_Rose_Schedule: cc.schedule,
        Write_Rose_Number: 0,
        Write_Rose_J: 0
      },
      start: function start() {
        this.Write_Rose_Schedule = function() {
          if (this.Write_Rose_Number <= 75) {
            this.Write_Rose_Number++;
            this.Write_Rose_J >= 3.14 && (this.Write_Rose_J = -3.14);
            this.Write_Rose_J += .06;
            var R = 4 * Math.sin(4 * this.Write_Rose_J);
            var Bullet = cc.instantiate(this.Enemy_Bullet_Seed_Wait_Trigger);
            Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
            Bullet.setPosition(this.node.x - 400 + R * Math.cos(this.Write_Rose_J) * 150, this.node.y + R * Math.sin(this.Write_Rose_J) * 150);
            Bullet.angle = 180 * this.Write_Rose_J / Math.PI;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            this.Enemy_Common.Bullet_Attack_Count();
            Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            var Script = Bullet_Common_Script.node.getComponent("Enemy_Bullet_Seed_Wait_Trigger");
            Script.Wait_Time = .02 * this.Write_Rose_Number;
          } else {
            this.Write_Rose_Number = 0;
            this.Write_Rose_J = 0;
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length > 0) for (var i = 0; i < this.Enemy_Common.Enemy_Bullet_Parent.children.length; i++) if (null != this.Enemy_Common.Enemy_Bullet_Parent.children[i]) {
              var Enemy_Bullet_Common = this.Enemy_Common.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common");
              if (1 == Enemy_Bullet_Common.Is_Wait_Trigger) {
                var Script = Enemy_Bullet_Common.node.getComponent("Enemy_Bullet_Seed_Wait_Trigger");
                null != Script && Script.Move();
              }
            }
            this.unschedule(this.Write_Rose_Schedule);
          }
        };
      },
      Think: function Think() {
        var _this = this;
        switch (this.Enemy_Common.Battle_Controller.Boss_Stage) {
         case 0:
          switch (this.Think_Stage) {
           case 0:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Write");
              this.Write_Luan();
              this.Think_Stage++;
            } else this.Enemy_Common.Move();
            break;

           case 1:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Write");
              this.Write_San();
              this.Think_Stage++;
            } else this.Enemy_Common.Move();
            break;

           case 2:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Write");
              this.Write_Rose();
              this.Think_Stage++;
            } else this.Enemy_Common.Move();
            break;

           case 3:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Write");
              this.Write_Double_San();
              this.Think_Stage++;
            } else this.Enemy_Common.Move();
            break;

           case 4:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Write");
              this.Write_Luan_San();
              this.Think_Stage++;
            } else this.Enemy_Common.Move();
            break;

           case 5:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Write");
              this.Write_Double_Luan();
              this.Think_Stage = 0;
            } else this.Enemy_Common.Move();
          }
          break;

         case 1:
          switch (this.Think_Stage) {
           case 0:
            this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play("Boss_Sword_Xuli") : this.Enemy_Common.Move();
            break;

           case 1:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Draw");
              this.Think_Stage++;
              this.Shoot_Red_Fish();
            } else this.Enemy_Common.Move();
            break;

           case 2:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Draw");
              this.Think_Stage++;
              this.Shoot_Black_Fish();
            } else this.Enemy_Common.Move();
            break;

           case 3:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Draw");
              this.Think_Stage = 0;
              this.Shoot_Black_And_Red_Fish();
            } else this.Enemy_Common.Move();
          }
          break;

         case 2:
          switch (this.Think_Stage) {
           case 0:
           case 1:
           case 2:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Attack");
              this.Think_Stage++;
              this.Shoot_String_Sword();
            } else this.Enemy_Common.Move();
            break;

           case 3:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Attack");
              this.Think_Stage++;
              this.Shoot_Seven_String_Sword();
            } else this.Enemy_Common.Move();
            break;

           case 4:
           case 5:
           case 6:
           case 7:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Xuli_Follow_Sword");
              var Fire_Bomb_Absorb = cc.instantiate(this.Fire_Bomb_Absorb);
              Fire_Bomb_Absorb.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
              Fire_Bomb_Absorb.x = this.node.x - 200.802;
              Fire_Bomb_Absorb.y = this.node.y + 205.12;
            } else this.Enemy_Common.Move();
            break;

           case 8:
           case 9:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Attack");
              this.Shoot_Big_Sword();
              this.Think_Stage++;
            } else this.Enemy_Common.Move();
            break;

           case 10:
            if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
              this.Animation.play("Boss_Sword_Attack");
              this.Shoot_Big_Sword();
              this.Think_Stage = 0;
            } else this.Enemy_Common.Move();
          }
          break;

         case 3:
          switch (this.Think_Stage) {
           case 0:
            this.Animation.play("Boss_Sword_Drink");
            this.schedule(function() {
              var Particle = cc.instantiate(this.Enemy_Common.Battle_Controller.Skill_Follow_Particle);
              Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
              Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
              var Particle_Script = Particle.getComponent("Skill_Follow_Particle");
              Particle_Script.Target = this.node;
              Particle_Script.Start_Set();
              var Particle = cc.instantiate(this.Boss_Sword_Follow_Coin);
              Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
              Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
              var Particle_Script = Particle.getComponent("Boss_Absorb_Item");
              Particle_Script.Target = this.node;
              Particle_Script.Start_Set();
              var Particle = cc.instantiate(this.Boss_Sword_Follow_Flower);
              Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
              Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
              var Particle_Script = Particle.getComponent("Boss_Absorb_Item");
              Particle_Script.Target = this.node;
              Particle_Script.Start_Set();
              var Particle = cc.instantiate(this.Boss_Sword_Follow_Heart);
              Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
              Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
              var Particle_Script = Particle.getComponent("Boss_Absorb_Item");
              Particle_Script.Target = this.node;
              Particle_Script.Start_Set();
            }, .025, 40, 0);
            var Particle = cc.instantiate(this.Bo_Absorb);
            Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
            Particle.setPosition(this.node.x, this.node.y);
            cc.tween(this.node).delay(1).call(function() {
              var Bullet = cc.instantiate(_this.Enemy_Bullet_Sword_Crazy);
              Bullet.parent = _this.Enemy_Common.Enemy_Bullet_Parent;
              Bullet.x = _this.node.x - 300;
              Bullet.y = _this.node.y;
              Bullet.angle = 90;
              var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
              _this.Enemy_Common.Bullet_Attack_Count();
              Bullet_Common_Script.Attack = _this.Enemy_Common.Bullet_Attack;
              Bullet_Common_Script.Jing_Jie = _this.Enemy_Common.Enemy_Jing_Jie;
              Bullet_Common_Script.Battle_Controller = _this.Enemy_Common.Battle_Controller;
              Bullet.getComponent("Enemy_Bullet_Sword_Crazy").Boss_Script = _this;
              var Bullet = cc.instantiate(_this.Enemy_Bullet_Sword_Crazy_Red);
              Bullet.parent = _this.Enemy_Common.Enemy_Bullet_Parent;
              Bullet.x = _this.node.x + 300;
              Bullet.y = _this.node.y;
              Bullet.angle = -90;
              var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
              _this.Enemy_Common.Bullet_Attack_Count();
              Bullet_Common_Script.Attack = _this.Enemy_Common.Bullet_Attack;
              Bullet_Common_Script.Jing_Jie = _this.Enemy_Common.Enemy_Jing_Jie;
              Bullet_Common_Script.Battle_Controller = _this.Enemy_Common.Battle_Controller;
              Bullet.getComponent("Enemy_Bullet_Sword_Crazy").Boss_Script = _this;
              var Bullet = cc.instantiate(_this.Enemy_Bullet_Sword_Crazy_Blue);
              Bullet.parent = _this.Enemy_Common.Enemy_Bullet_Parent;
              Bullet.x = _this.node.x;
              Bullet.y = _this.node.y + 500;
              Bullet.angle = 0;
              var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
              _this.Enemy_Common.Bullet_Attack_Count();
              Bullet_Common_Script.Attack = _this.Enemy_Common.Bullet_Attack;
              Bullet_Common_Script.Jing_Jie = _this.Enemy_Common.Enemy_Jing_Jie;
              Bullet_Common_Script.Battle_Controller = _this.Enemy_Common.Battle_Controller;
              Bullet.getComponent("Enemy_Bullet_Sword_Crazy").Boss_Script = _this;
              _this.schedule(function() {
                if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
                  var Bullet = cc.instantiate(this.Enemy_Bullet_Coin);
                  Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
                  Bullet.x = Math.floor(3600.827 * Math.random() - 1802.374);
                  Bullet.y = 1024.598;
                  Bullet.zIndex = 2;
                  var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
                  this.Enemy_Common.Bullet_Attack_Count();
                  Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
                  Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
                  Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
                }
              }, 2);
              _this.schedule(function() {
                if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
                  var Bullet = cc.instantiate(this.Enemy_Bullet_Heart);
                  Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
                  Bullet.x = Math.floor(3600.827 * Math.random() - 1802.374);
                  Bullet.y = 1024.598;
                  Bullet.zIndex = 2;
                  var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
                  this.Enemy_Common.Bullet_Attack_Count();
                  Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
                  Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
                  Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
                }
              }, 3);
              _this.Think_Stage++;
            }).start();
            break;

           case 1:
            this.Animation.play("Boss_Sword_Drink");
          }
        }
      },
      Write_Luan: function Write_Luan() {
        this.Is_Luan_Or_San = 1;
        var Bullet = cc.instantiate(this.Bullet_Luan_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Write_Double_Luan: function Write_Double_Luan() {
        var Bullet = cc.instantiate(this.Bullet_Luan_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y + 150;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Bullet_Luan_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y - 159;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Write_San: function Write_San() {
        this.Is_Luan_Or_San = 0;
        var Bullet = cc.instantiate(this.Bullet_San_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Write_Double_San: function Write_Double_San() {
        var Bullet = cc.instantiate(this.Bullet_San_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y + 150;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Bullet_San_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y - 150;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Write_Luan_San: function Write_Luan_San() {
        var Bullet = cc.instantiate(this.Bullet_Luan_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y + 150;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Bullet_San_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y - 150;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Write_Rose: function Write_Rose() {
        this.schedule(this.Write_Rose_Schedule, .011);
      },
      Draw_Fish: function Draw_Fish() {
        var Bullet = cc.instantiate(this.Bullet_Fish_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Fish_Bomb: function Fish_Bomb() {
        var Bo = cc.instantiate(this.Bo_Black);
        Bo.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Bo.x = this.node.x - 132.703;
        Bo.y = this.node.y + 61.334;
        var Bo = cc.instantiate(this.Ink_Particle_Big);
        Bo.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Bo.x = this.node.x - 132.703;
        Bo.y = this.node.y + 61.334;
        this.Enemy_Common.Battle_Controller.Camera_Shake_Medium();
        var Bo = cc.instantiate(this.Ink_Particle_Black);
        Bo.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Bo.x = this.node.x - 132.703;
        Bo.y = this.node.y + 61.334;
        var Bo = cc.instantiate(this.Ink_Particle_Red);
        Bo.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Bo.x = this.node.x - 132.703;
        Bo.y = this.node.y + 61.334;
        var Bo = cc.instantiate(this.Ink_Particle_Red);
        Bo.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Bo.x = this.node.x - 150;
        Bo.y = this.node.y + 61.334;
        var Bo = cc.instantiate(this.Ink_Particle_Red);
        Bo.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Bo.x = this.node.x - 80;
        Bo.y = this.node.y + 61.334;
        var Bullet = cc.instantiate(this.Bullet_Fish_Red_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 132.703;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = -75;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Set();
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Fish_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 132.703;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = -45;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Set();
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Fish_Red_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 132.703;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = 0;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Set();
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Fish_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 132.703;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = 45;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Set();
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Fish_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 132.703;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = -95;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Set();
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Fish_Red_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 132.703;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = -135;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Set();
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Fish_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 132.703;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = -180;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Set();
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Fish_Red_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 132.703;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = -225;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Set();
        Bullet_Common_Script.Set_Speed();
        this.Think_Stage++;
        this.Enemy_Common.Move();
      },
      Shoot_Red_Fish: function Shoot_Red_Fish() {
        var Angle = -1 * Math.floor(51 * Math.random() + 30);
        var Bullet = cc.instantiate(this.Bullet_Fish_Red_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 500;
        Bullet.y = this.node.y;
        Bullet.angle = Angle;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Animation.play();
        var Bullet = cc.instantiate(this.Bullet_Fish_Red_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y + 200;
        Bullet.angle = Angle;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Animation.play();
        var Bullet = cc.instantiate(this.Bullet_Fish_Red_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 300;
        Bullet.y = this.node.y - 200;
        Bullet.angle = Angle;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Animation.play();
      },
      Shoot_Black_Fish: function Shoot_Black_Fish() {
        var Angle = -1 * Math.floor(41 * Math.random() + 120);
        var X = Math.round(-1620 * Math.random());
        var Bullet = cc.instantiate(this.Bullet_Fish_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = X;
        Bullet.y = this.node.y;
        Bullet.angle = Angle;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Animation.play();
        var Bullet = cc.instantiate(this.Bullet_Fish_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = X - 300;
        Bullet.y = this.node.y + 300;
        Bullet.angle = Angle;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Animation.play();
        var Bullet = cc.instantiate(this.Bullet_Fish_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = X - 300;
        Bullet.y = this.node.y - 300;
        Bullet.angle = Angle;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Animation.play();
      },
      Shoot_Black_And_Red_Fish: function Shoot_Black_And_Red_Fish() {
        var X = Math.round(-1e3 * Math.random());
        var Angle = -1 * Math.floor(55 * Math.random() + 100);
        var Bullet = cc.instantiate(this.Bullet_Fish_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = X;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = Angle;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Animation.play();
        var Bullet = cc.instantiate(this.Bullet_Fish_Red_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = -X;
        Bullet.y = this.node.y + 61.334;
        Bullet.angle = -Angle - 180;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Enemy_Bullet_Fish = Bullet.getComponent("Enemy_Bullet_Fish");
        Enemy_Bullet_Fish.Animation.play();
      },
      Half_Hp: function Half_Hp() {
        this.Enemy_Common.Speed = 3 * this.Enemy_Common.Speed;
      },
      Special_Change_Stage: function Special_Change_Stage() {
        var _this2 = this;
        if (0 == this.Enemy_Common.Battle_Controller.Boss_Stage) {
          var Old_BG = this.Enemy_Common.Battle_Controller.BG_Parent.children[0];
          cc.tween(Old_BG).to(2, {
            opacity: 0
          }).call(function() {
            Old_BG.destroy();
          }).start();
          var New_BG = cc.instantiate(this.Enemy_Common.Battle_Controller.BG_Prefab[6]);
          New_BG.opacity = 0;
          New_BG.parent = this.Enemy_Common.Battle_Controller.BG_Parent;
          cc.tween(New_BG).to(2, {
            opacity: 255
          }).start();
          var Old_Front_BG = this.Enemy_Common.Battle_Controller.Front_BG_Parent.children[0];
          cc.tween(Old_Front_BG).to(2, {
            opacity: 0
          }).call(function() {
            Old_Front_BG.destroy();
          }).start();
          var New_Front_BG = cc.instantiate(this.Enemy_Common.Battle_Controller.Front_BG_Prefab[7]);
          New_Front_BG.opacity = 0;
          New_Front_BG.parent = this.Enemy_Common.Battle_Controller.Front_BG_Parent;
          cc.tween(New_Front_BG).to(2, {
            opacity: 255
          }).start();
          this.Enemy_Common.Noarmal_Change_Stage();
        } else if (1 == this.Enemy_Common.Battle_Controller.Boss_Stage) {
          var Old_BG = this.Enemy_Common.Battle_Controller.BG_Parent.children[0];
          cc.tween(Old_BG).to(2, {
            opacity: 0
          }).call(function() {
            Old_BG.destroy();
          }).start();
          var New_BG = cc.instantiate(this.Enemy_Common.Battle_Controller.BG_Prefab[7]);
          New_BG.opacity = 0;
          New_BG.parent = this.Enemy_Common.Battle_Controller.BG_Parent;
          cc.tween(New_BG).to(2, {
            opacity: 255
          }).start();
          var Old_Front_BG = this.Enemy_Common.Battle_Controller.Front_BG_Parent.children[0];
          cc.tween(Old_Front_BG).to(2, {
            opacity: 0
          }).call(function() {
            Old_Front_BG.destroy();
          }).start();
          var New_Front_BG = cc.instantiate(this.Enemy_Common.Battle_Controller.Front_BG_Prefab[7]);
          New_Front_BG.opacity = 0;
          New_Front_BG.parent = this.Enemy_Common.Battle_Controller.Front_BG_Parent;
          cc.tween(New_Front_BG).to(2, {
            opacity: 255
          }).start();
          this.Enemy_Common.Noarmal_Change_Stage();
        } else if (2 == this.Enemy_Common.Battle_Controller.Boss_Stage) {
          this.Enemy_Common.Battle_Controller.JoyStick.Joytick_Back();
          this.Enemy_Common.Battle_Controller.UI_Parent.active = false;
          this.Enemy_Common.Battle_Controller.Attack_Button_Parent.children[0].getComponent(this.Enemy_Common.Battle_Controller.Attack_Button_Parent.children[0].name).Cancle_Touch();
          this.Enemy_Common.Battle_Controller.Destroy_Enemy_Bullet();
          this.Enemy_Common.Animation.play(this.node.name + "_Stay");
          this.Enemy_Common.Can_Move = 0;
          this.Enemy_Common.Can_Injured = 0;
          this.Enemy_Common.Stop();
          cc.tween(this.node).to(1, {
            position: cc.v2(1200, 0),
            easing: "quadInOut"
          }).delay(1).call(function() {
            _this2.Enemy_Common.Battle_Controller.Chat_Menu.node.active = true;
            _this2.Enemy_Common.Battle_Controller.Chat_Menu.Chat(_this2.Enemy_Common.Battle_Controller.Enemy_Create.Boss_ID);
          }).start();
        } else this.Enemy_Common.Noarmal_Change_Stage();
      },
      Shoot_String_Sword: function Shoot_String_Sword() {
        var Bullet = cc.instantiate(this.Small_Sword_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 40;
        Bullet.y = this.node.y + 200;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Shoot_Seven_String_Sword: function Shoot_Seven_String_Sword() {
        var Bullet = cc.instantiate(this.Small_Sword_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 200;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Small_Sword_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 450;
        Bullet.y = this.node.y + 200;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Small_Sword_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 450;
        Bullet.y = this.node.y - 200;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Small_Sword_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 700;
        Bullet.y = this.node.y + 400;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Small_Sword_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 700;
        Bullet.y = this.node.y - 400;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Small_Sword_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 200;
        Bullet.y = this.node.y + 600;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Small_Sword_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 200;
        Bullet.y = this.node.y - 600;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Follow_Sword_Bomb: function Follow_Sword_Bomb() {
        var Bo = cc.instantiate(this.Bo_Gold);
        Bo.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Bo.x = this.node.x - 200.802;
        Bo.y = this.node.y + 205.12;
        var Bo = cc.instantiate(this.Bomb_Particle_Big);
        Bo.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Bo.x = this.node.x - 200.802;
        Bo.y = this.node.y + 205.12;
        this.Enemy_Common.Battle_Controller.Camera_Shake_Medium();
        var Bullet = cc.instantiate(this.Enemy_Bullet_Sword_Follow);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 200.802;
        Bullet.y = this.node.y + 205.12;
        Bullet.angle = -45;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Enemy_Bullet_Sword_Follow);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 200.802;
        Bullet.y = this.node.y + 205.12;
        Bullet.angle = 45;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Enemy_Bullet_Sword_Follow);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 200.802;
        Bullet.y = this.node.y + 205.12;
        Bullet.angle = 135;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Enemy_Bullet_Sword_Follow);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 200.802;
        Bullet.y = this.node.y + 205.12;
        Bullet.angle = 225;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Enemy_Bullet_Sword_Follow);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 200.802;
        Bullet.y = this.node.y + 205.12;
        Bullet.angle = 90;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        var Bullet = cc.instantiate(this.Enemy_Bullet_Sword_Follow);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 200.802;
        Bullet.y = this.node.y + 205.12;
        Bullet.angle = -90;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        this.Think_Stage++;
        this.Enemy_Common.Move();
      },
      Shoot_Big_Sword: function Shoot_Big_Sword() {
        var Bullet = cc.instantiate(this.Big_Sword_Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 315.017;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Create_Single_Color_Sword: function Create_Single_Color_Sword(Whitch) {
        switch (Whitch) {
         case 0:
          var Bullet = cc.instantiate(this.Enemy_Bullet_Sword_Crazy);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 300;
          Bullet.y = this.node.y;
          Bullet.angle = 90;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet.getComponent("Enemy_Bullet_Sword_Crazy").Boss_Script = this;
          break;

         case 1:
          var Bullet = cc.instantiate(this.Enemy_Bullet_Sword_Crazy_Red);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x + 300;
          Bullet.y = this.node.y;
          Bullet.angle = -90;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet.getComponent("Enemy_Bullet_Sword_Crazy").Boss_Script = this;
          break;

         case 2:
          var Bullet = cc.instantiate(this.Enemy_Bullet_Sword_Crazy_Blue);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y + 500;
          Bullet.angle = 0;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet.getComponent("Enemy_Bullet_Sword_Crazy").Boss_Script = this;
        }
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_Tetris_Red_Bar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e828cQW/8pBlrgnBLChj9F1", "Boss_Tetris_Red_Bar");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Attack: 0,
        Jingjie: 0,
        Battle_Controller: cc.Node,
        Number: 0,
        Bullet: [ cc.Prefab ]
      },
      End: function End() {
        var Bullet = cc.instantiate(this.Bullet[this.Number]);
        Bullet.parent = this.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = 1200;
        var Script = Bullet.getComponent("Enemy_Bullet_Common");
        Script.Attack = this.Attack;
        Script.Jing_Jie = this.Jingjie;
        Script.Battle_Controller = this.Battle_Controller;
        this.node.destroy();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet[this.Number]);
        Bullet.parent = this.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = 1200;
        var Script = Bullet.getComponent("Enemy_Bullet_Common");
        Script.Attack = this.Attack;
        Script.Jing_Jie = this.Jingjie;
        Script.Battle_Controller = this.Battle_Controller;
      },
      update: function update(dt) {
        this.node.x = this.Battle_Controller.Hero.x + this.Battle_Controller.Hero_Script.Hero_Common.Image_Offset_X;
      }
    });
    cc._RF.pop();
  }, {} ],
  Boss_Tetris: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9c61dXQQGZAFarSu0jMlusY", "Boss_Tetris");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Slow_Tetris_Prefab: [ cc.Prefab ],
        Tetris_Ghost: cc.Prefab,
        Bo_Green: cc.Prefab,
        Absorb_Particle: cc.Prefab,
        Mario: cc.Prefab,
        Cube_Create_Number: 0,
        Mario_Cube: cc.Prefab,
        Mario_Cube_Mushroom: cc.Prefab,
        Mario_Cube_Flower: cc.Prefab,
        Luigi: cc.Prefab,
        Smoke_Particle: cc.ParticleSystem,
        Smoke_Particle_White: cc.ParticleSystem,
        Fire_Particle: cc.ParticleSystem,
        Fire_Short_Particle: cc.ParticleSystem,
        Smoke_Particle_Copy: cc.ParticleSystem,
        Smoke_Particle_White_Copy: cc.ParticleSystem,
        Smoke_Particle_Fire: cc.ParticleSystem,
        Frame_Splinter: cc.Prefab,
        Image_Animation: cc.Animation,
        Rigidbody: cc.RigidBody,
        Word_Bullet: cc.Prefab,
        Boss_Tetris_Red_Bar: cc.Prefab,
        Enemy_BUG: cc.Prefab
      },
      Think: function Think() {
        var _this = this;
        switch (this.Enemy_Common.Battle_Controller.Boss_Stage) {
         case 0:
          if (this.Think_Stage <= 3) {
            this.Shoot();
            this.Single_Tetris_Shoot();
            this.Enemy_Common.Move();
            this.Think_Stage++;
          } else if (4 == this.Think_Stage) {
            this.Animation.play("Boss_Tetris_Angry");
            this.Series_Tetris_Shoot_Ready();
            this.Think_Stage++;
          } else if (5 == this.Think_Stage) {
            this.Animation.play("Boss_Tetris_EX");
            this.Think_Stage++;
          } else if (this.Think_Stage <= 8) {
            this.Shoot();
            this.Single_Tetris_Shoot();
            this.Enemy_Common.Move();
            this.Think_Stage++;
          } else if (9 == this.Think_Stage) {
            this.Animation.play("Boss_Tetris_Angry");
            this.Series_Tetris_Shoot_Ready();
            this.Think_Stage++;
          } else if (10 == this.Think_Stage) {
            this.Animation.play("Boss_Tetris_Angry");
            this.Series_Tetris_Shoot_Ready();
            this.Think_Stage++;
          } else if (11 == this.Think_Stage) {
            this.Animation.play("Boss_Tetris_EX");
            this.Think_Stage = 0;
          }
          break;

         case 1:
          switch (this.Think_Stage) {
           case 0:
            this.Enemy_Common.Have_Special_Change_Stage = 1;
            var Mario = cc.instantiate(this.Mario);
            Mario.parent = this.Enemy_Common.Battle_Controller.Mario_Parent;
            Mario.x = 0;
            Mario.y = -503.969;
            var Script = Mario.getComponent("Mario");
            Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            Script.Attack = this.Enemy_Common.Bullet_Attack;
            Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            this.Think_Stage++;
            this.Enemy_Common.Move();
            break;

           case 1:
            if (this.Enemy_Common.Battle_Controller.Mario_Cube_Parent.children.length < 15) {
              if (2 == this.Cube_Create_Number) {
                var Enemy = cc.instantiate(this.Mario_Cube_Mushroom);
                this.Cube_Create_Number++;
              } else if (5 == this.Cube_Create_Number) {
                var Enemy = cc.instantiate(this.Mario_Cube_Flower);
                this.Cube_Create_Number = 0;
              } else {
                var Enemy = cc.instantiate(this.Mario_Cube);
                this.Cube_Create_Number++;
              }
              Enemy.parent = this.Enemy_Common.Battle_Controller.Mario_Cube_Parent;
              Enemy.x = 1800 * Math.random() - 900;
              Enemy.y = 650 * Math.random() - 375;
              var Enemy_Common_Script = Enemy.getComponent("Enemy_Common");
              Enemy_Common_Script.Have_Coin_Reward = 0;
              Enemy_Common_Script.Have_Rogue_Enegy_Reward = 0;
            }
            this.Enemy_Common.Move();
          }
          break;

         case 2:
          switch (this.Think_Stage) {
           case 0:
            cc.tween(this.node).call(function() {
              var Enemy = cc.instantiate(_this.Enemy_BUG);
              Enemy.parent = _this.Enemy_Common.Battle_Controller.Enemy_Parent;
              Enemy.x = 2100;
              Enemy.y = 500 + 200 * Math.random();
            }).delay(.5).call(function() {
              var Enemy = cc.instantiate(_this.Enemy_BUG);
              Enemy.parent = _this.Enemy_Common.Battle_Controller.Enemy_Parent;
              Enemy.x = 2100;
              Enemy.y = 200 * Math.random() - 100;
            }).delay(.5).call(function() {
              var Enemy = cc.instantiate(_this.Enemy_BUG);
              Enemy.parent = _this.Enemy_Common.Battle_Controller.Enemy_Parent;
              Enemy.x = 2100;
              Enemy.y = -300 - 200 * Math.random();
            }).start();
            this.Animation.play("Boss_Tetris_XX_Attack");
            this.Think_Stage++;
            break;

           case 1:
            this.XX_Up_To_Down_Shoot();
            this.Think_Stage = 0;
          }
        }
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -300;
        Bullet_Common_Script.Ini_Speed_Y = 600;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -400;
        Bullet_Common_Script.Ini_Speed_Y = 400;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -800;
        Bullet_Common_Script.Ini_Speed_Y = 0;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -300;
        Bullet_Common_Script.Ini_Speed_Y = -600;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -400;
        Bullet_Common_Script.Ini_Speed_Y = -400;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -600;
        Bullet_Common_Script.Ini_Speed_Y = -300;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -600;
        Bullet_Common_Script.Ini_Speed_Y = 300;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -700;
        Bullet_Common_Script.Ini_Speed_Y = -200;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -700;
        Bullet_Common_Script.Ini_Speed_Y = 200;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 300;
        Bullet_Common_Script.Ini_Speed_Y = 600;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 400;
        Bullet_Common_Script.Ini_Speed_Y = 400;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 800;
        Bullet_Common_Script.Ini_Speed_Y = 0;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 300;
        Bullet_Common_Script.Ini_Speed_Y = -600;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 400;
        Bullet_Common_Script.Ini_Speed_Y = -400;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 600;
        Bullet_Common_Script.Ini_Speed_Y = -300;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 600;
        Bullet_Common_Script.Ini_Speed_Y = 300;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 700;
        Bullet_Common_Script.Ini_Speed_Y = -200;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 86.396;
        Bullet.y = this.node.y - 53.05;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 700;
        Bullet_Common_Script.Ini_Speed_Y = 200;
        Bullet_Common_Script.Set_Speed();
      },
      Single_Tetris_Shoot: function Single_Tetris_Shoot() {
        var a = Math.floor(Math.random() * this.Slow_Tetris_Prefab.length);
        var Bullet = cc.instantiate(this.Slow_Tetris_Prefab[a]);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = 1959.456 * Math.random() - 988.02;
        Bullet.y = 637.242;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      },
      Series_Tetris_Shoot_Ready: function Series_Tetris_Shoot_Ready() {
        var _this2 = this;
        this.schedule(function() {
          var Particle = cc.instantiate(this.Absorb_Particle);
          Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var t1 = cc.tween;
          t1(Particle).parallel(t1().to(1, {
            position: cc.v2(this.node.x, this.node.y)
          }), t1().to(1, {
            scale: cc.v2(0, 0)
          }), t1().to(1, {
            opacity: 0
          }), t1().by(1, {
            angle: 255
          })).call(function() {
            Particle.destroy();
          }).start();
          var Particle_Script = Particle.getComponent("GBA_Absorb_Item");
          Particle_Script.Target = this.node;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Absorb_Particle);
          Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("GBA_Absorb_Item");
          Particle_Script.Target = this.node;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Absorb_Particle);
          Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("GBA_Absorb_Item");
          Particle_Script.Target = this.node;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Absorb_Particle);
          Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("GBA_Absorb_Item");
          Particle_Script.Target = this.node;
          Particle_Script.Start_Set();
        }, .025, 40, 0);
        var Particle = cc.instantiate(this.Bo_Green);
        Particle.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Particle.setPosition(this.node.x, this.node.y);
        cc.tween(this.node).delay(2).call(function() {
          _this2.Series_Tetris_Shoot();
        }).start();
      },
      Series_Tetris_Shoot: function Series_Tetris_Shoot() {
        var b = 0;
        this.schedule(function() {
          var a = Math.floor(Math.random() * this.Slow_Tetris_Prefab.length);
          var Bullet = cc.instantiate(this.Slow_Tetris_Prefab[a]);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = 280 * b - 980.216;
          Bullet.y = 637.242;
          b++;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        }, .2, 7, 0);
      },
      Wake_Up_Tetris: function Wake_Up_Tetris() {
        if (this.Enemy_Common.Enemy_Bullet_Parent.children.length > 0) for (var i = 0; i < this.Enemy_Common.Enemy_Bullet_Parent.children.length; i++) null != this.Enemy_Common.Enemy_Bullet_Parent.children[i] && 1 == this.Enemy_Common.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common").Is_Tetris && this.Enemy_Common.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Tetris").Wake_Up();
      },
      Half_Hp: function Half_Hp() {
        this.Enemy_Common.Speed = 2 * this.Enemy_Common.Speed;
        if (1 == this.Enemy_Common.Battle_Controller.Boss_Stage) {
          var Mario = cc.instantiate(this.Luigi);
          Mario.parent = this.Enemy_Common.Battle_Controller.Mario_Parent;
          Mario.x = 0;
          Mario.y = -503.969;
          var Script = Mario.getComponent("Mario");
          Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Script.Attack = this.Enemy_Common.Bullet_Attack;
          Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        }
      },
      Special_Change_Stage: function Special_Change_Stage() {
        var _this3 = this;
        this.Enemy_Common.Battle_Controller.JoyStick.Joytick_Back();
        this.Enemy_Common.Battle_Controller.UI_Parent.active = false;
        this.Enemy_Common.Battle_Controller.Attack_Button_Parent.children[0].getComponent(this.Enemy_Common.Battle_Controller.Attack_Button_Parent.children[0].name).Cancle_Touch();
        this.Enemy_Common.Battle_Controller.Destroy_Enemy_Bullet();
        this.Enemy_Common.Animation.play(this.node.name + "_Stay");
        this.Enemy_Common.Can_Move = 0;
        this.Enemy_Common.Can_Injured = 0;
        this.Enemy_Common.Stop();
        cc.tween(this.node).to(1, {
          position: cc.v2(1200, 0),
          easing: "quadInOut"
        }).delay(1).call(function() {
          _this3.Enemy_Common.Battle_Controller.Chat_Menu.node.active = true;
          _this3.Enemy_Common.Battle_Controller.Chat_Menu.Chat(_this3.Enemy_Common.Battle_Controller.Enemy_Create.Boss_ID);
        }).start();
        for (var i = 0; i < this.Enemy_Common.Battle_Controller.Mario_Cube_Parent.children.length; i++) this.Enemy_Common.Battle_Controller.Mario_Cube_Parent.children[i].destroy();
        for (var i = 0; i < this.Enemy_Common.Battle_Controller.Mario_Parent.children.length; i++) this.Enemy_Common.Battle_Controller.Mario_Parent.children[i].destroy();
      },
      Smoke_And_Create_Splinter: function Smoke_And_Create_Splinter() {
        this.Smoke_Particle.node.active = true;
        this.Smoke_Particle.emissionRate = 10;
        this.Smoke_Particle_White.node.active = true;
        this.Smoke_Particle_White.emissionRate = 10;
        this.Fire_Particle.node.active = true;
        this.Fire_Particle.emissionRate = 5;
        this.Fire_Short_Particle.node.active = true;
        this.Fire_Short_Particle.emissionRate = 5;
        this.Smoke_Particle_Copy.node.active = true;
        this.Smoke_Particle_Copy.emissionRate = 5;
        this.Smoke_Particle_White_Copy.node.active = true;
        this.Smoke_Particle_White_Copy.emissionRate = 5;
        this.Smoke_Particle_Fire.node.active = true;
        this.Smoke_Particle_Fire.emissionRate = 5;
        var Frame_Splinter = cc.instantiate(this.Frame_Splinter);
        Frame_Splinter.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        this.Enemy_Common.Is_Special = 1;
        this.Image_Animation.play();
        this.Rigidbody.angularVelocity = -120;
      },
      Special_Move_Content: function Special_Move_Content() {
        var _this4 = this;
        if (1 == this.Enemy_Common.Can_Move && 0 == this.Enemy_Common.Is_Vertigo) {
          if (this.node.x > this.Enemy_Common.Battle_Controller.Hero.x) {
            var Dis_X = Math.floor(Math.random() * (2 * this.Enemy_Common.Right_Bound + 1) - this.Enemy_Common.Right_Bound);
            var Dis_Y = Math.floor(Math.random() * (this.Enemy_Common.Up_Bound - this.Enemy_Common.Down_Bound + 1) + this.Enemy_Common.Down_Bound);
          } else {
            var Dis_X = this.Enemy_Common.Battle_Controller.Hero.x + 100 * Math.random();
            var Dis_Y = this.Enemy_Common.Battle_Controller.Hero.y + 1001 * Math.random() - 500;
          }
          var Dis = Math.sqrt(Math.pow(Dis_X - this.node.x, 2) + Math.pow(Dis_Y - this.node.y, 2));
          var time = Dis / (this.Enemy_Common.Speed * this.Enemy_Common.Speed_Ratio);
          cc.tween(this.node).to(1 * time, {
            position: cc.v2(Dis_X, Dis_Y)
          }, {
            easing: "quintInOut"
          }).call(function() {
            if (0 == _this4.Enemy_Common.Is_Interrupting) {
              _this4.Enemy_Common.Move_Stage++;
              _this4.Think();
            }
          }).start();
        }
      },
      XX_Shoot: function XX_Shoot() {
        var Bullet = cc.instantiate(this.Word_Bullet);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 15;
        Bullet.y = this.node.y;
        Bullet.angle = this.node.angle;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 500 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 500 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Word_Bullet);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 15;
        Bullet.y = this.node.y;
        Bullet.angle = this.node.angle + 72;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 500 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 500 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Tetris_Word");
        Bullet_Script.Sprite.spriteFrame = Bullet_Script.SpriteFrame[1];
        var Bullet = cc.instantiate(this.Word_Bullet);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 15;
        Bullet.y = this.node.y;
        Bullet.angle = this.node.angle + 144;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 500 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 500 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Tetris_Word");
        Bullet_Script.Sprite.spriteFrame = Bullet_Script.SpriteFrame[2];
        var Bullet = cc.instantiate(this.Word_Bullet);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 15;
        Bullet.y = this.node.y;
        Bullet.angle = this.node.angle + 216;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 500 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 500 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Tetris_Word");
        Bullet_Script.Sprite.spriteFrame = Bullet_Script.SpriteFrame[3];
        var Bullet = cc.instantiate(this.Word_Bullet);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 15;
        Bullet.y = this.node.y;
        Bullet.angle = this.node.angle + 288;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = 500 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 500 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Tetris_Word");
        Bullet_Script.Sprite.spriteFrame = Bullet_Script.SpriteFrame[4];
      },
      XX_Up_To_Down_Shoot: function XX_Up_To_Down_Shoot() {
        var _this5 = this;
        cc.tween(this.node).call(function() {
          var Boss_Tetris_Red_Bar = cc.instantiate(_this5.Boss_Tetris_Red_Bar);
          Boss_Tetris_Red_Bar.parent = _this5.Enemy_Common.Battle_Controller.Thunder_Red_Parent;
          Boss_Tetris_Red_Bar.x = _this5.Enemy_Common.Battle_Controller.Hero.x + _this5.Enemy_Common.Battle_Controller.Hero_Script.Hero_Common.Image_Offset_X;
          Boss_Tetris_Red_Bar.y = 0;
          var Script = Boss_Tetris_Red_Bar.getComponent("Boss_Tetris_Red_Bar");
          _this5.Enemy_Common.Bullet_Attack_Count();
          Script.Attack = _this5.Enemy_Common.Bullet_Attack;
          Script.Jing_Jie = _this5.Enemy_Common.Enemy_Jing_Jie;
          Script.Battle_Controller = _this5.Enemy_Common.Battle_Controller;
          Script.Number = 0;
        }).call(function() {
          _this5.Animation.play("Boss_Tetris_XX_Attack_Stage_2");
        }).delay(5).call(function() {
          var Boss_Tetris_Red_Bar = cc.instantiate(_this5.Boss_Tetris_Red_Bar);
          Boss_Tetris_Red_Bar.parent = _this5.Enemy_Common.Battle_Controller.Thunder_Red_Parent;
          Boss_Tetris_Red_Bar.x = _this5.Enemy_Common.Battle_Controller.Hero.x + _this5.Enemy_Common.Battle_Controller.Hero_Script.Hero_Common.Image_Offset_X;
          Boss_Tetris_Red_Bar.y = 0;
          var Script = Boss_Tetris_Red_Bar.getComponent("Boss_Tetris_Red_Bar");
          _this5.Enemy_Common.Bullet_Attack_Count();
          Script.Attack = _this5.Enemy_Common.Bullet_Attack;
          Script.Jing_Jie = _this5.Enemy_Common.Enemy_Jing_Jie;
          Script.Battle_Controller = _this5.Enemy_Common.Battle_Controller;
          Script.Number = 1;
        }).call(function() {
          _this5.Animation.play("Boss_Tetris_XX_Attack_Stage_2");
        }).delay(5).call(function() {
          var Boss_Tetris_Red_Bar = cc.instantiate(_this5.Boss_Tetris_Red_Bar);
          Boss_Tetris_Red_Bar.parent = _this5.Enemy_Common.Battle_Controller.Thunder_Red_Parent;
          Boss_Tetris_Red_Bar.x = _this5.Enemy_Common.Battle_Controller.Hero.x + _this5.Enemy_Common.Battle_Controller.Hero_Script.Hero_Common.Image_Offset_X;
          Boss_Tetris_Red_Bar.y = 0;
          var Script = Boss_Tetris_Red_Bar.getComponent("Boss_Tetris_Red_Bar");
          _this5.Enemy_Common.Bullet_Attack_Count();
          Script.Attack = _this5.Enemy_Common.Bullet_Attack;
          Script.Jing_Jie = _this5.Enemy_Common.Enemy_Jing_Jie;
          Script.Battle_Controller = _this5.Enemy_Common.Battle_Controller;
          Script.Number = 2;
        }).call(function() {
          _this5.Animation.play("Boss_Tetris_XX_Attack_Stage_2");
        }).delay(5).delay(5).call(function() {
          _this5.Animation.play("Boss_Tetris_XX_Attack");
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_Tips: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f55dexbnSRBTrNuRqEFCGNf", "Boss_Tips");
    "use strict";
    var Enemy_Create = require("Enemy_Create");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Create: Enemy_Create
      },
      Out: function Out() {
        this.Enemy_Create.Enemy_Create();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Create: "Enemy_Create"
  } ],
  Boss_Water_Fire_Defend: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "825a2nJ14NEo66wl+hBu/5V", "Boss_Water_Fire_Defend");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Boss_Water_Fire_Stage_2_Bullet_2: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f7260+AallJIKdwKSt3GnvX", "Boss_Water_Fire_Stage_2_Bullet_2");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Now_Speed: 0,
        a: 0
      },
      start: function start() {
        this.schedule(function() {
          this.Now_Speed += this.a;
          this.a -= 5;
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Water_Fire_Stage_2_Bullet_Big: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d2d7auagoxFMLfxuwOm+uaU", "Boss_Water_Fire_Stage_2_Bullet_Big");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Is_Water: 0,
        Fire_Bullet: cc.Prefab,
        Water_Bullet: cc.Prefab,
        Fire_Somoke: cc.Prefab,
        Water_Somoke: cc.Prefab
      },
      Start_Set: function Start_Set() {
        var dir = cc.v2(this.node.x, this.node.y);
        var radian = Math.atan2(dir.y, dir.x);
        var angle = radian / Math.PI * 180;
        this.Enemy_Bullet_Common.Ini_Speed = 1e4 * Math.cos(angle * Math.PI / 180) * -1;
        this.Enemy_Bullet_Common.Ini_Speed_Y = 1e4 * Math.sin(angle * Math.PI / 180) * -1;
        this.Enemy_Bullet_Common.Set_Speed();
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy_Bullet" == otherCollider.node.group && "Boss_Fire_Stage_2_Bullet_Big" == otherCollider.node.name && 1 == this.Is_Water) {
          this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          var Particle = cc.instantiate(this.Fire_Somoke);
          Particle.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(0, 0);
          var Particle = cc.instantiate(this.Water_Somoke);
          Particle.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(0, 0);
          var Start_Angle = 360 * Math.random();
          if (3 == this.Enemy_Bullet_Common.Special_Number) for (var i = 0; i < 20; i++) {
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 20;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 20 + 5;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          } else if (2 == this.Enemy_Bullet_Common.Special_Number) for (var i = 0; i < 10; i++) {
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 2;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 4;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 6;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 8;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 10;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 12;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 14;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          } else if (1 == this.Enemy_Bullet_Common.Special_Number) for (var i = 0; i < 5; i++) {
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + -5;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -20;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 5;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 20;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 10;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 40;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 15;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 60;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 20;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 80;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 25;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 80;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 30;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 60;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 35;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 40;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 40;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 20;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 45;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 50;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -20;
          } else if (0 == this.Enemy_Bullet_Common.Special_Number) for (var i = 0; i < 5; i++) {
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 - 5;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 20;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 5;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -20;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 10;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -40;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 15;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -60;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 20;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -80;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 25;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -80;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 30;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -60;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 35;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -40;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 40;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -20;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 45;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 5 + 50;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = 20;
          } else if (4 == this.Enemy_Bullet_Common.Special_Number) for (var i = 0; i < 10; i++) {
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 2;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 4;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 6;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 8;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 10;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 12;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = Start_Angle + 360 * i / 10 + 14;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
          } else for (var i = 0; i < 30; i++) {
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = 360 * Math.random();
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
            var Bullet = cc.instantiate(this.Water_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.x = 0;
            Bullet.y = 0;
            Bullet.angle = 360 * Math.random();
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            var Script = Bullet.getComponent("Boss_Water_Fire_Stage_2_Bullet_2");
            Script.Now_Speed = -1 * Math.random() * 300 + 200;
          }
          otherCollider.node.getComponent("Enemy_Bullet_Common").Must_Destroy();
          this.Enemy_Bullet_Common.Must_Destroy();
        }
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Water_First_Heart_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "85d77v+KoRAcqiowshgsysx", "Boss_Water_First_Heart_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Target_X: [ cc.Float ],
        Target_Y: [ cc.Float ],
        Number: 0,
        Now_Speed: 0,
        a: 0
      },
      Start_Set: function Start_Set() {
        this.Target_X = [ 0, 10.33, 21.383, 38.378, 60.024, 86.636, 112.868, 135.896, 154.491, 167.343, 174.419, 174.419, 170.402, 157.266, 139.002, 118.641, 96.665, 74.497, 53.937, 34.918, 16.534, 6.834 ];
        this.Target_Y = [ 51.679, 71.773, 95.037, 114.245, 128.788, 136.129, 133.376, 120.217, 102.299, 79.639, 54.638, 28.221, 1.835, -21.297, -40.237, -56.582, -69.818, -83.536, -99.254, -116.164, -134.628, -158.877 ];
        var t = cc.tween;
        t(this.node).parallel(t().to(4, {
          x: 1.2 * this.Target_X[this.Number] + 20
        }), t().to(4, {
          y: 1.2 * this.Target_Y[this.Number] + 20
        }, {
          easing: "quadInOut"
        })).start();
      },
      Shoot: function Shoot() {
        var _this = this;
        this.Enemy_Bullet_Common.Can_Destroy = 1;
        if (null != this.Enemy_Bullet_Common.Battle_Controller.Hero) {
          this.Target = this.Enemy_Bullet_Common.Battle_Controller.Hero;
          var dir = cc.v2(this.node.x, this.node.y);
          var radian = Math.atan2(dir.y, dir.x);
          cc.tween(this.node).to(.3, {
            angle: radian / Math.PI * 180
          }, {
            easing: "backInOut"
          }).call(function() {
            _this.Set_Speed();
          }).start();
        } else this.Enemy_Bullet_Common.RigidBody.linearVelocity = cc.v2(-500, 0);
      },
      Set_Speed: function Set_Speed() {
        this.a = 30;
        this.schedule(function() {
          this.Now_Speed += this.a;
          this.a -= 5;
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Water_Second_Heart_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1d32Ye3btL3bYLQbnu2+u3", "Boss_Water_Second_Heart_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Target_X: [ cc.Float ],
        Target_Y: [ cc.Float ],
        Number: 0,
        Now_Speed: 0,
        a: 0,
        Wait_Time: 0
      },
      Start_Set: function Start_Set() {},
      Shoot: function Shoot() {
        var _this = this;
        this.Enemy_Bullet_Common.Can_Destroy = 1;
        cc.tween(this.node).delay(this.Wait_Time).call(function() {
          if (null != _this.Enemy_Bullet_Common.Battle_Controller.Hero) {
            _this.Target = _this.Enemy_Bullet_Common.Battle_Controller.Hero;
            var dir = cc.v2(_this.node.x - _this.Target.x, _this.node.y - _this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            _this.node.angle = radian / Math.PI * 180;
            _this.Set_Speed();
          } else _this.Enemy_Bullet_Common.RigidBody.linearVelocity = cc.v2(-500, 0);
        }).start();
      },
      Set_Speed: function Set_Speed() {
        this.a = -50;
        this.schedule(function() {
          this.Now_Speed += this.a;
          this.a += 5;
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Water_Stage_2_Bullet_1: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1a4f4rjL3dDNok468xf/b8+", "Boss_Water_Stage_2_Bullet_1");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Now_Speed: 0,
        Angular_Speed: 0,
        Target: cc.Node
      },
      Start_Set: function Start_Set() {
        this.node.scale = 1 * Math.random() + .25;
        this.Now_Speed = 800 * Math.random() + 400;
        this.Angular_Speed = .4 * Math.random() + .1;
        this.schedule(function() {
          if (null == this.Target || "" == this.Target.name) {
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Set_Speed();
            cc.tween(this.node).delay(1e-5).to(Math.abs(0 - this.node.angle) / this.Angular_Speed, {
              angle: 0
            }, {
              easing: "quadOut"
            }).start();
          } else {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
            this.Target.y < this.node.y ? this.node.angle += this.Angular_Speed : this.node.angle -= this.Angular_Speed;
          }
        }, .01);
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy_Bullet" == otherCollider.node.group && "Boss_Fire_Stage_2_Bullet_1" == otherCollider.node.name && 0 == this.Enemy_Bullet_Common.Is_Mozu_Blackhole_Absorbing) {
          var Ohter = otherCollider.node.getComponent("Enemy_Bullet_Common");
          null != Ohter && Ohter.Be_Destroy();
          this.Enemy_Bullet_Common.Be_Destroy();
        }
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        "Special" == other.node.group && "Boss_Fire_Defend" == other.node.name && 0 == this.Enemy_Bullet_Common.Is_Mozu_Blackhole_Absorbing && this.Enemy_Bullet_Common.Be_Destroy();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Water_Third_Heart_Bullet_Child: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1f393hyFFhK26q7rW9mw8C3", "Boss_Water_Third_Heart_Bullet_Child");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Now_Speed: 0,
        a: 0,
        Angle_Add_Number: 0
      },
      Set_Speed: function Set_Speed() {
        var _this = this;
        this.Enemy_Bullet_Common.Can_Destroy = 1;
        var Ini_Angle = this.node.angle;
        cc.tween(this.node).to(8, {
          angle: Ini_Angle - 810
        }, {
          easing: "quadInOut"
        }).call(function() {
          _this.Enemy_Bullet_Common.Can_Bound_Destroy = 1;
        }).start();
        this.a = 35;
        this.schedule(function() {
          if (Math.abs(this.Now_Speed) <= 2e3) {
            this.Now_Speed += this.a;
            this.a += .5;
          }
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Water_Third_Heart_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3e185g6o+VNOK6lk5EiquQT", "Boss_Water_Third_Heart_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Hero_X: 0,
        Hero_Y: 0,
        Target_X: [ cc.Float ],
        Target_Y: [ cc.Float ],
        Target_Angle: [ cc.Float ],
        Heart_Move_Stage: 0,
        Number: 0,
        Now_Speed: 0,
        a: 0,
        Child_Bullet: cc.Prefab,
        Create_Bullet_Schedule: cc.Schedule,
        Angle_Add_Number: 0
      },
      start: function start() {
        this.Target_X = [ 11.052, 42.633, 42.633, 84.741, 135.211, 187.915, 239.424, 284.052, 317.087, 334.522, 338.47, 332.046, 314.128, 280.851, 236.055, 188.337, 143.709, 104.387, 72.269, 45.657, 30.525, 23.384 ];
        this.Target_Y = [ 151.436, 194.201, 194.201, 226.439, 245.71, 253.83, 241.589, 213.027, 170.815, 120.344, 65.736, 11.595, -39.6, -80.556, -111.273, -137.885, -171.802, -207.554, -250.683, -299.318, -350.637, -404.19 ];
        this.Target_Angle = [ 120, 110, 110, 90, 80, 60, 40, 20, 0, -20, -30, -40, -60, -80, -90, -90, -80, -70, -50, -50, -40, -35 ];
        this.Hero_X = this.Enemy_Bullet_Common.Battle_Controller.Hero.x;
        this.Hero_Y = this.Enemy_Bullet_Common.Battle_Controller.Hero.y;
        this.Create_Bullet_Schedule = function() {
          var Bullet = cc.instantiate(this.Child_Bullet);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = this.node.angle - 60;
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        };
        this.schedule(this.Create_Bullet_Schedule, .05);
        this.Heart_Move();
      },
      Heart_Move: function Heart_Move() {
        var _this = this;
        var dx = this.Hero_X + this.Target_X[this.Heart_Move_Stage] - this.node.x;
        var dy = this.Hero_Y + this.Target_Y[this.Heart_Move_Stage] - this.node.y - 30;
        var distance = Math.sqrt(dx * dx + dy * dy);
        var time = distance / 1e3;
        cc.tween(this.node).to(time, {
          position: cc.v2(this.Hero_X + this.Target_X[this.Heart_Move_Stage], this.Hero_Y + this.Target_Y[this.Heart_Move_Stage] - 30),
          angle: this.Target_Angle[this.Heart_Move_Stage]
        }).call(function() {
          if (_this.Heart_Move_Stage < 21) {
            _this.Heart_Move_Stage++;
            _this.Heart_Move();
          } else {
            _this.unschedule(_this.Create_Bullet_Schedule);
            _this.Shoot();
          }
        }).start();
      },
      Shoot: function Shoot() {
        for (var i = 0; i < this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) {
          var Script = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Boss_Water_Third_Heart_Bullet_Child");
          null != Script && Script.Set_Speed();
        }
        var Ini_Angle = this.node.angle;
        cc.tween(this.node).to(8, {
          angle: Ini_Angle - 810
        }, {
          easing: "quadInOut"
        }).start();
        this.a = 0;
        this.schedule(function() {
          if (Math.abs(this.Now_Speed) <= 2e3) {
            this.Now_Speed += this.a;
            this.a += 1;
          }
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos((this.node.angle - 90) * Math.PI / 180);
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin((this.node.angle - 90) * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_Water: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9b2edlZ9pHm5HZtHJ3r3I3", "Boss_Water");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Water_Back_Particle: cc.ParticleSystem,
        First_Fire_Bullet: cc.Prefab,
        First_Water_Bullet: cc.Prefab,
        First_Fire_Particle: cc.Prefab,
        First_Water_Particle: cc.Prefab,
        Fire_Bullet_Number: 0,
        Water_Bullet_Number: 0,
        Second_Water_Heart_X: [ cc.Float ],
        Second_Water_Heart_Y: [ cc.Float ],
        Second_Water_Bullet: cc.Prefab,
        Second_Water_Particle: cc.Prefab,
        Second_Fire_Bullet: cc.Prefab,
        Second_Fire_Particle: cc.Prefab,
        Third_Water_Bullet: cc.Prefab,
        Third_Fire_Bullet: cc.Prefab,
        Boss_Fire: cc.Prefab,
        Fire_Enemy_Common: cc.Prefab,
        Fire_Script: cc.Node,
        Move_Stage: 0,
        Purple_Bomb_Smoke: cc.Prefab,
        Bo: cc.Prefab,
        Left_Fire_Particle: cc.Prefab,
        Right_Water_Particle: cc.Prefab,
        Boss_Fire_Stage_2_Bullet_1: cc.Prefab,
        Boss_Water_Stage_2_Bullet_1: cc.Prefab,
        Stage_2_Bullet_1_Number: 0,
        Stage_2_Bullet_1_Schedule: cc.Schedule,
        Stage_2_Red_Bar: cc.Prefab,
        Stage_2_Red_Bar_Number: 0
      },
      start: function start() {
        this.Second_Water_Heart_X = [ 25.898, 37.749, 63.816, 86.363, 108.075, 127.321, 149.981, 174.473, 187.637, 188.99, 174.987, 154.618, 135.461, 118.972, 103.937, 94.991, 77.532, 57.577, 38.299, 0 ];
        this.Second_Water_Heart_Y = [ -281.936, -258.691, -250.364, -264.51, -279.787, -264.314, -251.124, -258.399, -280.455, -305.821, -326.955, -341.505, -354.115, -368.422, -389.276, -368.422, -354.115, -341.601, -327.396, -300 ];
        this.Create_Fire();
        this.Stage_2_Bullet_1_Schedule = function() {
          if (this.Stage_2_Bullet_1_Number < 20) {
            var Bullet = cc.instantiate(this.Boss_Fire_Stage_2_Bullet_1);
            Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            this.Enemy_Common.Bullet_Attack_Count();
            Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            Bullet.x = -2100;
            Bullet.y = this.Fire_Enemy_Common.node.y + 400 * Math.random() - 200;
            var Bullet_Script = Bullet.getComponent("Boss_Fire_Stage_2_Bullet_1");
            Bullet_Script.Target = this.node;
            Bullet_Script.Start_Set();
            var Bullet = cc.instantiate(this.Boss_Water_Stage_2_Bullet_1);
            Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            this.Enemy_Common.Bullet_Attack_Count();
            Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            Bullet.x = 2100;
            Bullet.y = this.node.y + 400 * Math.random() - 200;
            var Bullet_Script = Bullet.getComponent("Boss_Water_Stage_2_Bullet_1");
            Bullet_Script.Target = this.Fire_Enemy_Common.node;
            Bullet_Script.Start_Set();
            this.Stage_2_Bullet_1_Number++;
          } else {
            this.unschedule(this.Stage_2_Bullet_1_Schedule);
            this.Stage_2_Bullet_1_Number = 0;
            this.Special_Move_Content();
          }
        };
      },
      Create_Fire: function Create_Fire() {
        var Fire = cc.instantiate(this.Boss_Fire);
        Fire.parent = this.Enemy_Common.Battle_Controller.Enemy_Parent;
        Fire.x = 1400;
        Fire.y = 1600;
        this.Fire_Enemy_Common = Fire.getComponent("Enemy_Common");
        this.Fire_Enemy_Common.Main_Boss_Enemy_Common = this.Enemy_Common;
        this.Fire_Script = Fire.getComponent("Boss_Fire");
        cc.tween(Fire).to(1, {
          position: cc.v2(this.Fire_Enemy_Common.Boss_Start_Position_X, this.Fire_Enemy_Common.Boss_Start_Position_Y),
          easing: "quadInOut"
        }).start();
      },
      Think: function Think() {
        var _this = this;
        switch (this.Enemy_Common.Battle_Controller.Boss_Stage) {
         case 0:
          this.Fire_Script.Enemy_Common.Can_Injured = 1;
          switch (this.Think_Stage) {
           case 0:
            this.First_Heart_Attack();
            this.Think_Stage++;
            break;

           case 1:
            this.Second_Heart_Attack();
            this.Think_Stage++;
            break;

           case 2:
            this.Third_Heart_Attack();
            this.Think_Stage = 0;
          }
          break;

         case 1:
          switch (this.Think_Stage) {
           case 0:
            this.Fire_Script.RigidBody.enabledContractListener = true;
            this.Fire_Script.BoxCollider.enabled = true;
            this.Animation.play("Boss_Water_Angry");
            this.Fire_Script.Animation.play("Boss_Fire_Angry");
            var Particle = cc.instantiate(this.Left_Fire_Particle);
            Particle.parent = this.Enemy_Common.Particle_Parent;
            Particle.setPosition(-2e3, 0);
            var Particle = cc.instantiate(this.Right_Water_Particle);
            Particle.parent = this.Enemy_Common.Particle_Parent;
            Particle.setPosition(2e3, 0);
            this.Think_Stage++;
            this.Special_Move_Content();
            break;

           case 1:
           case 2:
            this.schedule(this.Stage_2_Bullet_1_Schedule, .2);
            this.Think_Stage++;
            break;

           case 3:
            this.Enemy_Common.Battle_Controller.Destroy_Enemy_Bullet();
            this.Think_Stage++;
            this.Special_Move_Content();
            break;

           case 4:
           case 5:
           case 6:
           case 7:
           case 8:
            var Stage_2_Red_Bar = cc.instantiate(this.Stage_2_Red_Bar);
            Stage_2_Red_Bar.parent = this.Enemy_Common.Battle_Controller.Thunder_Red_Parent;
            Stage_2_Red_Bar.x = 0;
            Stage_2_Red_Bar.y = 0;
            var Script = Stage_2_Red_Bar.getComponent("Boss_Fire_Water_Stage_2_Red_Bar");
            this.Enemy_Common.Bullet_Attack_Count();
            Script.Attack = this.Enemy_Common.Bullet_Attack;
            Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            Script.Number = this.Stage_2_Red_Bar_Number;
            this.Think_Stage++;
            this.Stage_2_Red_Bar_Number >= 5 ? this.Stage_2_Red_Bar_Number = 0 : this.Stage_2_Red_Bar_Number++;
            cc.tween(this.node).delay(1.5).call(function() {
              _this.Special_Move_Content();
            }).start();
            break;

           case 9:
            var Stage_2_Red_Bar = cc.instantiate(this.Stage_2_Red_Bar);
            Stage_2_Red_Bar.parent = this.Enemy_Common.Battle_Controller.Thunder_Red_Parent;
            Stage_2_Red_Bar.x = 0;
            Stage_2_Red_Bar.y = 0;
            var Script = Stage_2_Red_Bar.getComponent("Boss_Fire_Water_Stage_2_Red_Bar");
            this.Enemy_Common.Bullet_Attack_Count();
            Script.Attack = this.Enemy_Common.Bullet_Attack;
            Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            Script.Number = this.Stage_2_Red_Bar_Number;
            this.Stage_2_Red_Bar_Number >= 5 ? this.Stage_2_Red_Bar_Number = 0 : this.Stage_2_Red_Bar_Number++;
            this.Think_Stage = 1;
            cc.tween(this.node).delay(1.5).call(function() {
              _this.Special_Move_Content();
            }).start();
          }
        }
      },
      First_Heart_Attack: function First_Heart_Attack() {
        var _this2 = this;
        this.Animation.play("Boss_Water_Attack");
        this.Fire_Script.Animation.play("Boss_Fire_Attack");
        this.Water_Back_Particle.emissionRate = 20;
        this.Fire_Script.Back_Particle.emissionRate = 20;
        var Particle = cc.instantiate(this.First_Fire_Particle);
        Particle.parent = this.Enemy_Common.Particle_Parent;
        Particle.setPosition(0, 1209.391);
        var Particle = cc.instantiate(this.First_Water_Particle);
        Particle.parent = this.Enemy_Common.Particle_Parent;
        Particle.setPosition(0, -1145.366);
        this.Fire_Bullet_Number = 0;
        this.schedule(function() {
          var Bullet = cc.instantiate(this.First_Fire_Bullet);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var Script = Bullet.getComponent("Boss_Fire_First_Heart_Bullet");
          Script.Number = this.Fire_Bullet_Number;
          if (Script.Number <= 15) {
            Bullet.x = 2200 - 300 * this.Fire_Bullet_Number;
            Bullet.y = 1e3;
          } else {
            Bullet.x = 2200;
            Bullet.y = 350 * (this.Fire_Bullet_Number - 15) - 1e3;
          }
          this.Fire_Bullet_Number++;
          Script.Start_Set();
        }, .1, 21);
        this.Water_Bullet_Number = 0;
        this.schedule(function() {
          var Bullet = cc.instantiate(this.First_Water_Bullet);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var Script = Bullet.getComponent("Boss_Water_First_Heart_Bullet");
          Script.Number = this.Water_Bullet_Number;
          this.Water_Bullet_Number++;
          if (Script.Number <= 15) {
            Bullet.x = 300 * this.Water_Bullet_Number - 2200;
            Bullet.y = -1e3;
          } else {
            Bullet.x = -2200;
            Bullet.y = 1e3 - 350 * (this.Fire_Bullet_Number - 15);
          }
          Script.Start_Set();
        }, .1, 21);
        cc.tween(this.node).delay(7).call(function() {
          for (var i = 0; i < _this2.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) {
            var Script = _this2.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Boss_Water_First_Heart_Bullet");
            if (null != Script) Script.Shoot(); else {
              var Script = _this2.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Boss_Fire_First_Heart_Bullet");
              null != Script && Script.Shoot();
            }
          }
        }).delay(3).call(function() {
          _this2.Water_Back_Particle.emissionRate = 0;
          _this2.Fire_Script.Back_Particle.emissionRate = 0;
          _this2.Animation.play("Boss_Water_Stay");
          _this2.Fire_Enemy_Common.Animation.play("Boss_Fire_Stay");
          _this2.Special_Move_Content();
        }).start();
      },
      Second_Heart_Attack: function Second_Heart_Attack() {
        var _this3 = this;
        this.Animation.play("Boss_Water_Attack");
        this.Fire_Script.Animation.play("Boss_Fire_Attack");
        this.Water_Back_Particle.emissionRate = 20;
        this.Fire_Script.Back_Particle.emissionRate = 20;
        var Particle = cc.instantiate(this.Second_Water_Particle);
        Particle.parent = this.Enemy_Common.Particle_Parent;
        Particle.setPosition(250, -1145.366);
        var Particle = cc.instantiate(this.Second_Fire_Particle);
        Particle.parent = this.Enemy_Common.Particle_Parent;
        Particle.setPosition(-250, 1145.366);
        this.Water_Bullet_Number = 0;
        this.Fire_Bullet_Number = 0;
        this.schedule(function() {
          var Bullet = cc.instantiate(this.Second_Water_Bullet);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var Script = Bullet.getComponent("Boss_Water_Second_Heart_Bullet");
          Script.Number = this.Water_Bullet_Number;
          this.Water_Bullet_Number++;
          if (Script.Number <= 15) {
            Bullet.x = 200;
            Bullet.y = 50 * Script.Number - 1e3;
          } else if (Script.Number > 15 && Script.Number <= 34) {
            Bullet.x = 1.5 * this.Second_Water_Heart_X[Script.Number - 15] + 200;
            Bullet.y = 1.5 * this.Second_Water_Heart_Y[Script.Number - 15];
          } else {
            Bullet.x = 200;
            Bullet.y = 50 * (Script.Number - 34) - 300;
          }
          Script.Wait_Time = .1 * Script.Number;
        }, .04, 38);
        this.schedule(function() {
          var Bullet = cc.instantiate(this.Second_Fire_Bullet);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          var Script = Bullet.getComponent("Boss_Water_Second_Heart_Bullet");
          Script.Number = this.Water_Bullet_Number;
          this.Fire_Bullet_Number++;
          if (Script.Number <= 15) {
            Bullet.x = -200;
            Bullet.y = 1e3 - 50 * Script.Number;
          } else if (Script.Number > 15 && Script.Number <= 34) {
            Bullet.x = -1 * (1.5 * this.Second_Water_Heart_X[Script.Number - 15] + 200);
            Bullet.y = 1.5 * this.Second_Water_Heart_Y[Script.Number - 15] + 700;
          } else {
            Bullet.x = -200;
            Bullet.y = 300 - 50 * (Script.Number - 34);
          }
          Script.Wait_Time = .1 * Script.Number;
        }, .04, 38);
        cc.tween(this.node).delay(2.5).call(function() {
          for (var i = 0; i < _this3.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) {
            var Script = _this3.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Boss_Water_Second_Heart_Bullet");
            null != Script && Script.Shoot();
          }
        }).delay(8).call(function() {
          _this3.Water_Back_Particle.emissionRate = 0;
          _this3.Fire_Script.Back_Particle.emissionRate = 0;
          _this3.Animation.play("Boss_Water_Stay");
          _this3.Fire_Enemy_Common.Animation.play("Boss_Fire_Stay");
          _this3.Special_Move_Content();
        }).start();
      },
      Third_Heart_Attack: function Third_Heart_Attack() {
        var _this4 = this;
        this.Animation.play("Boss_Water_Attack");
        this.Fire_Script.Animation.play("Boss_Fire_Attack");
        this.Water_Back_Particle.emissionRate = 20;
        this.Fire_Script.Back_Particle.emissionRate = 20;
        var Bullet = cc.instantiate(this.Third_Water_Bullet);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet.setPosition(this.Enemy_Common.Battle_Controller.Hero.x, this.Enemy_Common.Battle_Controller.Hero.y + 151.436);
        var Bullet = cc.instantiate(this.Third_Fire_Bullet);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet.setPosition(this.Enemy_Common.Battle_Controller.Hero.x, this.Enemy_Common.Battle_Controller.Hero.y + 151.436);
        cc.tween(this.node).delay(5).call(function() {
          _this4.Water_Back_Particle.emissionRate = 0;
          _this4.Fire_Script.Back_Particle.emissionRate = 0;
          _this4.Animation.play("Boss_Water_Stay");
          _this4.Fire_Enemy_Common.Animation.play("Boss_Fire_Stay");
          _this4.Special_Move_Content();
        }).start();
      },
      Half_Hp: function Half_Hp() {
        this.Enemy_Common.Speed = 3 * this.Enemy_Common.Speed;
      },
      Special_Move_Content: function Special_Move_Content() {
        var _this5 = this;
        switch (this.Enemy_Common.Battle_Controller.Boss_Stage) {
         case 0:
          switch (this.Move_Stage) {
           case 0:
            cc.tween(this.node).to(.5, {
              position: cc.v2(1200, 0)
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Fire_Script.node).to(.5, {
              position: cc.v2(800, 0)
            }, {
              easing: "quadInOut"
            }).start();
            this.Move_Stage++;
            break;

           case 1:
            cc.tween(this.node).to(.5, {
              position: cc.v2(1e3, 200)
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Fire_Script.node).to(.5, {
              position: cc.v2(1e3, -200)
            }, {
              easing: "quadInOut"
            }).start();
            this.Move_Stage++;
            break;

           case 2:
            cc.tween(this.node).to(.5, {
              position: cc.v2(800, 0)
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Fire_Script.node).to(.5, {
              position: cc.v2(1200, 0)
            }, {
              easing: "quadInOut"
            }).start();
            this.Move_Stage++;
            break;

           case 3:
            cc.tween(this.node).to(.5, {
              position: cc.v2(1e3, -200)
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Fire_Script.node).to(.5, {
              position: cc.v2(1e3, 200)
            }, {
              easing: "quadInOut"
            }).start();
            this.Move_Stage = 0;
          }
          cc.tween(this.node).delay(100 / this.Enemy_Common.Speed).call(function() {
            _this5.Think();
          }).start();
          break;

         case 1:
          var time = 200 / this.Enemy_Common.Speed;
          cc.tween(this.node).to(time, {
            position: cc.v2(1200, 800 * Math.random() - 400)
          }, {
            easing: "quadInOut"
          }).call(function() {
            _this5.Think();
          }).start();
          cc.tween(this.Fire_Script.node).to(time, {
            position: cc.v2(-1200, 800 * Math.random() - 400)
          }, {
            easing: "quadInOut"
          }).start();
        }
      },
      Special_Change_Stage: function Special_Change_Stage() {
        var _this6 = this;
        if (0 == this.Enemy_Common.Battle_Controller.Boss_Stage) {
          this.Enemy_Common.Battle_Controller.JoyStick.Joytick_Back();
          this.Enemy_Common.Battle_Controller.UI_Parent.active = false;
          this.Enemy_Common.Battle_Controller.Attack_Button_Parent.children[0].getComponent(this.Enemy_Common.Battle_Controller.Attack_Button_Parent.children[0].name).Cancle_Touch();
          this.Enemy_Common.Battle_Controller.Destroy_Enemy_Bullet();
          this.Enemy_Common.Can_Move = 0;
          this.Enemy_Common.Can_Injured = 0;
          this.Enemy_Common.Stop();
          this.Animation.play("Boss_Water_Stay");
          this.Water_Back_Particle.emissionRate = 0;
          this.Fire_Script.Back_Particle.emissionRate = 0;
          this.Fire_Enemy_Common.Can_Move = 0;
          this.Fire_Enemy_Common.Can_Injured = 0;
          this.Fire_Enemy_Common.Stop();
          this.Fire_Enemy_Common.Animation.play("Boss_Fire_Stay");
          cc.tween(this.node).to(1, {
            position: cc.v2(1200, 0),
            easing: "quadInOut"
          }).delay(1).call(function() {
            _this6.Enemy_Common.Battle_Controller.Chat_Menu.node.active = true;
            _this6.Enemy_Common.Battle_Controller.Chat_Menu.Chat(_this6.Enemy_Common.Battle_Controller.Enemy_Create.Boss_ID);
          }).start();
          cc.tween(this.Fire_Enemy_Common.node).to(1, {
            position: cc.v2(1e3, 0),
            easing: "quadInOut"
          }).start();
          this.Fire_Script.RigidBody.enabledContractListener = false;
          this.Fire_Script.BoxCollider.enabled = false;
        }
      },
      Water_Attack_Back_Fire_Show: function Water_Attack_Back_Fire_Show() {
        var _this7 = this;
        this.Animation.play("Boss_Water_Attack");
        cc.tween(this.node).call(function() {
          var Particle = cc.instantiate(_this7.Bo);
          Particle.parent = _this7.Enemy_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(_this7.node.x - 150, _this7.node.y);
          _this7.Enemy_Common.Battle_Controller.Camera_Shake_Medium();
        }).delay(.1).call(function() {
          _this7.Enemy_Common.Battle_Controller.Camera_Shake_Medium();
        }).delay(.1).call(function() {
          _this7.Enemy_Common.Battle_Controller.Camera_Shake_Medium();
        }).delay(.1).call(function() {
          _this7.Enemy_Common.Battle_Controller.Camera_Shake_Medium();
        }).delay(.1).call(function() {
          _this7.Enemy_Common.Battle_Controller.Camera_Shake_Medium();
        }).delay(.1).call(function() {
          var Particle = cc.instantiate(_this7.Purple_Bomb_Smoke);
          Particle.parent = _this7.Enemy_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(_this7.node.x - 215.352, _this7.node.y);
          _this7.Enemy_Common.Battle_Controller.Camera_Shake_Big();
          _this7.Fire_Enemy_Common.Stop();
          _this7.Fire_Enemy_Common.Image.scaleX = -1.4;
          var t = cc.tween;
          t(_this7.Fire_Enemy_Common.node).parallel(t().to(.1, {
            angle: 20
          }), t().to(.3, {
            position: cc.v2(-1200, 0)
          })).to(.1, {
            angle: 0
          }).call(function() {
            _this7.Fire_Script.Animation.play("Boss_Fire_Stay");
          }).delay(.5).call(function() {
            _this7.Enemy_Common.Battle_Controller.Continue_Boss_Battle();
          }).start();
          _this7.Fire_Script.Create_Ghost();
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_YHWD_Stage_1_Flower_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03b40161MJF97XrL+yI/DJ7", "Boss_YHWD_Stage_1_Flower_Bullet");
    "use strict";
    var _cc$Class;
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class((_cc$Class = {
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Number: 0,
        Target_Angle: 0,
        Now_Speed: 0,
        a: 0,
        Wait_Time: 0
      },
      Start_Set: function Start_Set() {
        cc.tween(this.node).to(.5, {
          scale: 1,
          opacity: 200
        }).by(1, {
          angle: this.Target_Angle
        }).start();
      },
      Shoot: function Shoot() {
        var _this = this;
        this.Enemy_Bullet_Common.Can_Destroy = 1;
        cc.tween(this.node).delay(this.Wait_Time).call(function() {
          if (null != _this.Enemy_Bullet_Common.Battle_Controller.Hero) {
            _this.Target = _this.Enemy_Bullet_Common.Battle_Controller.Hero;
            var dir = cc.v2(_this.node.x - _this.Target.x, _this.node.y - _this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            _this.node.angle = radian / Math.PI * 180;
            _this.Set_Speed();
          } else _this.Enemy_Bullet_Common.RigidBody.linearVelocity = cc.v2(-500, 0);
        }).start();
      },
      Set_Speed: function Set_Speed() {
        this.a = -50;
        this.schedule(function() {
          this.Now_Speed += this.a;
          this.a += 5;
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      }
    }, _cc$Class["Set_Speed"] = function Set_Speed() {
      this.Enemy_Bullet_Common.Can_Destroy = 1;
      this.Can_Be_Mozu_Blackhole_Absorb = 1;
      this.Enemy_Bullet_Common.RigidBody.angularVelocity = -120;
      this.schedule(function() {
        if (this.Now_Speed > -1e3) {
          this.Now_Speed += this.a;
          this.a -= 5;
        }
        this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
        this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
        this.Enemy_Bullet_Common.Set_Speed();
      }, .04);
    }, _cc$Class.Trigger = function Trigger() {
      this.scheduleOnce(function() {
        this.Set_Speed();
      }, this.Enemy_Bullet_Common.Trigger_Wait_Time);
    }, _cc$Class));
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_YHWD_Stage_1_Heart_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ff8bew5PttPr6tCZWQcG+NS", "Boss_YHWD_Stage_1_Heart_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Number: 0,
        BoxCollider: cc.BoxCollider,
        Now_Speed: 0,
        a: 0
      },
      Set_Speed: function Set_Speed() {
        this.Enemy_Bullet_Common.RigidBody.angularVelocity = 90;
        this.schedule(function() {
          if (this.Now_Speed > -1500) {
            this.Now_Speed += this.a;
            this.a -= 2;
          }
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos((this.node.angle - 90) * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin((this.node.angle - 90) * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      },
      Trigger: function Trigger() {
        this.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_YHWD_Stage_1_Heart_Mother_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "140feu6DcZNRZNHIIWrN/cF", "Boss_YHWD_Stage_1_Heart_Mother_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Attack: 0,
        Jing_Jie: 0,
        Battle_Controller: cc.Node,
        Number: 0,
        Target_X: [ cc.Float ],
        Target_Y: [ cc.Float ],
        Children_Bullet: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Target_X = [ -1200, -600, 0, 600, 1200, -1200, -600, 0, 600, 1200 ];
        this.Target_Y = [ 300, 300, 300, 300, 300, -300, -300, -300, -300, -300 ];
        cc.tween(this.node).to(1, {
          scale: 1,
          y: this.Target_Y[this.Number] + 160 * Math.random() - 80,
          x: {
            value: this.Target_X[this.Number] + 160 * Math.random() - 80,
            easing: "sineOutIn"
          }
        }).start();
      },
      First_Move: function First_Move() {
        var _this = this;
        cc.tween(this.node).to(1, {
          scale: 3,
          x: -1600,
          y: {
            value: 1e3 * Math.random() - 500,
            easing: "sineOutIn"
          }
        }).delay(.2).call(function() {
          var Bullet = cc.instantiate(_this.Seed_Bullet);
          Bullet.parent = _this.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this.node.x + 56.346;
          Bullet.y = _this.node.y;
          Bullet.angle = 10 * Math.random() - 5;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this.Attack;
          Bullet_Common_Script.Jing_Jie = _this.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this.Battle_Controller;
          Bullet_Common_Script.Special_Number = 0;
          var Bullet = cc.instantiate(_this.Seed_Bullet);
          Bullet.parent = _this.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this.node.x + 61.784;
          Bullet.y = _this.node.y + 5.754;
          Bullet.angle = 45 + 10 * Math.random() - 5;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this.Attack;
          Bullet_Common_Script.Jing_Jie = _this.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this.Battle_Controller;
          Bullet_Common_Script.Special_Number = 1;
          var Bullet = cc.instantiate(_this.Seed_Bullet);
          Bullet.parent = _this.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this.node.x + 56.346;
          Bullet.y = _this.node.y - 5.754;
          Bullet.angle = 10 * Math.random() - 45 - 5;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this.Attack;
          Bullet_Common_Script.Jing_Jie = _this.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this.Battle_Controller;
          Bullet_Common_Script.Special_Number = 2;
        }).start();
      },
      Second_Move: function Second_Move() {
        var _this2 = this;
        cc.tween(this.node).to(1, {
          scale: 3,
          x: 1600,
          y: {
            value: 1e3 * Math.random() - 500,
            easing: "sineOutIn"
          }
        }).call(function() {
          var Bullet = cc.instantiate(_this2.Seed_Bullet);
          Bullet.parent = _this2.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this2.node.x - 56.346;
          Bullet.y = _this2.node.y;
          Bullet.angle = 10 * Math.random() - 5 + 180;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this2.Attack;
          Bullet_Common_Script.Jing_Jie = _this2.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this2.Battle_Controller;
          Bullet_Common_Script.Special_Number = 0;
          var Bullet = cc.instantiate(_this2.Seed_Bullet);
          Bullet.parent = _this2.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this2.node.x - 61.784;
          Bullet.y = _this2.node.y + 5.754;
          Bullet.angle = 10 * Math.random() - 45 - 5 + 180;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this2.Attack;
          Bullet_Common_Script.Jing_Jie = _this2.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this2.Battle_Controller;
          Bullet_Common_Script.Special_Number = 1;
          var Bullet = cc.instantiate(_this2.Seed_Bullet);
          Bullet.parent = _this2.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this2.node.x - 56.346;
          Bullet.y = _this2.node.y - 5.754;
          Bullet.angle = 45 + 10 * Math.random() - 5 + 180;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this2.Attack;
          Bullet_Common_Script.Jing_Jie = _this2.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this2.Battle_Controller;
          Bullet_Common_Script.Special_Number = 2;
        }).start();
      },
      Third_Move: function Third_Move() {
        var _this3 = this;
        cc.tween(this.node).to(1, {
          scale: 3,
          x: {
            value: 1500 * Math.random(),
            easing: "sineOutIn"
          },
          y: -700
        }).call(function() {
          var Bullet = cc.instantiate(_this3.Seed_Bullet);
          Bullet.parent = _this3.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this3.node.x;
          Bullet.y = _this3.node.y + 56.346;
          Bullet.angle = -10 * Math.random() + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this3.Attack;
          Bullet_Common_Script.Jing_Jie = _this3.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this3.Battle_Controller;
          Bullet_Common_Script.Special_Number = 0;
          var Bullet = cc.instantiate(_this3.Seed_Bullet);
          Bullet.parent = _this3.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this3.node.x + 5.754;
          Bullet.y = _this3.node.y + 61.784;
          Bullet.angle = 45 + -10 * Math.random() + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this3.Attack;
          Bullet_Common_Script.Jing_Jie = _this3.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this3.Battle_Controller;
          Bullet_Common_Script.Special_Number = 1;
          var Bullet = cc.instantiate(_this3.Seed_Bullet);
          Bullet.parent = _this3.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this3.node.x - 5.754;
          Bullet.y = _this3.node.y + 56.346;
          Bullet.angle = -10 * Math.random() - 45 + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this3.Attack;
          Bullet_Common_Script.Jing_Jie = _this3.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this3.Battle_Controller;
          Bullet_Common_Script.Special_Number = 2;
        }).start();
      },
      Fourth_Move: function Fourth_Move() {
        var _this4 = this;
        cc.tween(this.node).to(1, {
          scale: 3,
          x: {
            value: -1500 * Math.random(),
            easing: "sineOutIn"
          },
          y: -700
        }).call(function() {
          var Bullet = cc.instantiate(_this4.Seed_Bullet);
          Bullet.parent = _this4.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this4.node.x;
          Bullet.y = _this4.node.y + 56.346;
          Bullet.angle = -10 * Math.random() + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this4.Attack;
          Bullet_Common_Script.Jing_Jie = _this4.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this4.Battle_Controller;
          Bullet_Common_Script.Special_Number = 0;
          var Bullet = cc.instantiate(_this4.Seed_Bullet);
          Bullet.parent = _this4.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this4.node.x + 5.754;
          Bullet.y = _this4.node.y + 61.784;
          Bullet.angle = 45 + -10 * Math.random() + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this4.Attack;
          Bullet_Common_Script.Jing_Jie = _this4.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this4.Battle_Controller;
          Bullet_Common_Script.Special_Number = 1;
          var Bullet = cc.instantiate(_this4.Seed_Bullet);
          Bullet.parent = _this4.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this4.node.x - 5.754;
          Bullet.y = _this4.node.y + 56.346;
          Bullet.angle = -10 * Math.random() - 45 + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this4.Attack;
          Bullet_Common_Script.Jing_Jie = _this4.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this4.Battle_Controller;
          Bullet_Common_Script.Special_Number = 2;
        }).start();
      },
      Trigger: function Trigger() {
        var _this5 = this;
        cc.tween(this.node).to(1, {
          scale: 4,
          opacity: 255
        }).call(function() {
          var Bullet = cc.instantiate(_this5.Children_Bullet);
          Bullet.parent = _this5.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this5.node.x;
          Bullet.y = _this5.node.y - 57.959;
          Bullet.angle = 0;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this5.Attack;
          Bullet_Common_Script.Jing_Jie = _this5.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this5.Battle_Controller;
          var Bullet = cc.instantiate(_this5.Children_Bullet);
          Bullet.parent = _this5.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this5.node.x + 64.658;
          Bullet.y = _this5.node.y - 21.935;
          Bullet.angle = 72;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this5.Attack;
          Bullet_Common_Script.Jing_Jie = _this5.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this5.Battle_Controller;
          var Bullet = cc.instantiate(_this5.Children_Bullet);
          Bullet.parent = _this5.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this5.node.x + 41.131;
          Bullet.y = _this5.node.y + 48.788;
          Bullet.angle = 144;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this5.Attack;
          Bullet_Common_Script.Jing_Jie = _this5.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this5.Battle_Controller;
          var Bullet = cc.instantiate(_this5.Children_Bullet);
          Bullet.parent = _this5.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this5.node.x - 41.078;
          Bullet.y = _this5.node.y + 48.788;
          Bullet.angle = 216;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this5.Attack;
          Bullet_Common_Script.Jing_Jie = _this5.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this5.Battle_Controller;
          var Bullet = cc.instantiate(_this5.Children_Bullet);
          Bullet.parent = _this5.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this5.node.x - 56.346;
          Bullet.y = _this5.node.y - 24.706;
          Bullet.angle = 288;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this5.Attack;
          Bullet_Common_Script.Jing_Jie = _this5.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this5.Battle_Controller;
        }).to(1, {
          scale: 0,
          opacity: 0
        }).call(function() {
          _this5.node.destroy();
        }).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Boss_YHWD_Stage_1_Mother_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82c92t3PiZEcYX56noWOZdy", "Boss_YHWD_Stage_1_Mother_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Attack: 0,
        Jing_Jie: 0,
        Battle_Controller: cc.Node,
        Number: 0,
        Seed_Bullet: cc.Prefab
      },
      Start_Set: function Start_Set() {
        switch (this.Number) {
         case 0:
          this.First_Move();
          break;

         case 1:
          this.Second_Move();
          break;

         case 2:
          this.Third_Move();
          break;

         case 3:
          this.Fourth_Move();
        }
      },
      First_Move: function First_Move() {
        var _this = this;
        cc.tween(this.node).to(1, {
          scale: 3,
          x: -1600,
          y: {
            value: 1e3 * Math.random() - 500,
            easing: "sineOutIn"
          }
        }).delay(.2).call(function() {
          var Bullet = cc.instantiate(_this.Seed_Bullet);
          Bullet.parent = _this.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this.node.x + 56.346;
          Bullet.y = _this.node.y;
          Bullet.angle = 10 * Math.random() - 5;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this.Attack;
          Bullet_Common_Script.Jing_Jie = _this.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this.Battle_Controller;
          Bullet_Common_Script.Special_Number = 0;
          var Bullet = cc.instantiate(_this.Seed_Bullet);
          Bullet.parent = _this.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this.node.x + 61.784;
          Bullet.y = _this.node.y + 5.754;
          Bullet.angle = 45 + 10 * Math.random() - 5;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this.Attack;
          Bullet_Common_Script.Jing_Jie = _this.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this.Battle_Controller;
          Bullet_Common_Script.Special_Number = 1;
          var Bullet = cc.instantiate(_this.Seed_Bullet);
          Bullet.parent = _this.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this.node.x + 56.346;
          Bullet.y = _this.node.y - 5.754;
          Bullet.angle = 10 * Math.random() - 45 - 5;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this.Attack;
          Bullet_Common_Script.Jing_Jie = _this.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this.Battle_Controller;
          Bullet_Common_Script.Special_Number = 2;
        }).start();
      },
      Second_Move: function Second_Move() {
        var _this2 = this;
        cc.tween(this.node).to(1, {
          scale: 3,
          x: 1600,
          y: {
            value: 1e3 * Math.random() - 500,
            easing: "sineOutIn"
          }
        }).call(function() {
          var Bullet = cc.instantiate(_this2.Seed_Bullet);
          Bullet.parent = _this2.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this2.node.x - 56.346;
          Bullet.y = _this2.node.y;
          Bullet.angle = 10 * Math.random() - 5 + 180;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this2.Attack;
          Bullet_Common_Script.Jing_Jie = _this2.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this2.Battle_Controller;
          Bullet_Common_Script.Special_Number = 0;
          var Bullet = cc.instantiate(_this2.Seed_Bullet);
          Bullet.parent = _this2.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this2.node.x - 61.784;
          Bullet.y = _this2.node.y + 5.754;
          Bullet.angle = 10 * Math.random() - 45 - 5 + 180;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this2.Attack;
          Bullet_Common_Script.Jing_Jie = _this2.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this2.Battle_Controller;
          Bullet_Common_Script.Special_Number = 1;
          var Bullet = cc.instantiate(_this2.Seed_Bullet);
          Bullet.parent = _this2.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this2.node.x - 56.346;
          Bullet.y = _this2.node.y - 5.754;
          Bullet.angle = 45 + 10 * Math.random() - 5 + 180;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this2.Attack;
          Bullet_Common_Script.Jing_Jie = _this2.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this2.Battle_Controller;
          Bullet_Common_Script.Special_Number = 2;
        }).start();
      },
      Third_Move: function Third_Move() {
        var _this3 = this;
        cc.tween(this.node).to(1, {
          scale: 3,
          x: {
            value: 1500 * Math.random(),
            easing: "sineOutIn"
          },
          y: -700
        }).call(function() {
          var Bullet = cc.instantiate(_this3.Seed_Bullet);
          Bullet.parent = _this3.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this3.node.x;
          Bullet.y = _this3.node.y + 56.346;
          Bullet.angle = -10 * Math.random() + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this3.Attack;
          Bullet_Common_Script.Jing_Jie = _this3.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this3.Battle_Controller;
          Bullet_Common_Script.Special_Number = 0;
          var Bullet = cc.instantiate(_this3.Seed_Bullet);
          Bullet.parent = _this3.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this3.node.x + 5.754;
          Bullet.y = _this3.node.y + 61.784;
          Bullet.angle = 45 + -10 * Math.random() + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this3.Attack;
          Bullet_Common_Script.Jing_Jie = _this3.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this3.Battle_Controller;
          Bullet_Common_Script.Special_Number = 1;
          var Bullet = cc.instantiate(_this3.Seed_Bullet);
          Bullet.parent = _this3.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this3.node.x - 5.754;
          Bullet.y = _this3.node.y + 56.346;
          Bullet.angle = -10 * Math.random() - 45 + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this3.Attack;
          Bullet_Common_Script.Jing_Jie = _this3.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this3.Battle_Controller;
          Bullet_Common_Script.Special_Number = 2;
        }).start();
      },
      Fourth_Move: function Fourth_Move() {
        var _this4 = this;
        cc.tween(this.node).to(1, {
          scale: 3,
          x: {
            value: -1500 * Math.random(),
            easing: "sineOutIn"
          },
          y: -700
        }).call(function() {
          var Bullet = cc.instantiate(_this4.Seed_Bullet);
          Bullet.parent = _this4.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this4.node.x;
          Bullet.y = _this4.node.y + 56.346;
          Bullet.angle = -10 * Math.random() + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this4.Attack;
          Bullet_Common_Script.Jing_Jie = _this4.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this4.Battle_Controller;
          Bullet_Common_Script.Special_Number = 0;
          var Bullet = cc.instantiate(_this4.Seed_Bullet);
          Bullet.parent = _this4.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this4.node.x + 5.754;
          Bullet.y = _this4.node.y + 61.784;
          Bullet.angle = 45 + -10 * Math.random() + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this4.Attack;
          Bullet_Common_Script.Jing_Jie = _this4.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this4.Battle_Controller;
          Bullet_Common_Script.Special_Number = 1;
          var Bullet = cc.instantiate(_this4.Seed_Bullet);
          Bullet.parent = _this4.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = _this4.node.x - 5.754;
          Bullet.y = _this4.node.y + 56.346;
          Bullet.angle = -10 * Math.random() - 45 + 95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = _this4.Attack;
          Bullet_Common_Script.Jing_Jie = _this4.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = _this4.Battle_Controller;
          Bullet_Common_Script.Special_Number = 2;
        }).start();
      },
      Trigger: function Trigger() {
        var _this5 = this;
        cc.tween(this.node).to(1, {
          scale: 6,
          opacity: 0
        }).call(function() {
          _this5.node.destroy();
        }).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Boss_YHWD_Stage_1_Rose_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e98ecMt9gxBDqpEUwwRp1OQ", "Boss_YHWD_Stage_1_Rose_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Number: 0,
        BoxCollider: cc.BoxCollider,
        Now_Speed: 0,
        a: 0,
        Wait_Time: 0
      },
      start: function start() {
        var _this = this;
        cc.tween(this.node).to(.5, {
          scale: .5,
          opacity: 200
        }).call(function() {
          _this.Enemy_Bullet_Common.RigidBody.enabledContactListener = true;
          _this.BoxCollider.enabled = true;
        }).start();
      },
      Set_Speed: function Set_Speed() {
        var _this2 = this;
        this.Enemy_Bullet_Common.Can_Destroy = 1;
        this.Can_Be_Mozu_Blackhole_Absorb = 1;
        this.schedule(function() {
          if (this.Now_Speed > -1500) {
            this.Now_Speed += this.a;
            this.a -= 2;
          }
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
        cc.tween(this.node).delay(8).call(function() {
          _this2.Enemy_Bullet_Common.RigidBody.enabledContactListener = false;
          _this2.BoxCollider.enabled = false;
        }).to(1, {
          scale: 2,
          opacity: 0
        }).call(function() {
          _this2.Enemy_Bullet_Common.Must_Destroy();
        }).start();
      },
      Trigger: function Trigger() {
        1 == this.Enemy_Bullet_Common.Special_Number ? this.Enemy_Bullet_Common.RigidBody.angularVelocity = -200 : this.Enemy_Bullet_Common.RigidBody.angularVelocity = 200;
        this.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_YHWD_Stage_1_Seed_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0693cZJwyBFt73TAroV31uc", "Boss_YHWD_Stage_1_Seed_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Number: 0,
        Now_Speed: 0,
        a: 0,
        Wait_Time: 0,
        Children_Bullet: cc.Prefab,
        Children_Bullet_Number: 0,
        Flower_Bullet: cc.Prefab
      },
      Born_Finish: function Born_Finish() {
        if (this.Children_Bullet_Number < 5) {
          var Bullet = cc.instantiate(this.Children_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.angle = this.node.angle + 80 * Math.random() - 40;
          Bullet.x = this.node.x + 50 * Math.cos(this.node.angle * Math.PI / 180);
          Bullet.y = this.node.y + 50 * Math.sin(this.node.angle * Math.PI / 180);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Common_Script.Special_Number = this.Enemy_Bullet_Common.Special_Number;
          Bullet_Common_Script.Trigger_Wait_Time = this.Enemy_Bullet_Common.Trigger_Wait_Time + .5;
          var Bullet_Script = Bullet.getComponent("Boss_YHWD_Stage_1_Seed_Bullet");
          Bullet_Script.Children_Bullet_Number = this.Children_Bullet_Number + 1;
        }
        if (3 == this.Children_Bullet_Number) {
          if (1 == this.Enemy_Bullet_Common.Special_Number) {
            var Bullet = cc.instantiate(this.Children_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.angle = this.node.angle + 90;
            Bullet.x = this.node.x + 50 * Math.cos(this.node.angle * Math.PI / 180);
            Bullet.y = this.node.y + 50 * Math.sin(this.node.angle * Math.PI / 180);
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Special_Number = this.Enemy_Bullet_Common.Special_Number;
            Bullet_Common_Script.Trigger_Wait_Time = this.Enemy_Bullet_Common.Trigger_Wait_Time + .5;
            var Bullet_Script = Bullet.getComponent("Boss_YHWD_Stage_1_Seed_Bullet");
            Bullet_Script.Children_Bullet_Number = this.Children_Bullet_Number + 1;
          } else if (2 == this.Enemy_Bullet_Common.Special_Number) {
            var Bullet = cc.instantiate(this.Children_Bullet);
            Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
            Bullet.angle = this.node.angle - 90;
            Bullet.x = this.node.x + 50 * Math.cos(this.node.angle * Math.PI / 180);
            Bullet.y = this.node.y + 50 * Math.sin(this.node.angle * Math.PI / 180);
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Special_Number = this.Enemy_Bullet_Common.Special_Number;
            Bullet_Common_Script.Trigger_Wait_Time = this.Enemy_Bullet_Common.Trigger_Wait_Time + .5;
            var Bullet_Script = Bullet.getComponent("Boss_YHWD_Stage_1_Seed_Bullet");
            Bullet_Script.Children_Bullet_Number = this.Children_Bullet_Number + 1;
          }
        } else if (5 == this.Children_Bullet_Number && 0 == this.Enemy_Bullet_Common.Special_Number) for (var i = 0; i < 6; i++) {
          var Bullet = cc.instantiate(this.Flower_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.angle = this.node.angle;
          Bullet.x = this.node.x + 50 * Math.cos(this.node.angle * Math.PI / 180);
          Bullet.y = this.node.y + 50 * Math.sin(this.node.angle * Math.PI / 180);
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Common_Script.Trigger_Wait_Time = this.Enemy_Bullet_Common.Trigger_Wait_Time + .1;
          var Bullet_Script = Bullet.getComponent("Boss_YHWD_Stage_1_Flower_Bullet");
          Bullet_Script.Target_Angle = this.node.angle + 350 * i / 6;
          Bullet_Script.Start_Set();
        }
      },
      Set_Speed: function Set_Speed() {
        this.Enemy_Bullet_Common.Can_Destroy = 1;
        this.Can_Be_Mozu_Blackhole_Absorb = 1;
        this.Enemy_Bullet_Common.RigidBody.angularVelocity = -15;
        this.schedule(function() {
          if (this.Now_Speed > -500) {
            this.Now_Speed += this.a;
            this.a -= 1;
          }
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .04);
      },
      Trigger: function Trigger() {
        this.scheduleOnce(function() {
          this.Set_Speed();
        }, this.Enemy_Bullet_Common.Trigger_Wait_Time);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_YHWD: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3516YUf79Ic5P+tZ89XRKz", "Boss_YHWD");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Enemy_Common: Enemy_Common,
        Back_Particle: cc.ParticleSystem,
        Move_Stage: 0,
        Green_Bomb_Smoke: cc.Prefab,
        Bo: cc.Prefab,
        Stage_1_Mother_Bullet: cc.Prefab,
        Stage_1_Rose_Bullet: cc.Prefab,
        Stage_1_Rose_Schedule: cc.Schedule,
        Write_Rose_Number: 0,
        Write_Rose_J: 0,
        Rose_Bullet_Left_Or_Right: 1,
        Stage_1_Heart_Mother_Bullet: cc.Prefab,
        Bo_Pink: cc.Prefab
      },
      start: function start() {
        this.Stage_1_Rose_Schedule = function() {
          var _this = this;
          console.log("\u73ab\u7470\u653b\u51fb");
          if (this.Write_Rose_Number <= 65) {
            this.Write_Rose_Number++;
            this.Write_Rose_J >= 3.14 && (this.Write_Rose_J = -3.14);
            this.Write_Rose_J += .1;
            var R = 2 + Math.sin(6 * this.Write_Rose_J);
            var Bullet = cc.instantiate(this.Stage_1_Rose_Bullet);
            Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
            Bullet.setPosition(this.node.x - 400 + R * Math.cos(this.Write_Rose_J) * 150, this.node.y + R * Math.sin(this.Write_Rose_J) * 150);
            Bullet.angle = 180 * this.Write_Rose_J / Math.PI;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            this.Enemy_Common.Bullet_Attack_Count();
            Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            Bullet_Common_Script.Special_Number = this.Rose_Bullet_Left_Or_Right;
            this.Write_Rose_Number % 5 == 0 && (this.Rose_Bullet_Left_Or_Right = -1 * this.Rose_Bullet_Left_Or_Right);
          } else {
            this.Write_Rose_Number = 0;
            this.Write_Rose_J = 0;
            cc.tween(this.node).delay(1).call(function() {
              for (var i = 0; i < _this.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) {
                var Script = _this.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Boss_YHWD_Stage_1_Rose_Bullet");
                null != Script && Script.Trigger();
              }
            }).delay(10).call(function() {
              _this.Back_Particle.emissionRate = 0;
              _this.Enemy_Common.Animation.play("Boss_YHWD_Stay");
              _this.Enemy_Common.Battle_Controller.Destroy_Enemy_Bullet();
              _this.Enemy_Common.Move();
            }).start();
            this.unschedule(this.Stage_1_Rose_Schedule);
          }
        };
      },
      Think: function Think() {
        switch (this.Enemy_Common.Battle_Controller.Boss_Stage) {
         case 0:
          switch (this.Think_Stage) {
           case 0:
            this.First_Stage_Seed_Attack();
            this.Think_Stage++;
            break;

           case 1:
            this.First_Stage_Rose_Attack();
            this.Think_Stage++;
            break;

           case 2:
            this.First_Stage_Heart_Attack();
            this.Think_Stage = 0;
          }
        }
      },
      Half_Hp: function Half_Hp() {
        this.Enemy_Common.Speed = 3 * this.Enemy_Common.Speed;
      },
      First_Stage_Seed_Attack: function First_Stage_Seed_Attack() {
        var _this2 = this;
        this.Enemy_Common.Animation.play("Boss_YHWD_Attack");
        this.Back_Particle.emissionRate = 20;
        cc.tween(this.node).call(function() {
          var Particle = cc.instantiate(_this2.Bo);
          Particle.parent = _this2.Enemy_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(_this2.node.x - 150, _this2.node.y);
        }).delay(.5).call(function() {
          var Particle = cc.instantiate(_this2.Green_Bomb_Smoke);
          Particle.parent = _this2.Enemy_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(_this2.node.x - 215.352, _this2.node.y);
          _this2.Enemy_Common.Battle_Controller.Camera_Shake_Medium();
          for (var i = 0; i < 4; i++) {
            var Bullet = cc.instantiate(_this2.Stage_1_Mother_Bullet);
            Bullet.parent = _this2.Enemy_Common.Battle_Controller.Particle_Parent;
            Bullet.setPosition(_this2.node.x - 150, _this2.node.y);
            var Bullet_Script = Bullet.getComponent("Boss_YHWD_Stage_1_Mother_Bullet");
            _this2.Enemy_Common.Bullet_Attack_Count();
            Bullet_Script.Attack = _this2.Enemy_Common.Bullet_Attack;
            Bullet_Script.Jing_Jie = _this2.Enemy_Common.Enemy_Jing_Jie;
            Bullet_Script.Battle_Controller = _this2.Enemy_Common.Battle_Controller;
            Bullet_Script.Number = i;
            Bullet_Script.Start_Set();
          }
        }).delay(4.5).call(function() {
          for (var i = 0; i < _this2.Enemy_Common.Battle_Controller.Particle_Parent.children.length; i++) {
            var Script = _this2.Enemy_Common.Battle_Controller.Particle_Parent.children[i].getComponent("Boss_YHWD_Stage_1_Mother_Bullet");
            null != Script && Script.Trigger();
          }
        }).delay(1).call(function() {
          for (var i = 0; i < _this2.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) {
            var Script = _this2.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Boss_YHWD_Stage_1_Seed_Bullet");
            null != Script && Script.Trigger();
          }
        }).delay(2).call(function() {
          for (var i = 0; i < _this2.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) {
            var Script = _this2.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Boss_YHWD_Stage_1_Flower_Bullet");
            null != Script && Script.Trigger();
          }
        }).delay(15).call(function() {
          _this2.Back_Particle.emissionRate = 0;
          _this2.Enemy_Common.Animation.play("Boss_YHWD_Stay");
          _this2.Enemy_Common.Battle_Controller.Destroy_Enemy_Bullet();
          _this2.Enemy_Common.Move();
        }).start();
      },
      First_Stage_Rose_Attack: function First_Stage_Rose_Attack() {
        this.Enemy_Common.Animation.play("Boss_YHWD_Attack");
        this.Back_Particle.emissionRate = 20;
        this.schedule(this.Stage_1_Rose_Schedule, .01);
      },
      First_Stage_Heart_Attack: function First_Stage_Heart_Attack() {
        var _this3 = this;
        this.Enemy_Common.Animation.play("Boss_YHWD_Attack");
        this.Back_Particle.emissionRate = 20;
        for (var i = 0; i < 10; i++) {
          var Bullet = cc.instantiate(this.Stage_1_Heart_Mother_Bullet);
          Bullet.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
          Bullet.setPosition(this.node.x - 150, this.node.y);
          var Bullet_Script = Bullet.getComponent("Boss_YHWD_Stage_1_Heart_Mother_Bullet");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Script.Number = i;
          Bullet_Script.Start_Set();
        }
        cc.tween(this.node).delay(2).call(function() {
          var Bullet = cc.instantiate(_this3.Bo_Pink);
          Bullet.parent = _this3.Enemy_Common.Battle_Controller.Particle_Parent;
          Bullet.setPosition(_this3.node.x - 150, _this3.node.y);
        }).delay(.5).call(function() {
          for (var i = 0; i < _this3.Enemy_Common.Battle_Controller.Particle_Parent.children.length; i++) {
            var Script = _this3.Enemy_Common.Battle_Controller.Particle_Parent.children[i].getComponent("Boss_YHWD_Stage_1_Heart_Mother_Bullet");
            null != Script && Script.Trigger();
          }
        }).delay(2.5).call(function() {
          for (var i = 0; i < _this3.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) {
            var Script = _this3.Enemy_Common.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Boss_YHWD_Stage_1_Heart_Bullet");
            null != Script && Script.Trigger();
          }
        }).delay(20).call(function() {
          _this3.Back_Particle.emissionRate = 0;
          _this3.Enemy_Common.Animation.play("Boss_YHWD_Stay");
          _this3.Enemy_Common.Battle_Controller.Destroy_Enemy_Bullet();
          _this3.Enemy_Common.Move();
        }).start();
      },
      Special_Move_Content: function Special_Move_Content() {},
      Special_Change_Stage: function Special_Change_Stage() {}
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Boss_YKNG_Big_Chushou_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5c8efLw3h1B3ocR1W06WCQZ", "Boss_YKNG_Big_Chushou_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Up_Or_Down: 0,
        Now_Speed: 0,
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Last_Node: cc.Node,
        Son: [ cc.Node ],
        Distance: 50,
        Distance_Change: 1,
        Is_Moveing: 0,
        Is_Be_Trigger: 0
      },
      Start_Set: function Start_Set() {
        var _this = this;
        if (0 == this.Is_Be_Trigger) {
          this.Is_Be_Trigger = 1;
          this.Distance = 5;
          this.node.scale = cc.v2(5 - .3 * this.Number, 5 - .3 * this.Number);
          if (0 == this.Number) {
            cc.tween(this.node).to(1, {
              angle: 10
            }, {
              easing: "quadInOut"
            }).to(1, {
              angle: -10
            }, {
              easing: "quadInOut"
            }).call(function() {
              _this.Move();
            }).start();
            cc.tween(this.Son[0]).to(1.02, {
              angle: 15
            }, {
              easing: "quadInOut"
            }).to(1.02, {
              angle: -15
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Son[1]).to(1.04, {
              angle: 25
            }, {
              easing: "quadInOut"
            }).to(1.04, {
              angle: -25
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Son[2]).to(1.06, {
              angle: 30
            }, {
              easing: "quadInOut"
            }).to(1.06, {
              angle: -30
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Son[3]).to(1.08, {
              angle: 40
            }, {
              easing: "quadInOut"
            }).to(1.08, {
              angle: -40
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Son[4]).to(1.1, {
              angle: 50
            }, {
              easing: "quadInOut"
            }).to(1.1, {
              angle: -50
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Son[5]).to(1.12, {
              angle: 65
            }, {
              easing: "quadInOut"
            }).to(1.12, {
              angle: -65
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Son[6]).to(1.14, {
              angle: 80
            }, {
              easing: "quadInOut"
            }).to(1.14, {
              angle: -80
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Son[7]).to(1.16, {
              angle: 105
            }, {
              easing: "quadInOut"
            }).to(1.16, {
              angle: -105
            }, {
              easing: "quadInOut"
            }).start();
            cc.tween(this.Son[8]).to(1.18, {
              angle: 130
            }, {
              easing: "quadInOut"
            }).to(1.18, {
              angle: -130
            }, {
              easing: "quadInOut"
            }).start();
          }
          cc.tween(this).repeatForever(cc.tween().to(5, {
            Distance: 150 - 5 * this.Number
          }, {
            easing: "quadInOut"
          }).to(5, {
            Distance: 30
          }, {
            easing: "quadInOut"
          })).start();
          1 == this.Up_Or_Down ? this.schedule(function() {
            var _this2 = this;
            0 != this.Number && 0 == this.Is_Moveing && cc.tween(this.node).call(function() {
              _this2.Is_Moveing = 1;
            }).to(.01 * this.Number, {
              position: cc.v2(this.Last_Node.x - this.Distance * Math.sin(this.Last_Node.angle * Math.PI / 180), this.Last_Node.y + this.Distance * Math.cos(this.Last_Node.angle * Math.PI / 180))
            }).call(function() {
              _this2.Is_Moveing = 0;
            }).start();
          }, .001 * this.Number) : this.schedule(function() {
            var _this3 = this;
            0 != this.Number && 0 == this.Is_Moveing && cc.tween(this.node).call(function() {
              _this3.Is_Moveing = 1;
            }).to(.01 * this.Number, {
              position: cc.v2(this.Last_Node.x - this.Distance * Math.sin(this.Last_Node.angle * Math.PI / 180), this.Last_Node.y - this.Distance * Math.cos(this.Last_Node.angle * Math.PI / 180))
            }).call(function() {
              _this3.Is_Moveing = 0;
            }).start();
          }, .001 * this.Number);
        }
      },
      Move: function Move() {
        var _this4 = this;
        if (0 == this.Number) {
          cc.tween(this.node).to(1, {
            angle: 10
          }, {
            easing: "quadInOut"
          }).to(1, {
            angle: -10
          }, {
            easing: "quadInOut"
          }).call(function() {
            _this4.Move();
          }).start();
          cc.tween(this.Son[0]).to(1.02, {
            angle: 15
          }, {
            easing: "quadInOut"
          }).to(1.02, {
            angle: -15
          }, {
            easing: "quadInOut"
          }).start();
          cc.tween(this.Son[1]).to(1.04, {
            angle: 25
          }, {
            easing: "quadInOut"
          }).to(1.04, {
            angle: -25
          }, {
            easing: "quadInOut"
          }).start();
          cc.tween(this.Son[2]).to(1.06, {
            angle: 30
          }, {
            easing: "quadInOut"
          }).to(1.06, {
            angle: -30
          }, {
            easing: "quadInOut"
          }).start();
          cc.tween(this.Son[3]).to(1.08, {
            angle: 40
          }, {
            easing: "quadInOut"
          }).to(1.08, {
            angle: -40
          }, {
            easing: "quadInOut"
          }).start();
          cc.tween(this.Son[4]).to(1.1, {
            angle: 50
          }, {
            easing: "quadInOut"
          }).to(1.1, {
            angle: -50
          }, {
            easing: "quadInOut"
          }).start();
          cc.tween(this.Son[5]).to(1.12, {
            angle: 65
          }, {
            easing: "quadInOut"
          }).to(1.12, {
            angle: -65
          }, {
            easing: "quadInOut"
          }).start();
          cc.tween(this.Son[6]).to(1.14, {
            angle: 80
          }, {
            easing: "quadInOut"
          }).to(1.14, {
            angle: -80
          }, {
            easing: "quadInOut"
          }).start();
          cc.tween(this.Son[7]).to(1.16, {
            angle: 105
          }, {
            easing: "quadInOut"
          }).to(1.16, {
            angle: -105
          }, {
            easing: "quadInOut"
          }).start();
          cc.tween(this.Son[8]).to(1.18, {
            angle: 130
          }, {
            easing: "quadInOut"
          }).to(1.18, {
            angle: -130
          }, {
            easing: "quadInOut"
          }).start();
        }
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_YKNG_Bullet_Eye: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3b25BHIyBMRZ8w2cdO1NNK", "Boss_YKNG_Bullet_Eye");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        In_Node: cc.Node,
        In_Node_Target: cc.Node,
        Bullet: cc.Prefab,
        Bullet_Angle: 45,
        Bullet_Angle_Add_Or_Sub: 0,
        Circle_Bullet: cc.Prefab
      },
      start: function start() {
        this.In_Node_Target = this.Enemy_Bullet_Common.Battle_Controller.Hero;
        this.schedule(function() {
          var Bullet = cc.instantiate(this.Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 150;
          Bullet.y = this.node.y + 150;
          Bullet.angle = this.Bullet_Angle;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 500 * Math.cos(Bullet.angle * Math.PI / 180) * -1;
          Bullet_Common_Script.Ini_Speed_Y = 500 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y + 150;
          Bullet.angle = this.Bullet_Angle + 90;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 500 * Math.cos(Bullet.angle * Math.PI / 180) * -1;
          Bullet_Common_Script.Ini_Speed_Y = 500 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x - 150;
          Bullet.y = this.node.y - 150;
          Bullet.angle = this.Bullet_Angle - 45;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 500 * Math.cos(Bullet.angle * Math.PI / 180) * -1;
          Bullet_Common_Script.Ini_Speed_Y = 500 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x + 150;
          Bullet.y = this.node.y - 150;
          Bullet.angle = this.Bullet_Angle + 180;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 500 * Math.cos(Bullet.angle * Math.PI / 180) * -1;
          Bullet_Common_Script.Ini_Speed_Y = 500 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Common_Script.Set_Speed();
          0 == this.Bullet_Angle_Add_Or_Sub ? this.Bullet_Angle += 10 : this.Bullet_Angle -= 10;
          this.Bullet_Angle >= 30 ? this.Bullet_Angle_Add_Or_Sub = 1 : this.Bullet_Angle <= -30 && (this.Bullet_Angle_Add_Or_Sub = 0);
        }, .15);
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Circle_Bullet);
        Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + this.In_Node.x;
        Bullet.y = this.node.y + this.In_Node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        var dir = cc.v2(this.node.x - this.In_Node_Target.x, this.node.y - this.In_Node_Target.y);
        var radian = Math.atan2(dir.y, dir.x);
        Bullet.angle = radian;
        Bullet_Common_Script.Ini_Speed = 1e3 * Math.cos(radian) * -1;
        Bullet_Common_Script.Ini_Speed_Y = 1e3 * Math.sin(radian) * -1;
        Bullet_Common_Script.Set_Speed();
      },
      update: function update(dt) {
        var dir = cc.v2(this.node.x - this.In_Node_Target.x, this.node.y - this.In_Node_Target.y);
        var radian = Math.atan2(dir.y, dir.x);
        this.In_Node.x = -60 * Math.cos(radian);
        this.In_Node.y = -60 * Math.sin(radian);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Boss_YKNG: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "48ea5I5yAdNibMFGM87M3Zd", "Boss_YKNG");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Enemy_Common: Enemy_Common,
        Back_Particle: cc.ParticleSystem,
        Move_Stage: 0,
        Big_Chushou_Bullet: cc.Prefab,
        Big_Chushou_Father_Node_Script: cc.Node,
        Big_Chushou_Last_Node: cc.Node,
        Up_Particle: cc.Prefab,
        Down_Particle: cc.Prefab,
        Eye_Bullet: cc.Prefab,
        Plait_Bullet: cc.Prefab,
        Plait_Shoot_Number: 0,
        Plait_Shoot_Angle: 0,
        Plait_Shoot_Angle_Add_Or_Sub: 0,
        Plait_Shoot_Schedule: cc.Schedule
      },
      start: function start() {
        this.Plait_Shoot_Schedule = function() {
          var _this = this;
          if (this.Plait_Shoot_Number < 150) {
            var Bullet = cc.instantiate(this.Plait_Bullet);
            Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            this.Enemy_Common.Bullet_Attack_Count();
            Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            Bullet.x = this.node.x - 92.969;
            Bullet.y = this.node.y + 58.737;
            Bullet.angle = this.Plait_Shoot_Angle;
            Bullet_Common_Script.Ini_Speed = 800 * Math.cos(Bullet.angle * Math.PI / 180) * -1;
            Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(Bullet.angle * Math.PI / 180);
            Bullet_Common_Script.Set_Speed();
            0 == this.Plait_Shoot_Angle_Add_Or_Sub ? this.Plait_Shoot_Angle += 4 : this.Plait_Shoot_Angle -= 4;
            this.Plait_Shoot_Angle >= 45 ? this.Plait_Shoot_Angle_Add_Or_Sub = 1 : this.Plait_Shoot_Angle <= -45 && (this.Plait_Shoot_Angle_Add_Or_Sub = 0);
            this.Plait_Shoot_Number++;
          } else {
            this.unschedule(this.Plait_Shoot_Schedule);
            cc.tween(this.node).delay(10).call(function() {
              _this.Special_Move_Content();
            }).start();
          }
        };
      },
      Think: function Think() {
        var _this2 = this;
        switch (this.Enemy_Common.Battle_Controller.Boss_Stage) {
         case 0:
          switch (this.Think_Stage) {
           case 0:
            var Particle = cc.instantiate(this.Up_Particle);
            Particle.parent = this.Enemy_Common.Particle_Parent;
            Particle.setPosition(0, 1200);
            var Particle = cc.instantiate(this.Down_Particle);
            Particle.parent = this.Enemy_Common.Particle_Parent;
            Particle.setPosition(0, -1200);
            cc.tween(this.node).call(function() {
              _this2.Create_Big_Chushou(1, 0, -867.921);
            }).delay(1).call(function() {
              _this2.Create_Big_Chushou(1, 1e3, -867.921);
              _this2.Create_Big_Chushou(1, -1e3, -867.921);
            }).delay(1).call(function() {
              _this2.Create_Big_Chushou(0, -1500, 867.921);
            }).delay(1).call(function() {
              _this2.Create_Big_Chushou(0, 1500, 867.921);
              _this2.Eye_Shoot();
            }).delay(15).call(function() {
              _this2.Special_Move_Content();
            }).start();
            this.Think_Stage++;
            break;

           case 1:
            this.Plait_Attack();
            break;

           case 2:
            this.Think_Stage = 0;
          }
        }
      },
      Create_Big_Chushou: function Create_Big_Chushou(Up_Or_Down, x, y) {
        for (var i = 0; i < 10; i++) {
          var Bullet = cc.instantiate(this.Big_Chushou_Bullet);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet.x = x;
          Bullet.y = y;
          var Script = Bullet.getComponent("Boss_YKNG_Big_Chushou_Bullet");
          Script.Number = i;
          if (0 == i) {
            this.Big_Chushou_Father_Node_Script = Script;
            this.Big_Chushou_Last_Node = Bullet;
          } else {
            Script.Last_Node = this.Big_Chushou_Last_Node;
            this.Big_Chushou_Father_Node_Script.Son.push(Bullet);
            this.Big_Chushou_Last_Node = Bullet;
          }
          Script.Up_Or_Down = Up_Or_Down;
        }
        for (var i = 0; i < this.Enemy_Common.Enemy_Bullet_Parent.children.length; i++) {
          var Script = this.Enemy_Common.Enemy_Bullet_Parent.children[i].getComponent("Boss_YKNG_Big_Chushou_Bullet");
          null != Script && Script.Start_Set();
        }
      },
      Eye_Shoot: function Eye_Shoot() {
        var Bullet = cc.instantiate(this.Eye_Bullet);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet.x = 2e3;
        Bullet.y = 1e3 * Math.random() - 500;
      },
      Plait_Attack: function Plait_Attack() {
        this.Plait_Shoot_Number = 0;
        this.Enemy_Common.Animation.play("Boss_YKNG_Attack");
        this.Back_Particle.emissionRate = 20;
        this.schedule(this.Plait_Shoot_Schedule, .04);
      },
      Half_Hp: function Half_Hp() {
        this.Enemy_Common.Speed = 3 * this.Enemy_Common.Speed;
      },
      Special_Move_Content: function Special_Move_Content() {
        this.Think();
      },
      Special_Change_Stage: function Special_Change_Stage() {}
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Buff_Icon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c12faklvPtINI0urOwwT5cs", "Buff_Icon");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Animation: cc.Animation,
        Sprite: cc.Sprite,
        Label: cc.Label
      },
      start: function start() {},
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        this.Battle_Controller.Buff_Icon_Sort();
      }
    });
    cc._RF.pop();
  }, {} ],
  Bullet_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "10f38UOoA9Ifr/bJXsugSE5", "Bullet_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Normal_Bullet_Extra_Check_Prefab: [ cc.Prefab ],
        Normal_Bullet_Extra_Check_Script: [ cc.Node ]
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Camera_Follow: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d6b50gLYb5GDqMLdysbmVLK", "Camera_Follow");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Parent: cc.Node,
        Hero: cc.Node,
        speed: 1e3,
        Time: 0,
        Up_Bound: 402,
        Down_Bound: -402,
        Left_Bound: -838,
        Right_Bound: 838,
        Hero_Start_X: 0
      },
      Start_Set: function Start_Set() {
        this.Hero = this.Hero_Parent.children[0];
      },
      Follow_Start: function Follow_Start() {
        if (this.Hero.y >= this.Down_Bound && this.Hero.y <= this.Up_Bound && this.Hero.x >= this.Left_Bound - this.Hero_Start_X && this.Hero.x <= this.Right_Bound - this.Hero_Start_X) {
          var Dis_X_Pow = Math.pow(this.Hero.x + this.Hero_Start_X - this.node.x, 2);
          var Dis_Y_Pow = Math.pow(this.Hero.y - this.node.y, 2);
          var Dis = Math.sqrt(Dis_X_Pow + Dis_Y_Pow);
          this.Time = 2;
          cc.tween(this.node).delay(1e-5).to(this.Time, {
            position: cc.v2(this.Hero.x + this.Hero_Start_X, this.Hero.y)
          }, {
            easing: "quadOut"
          }).start();
        } else if (this.Hero.y > this.Down_Bound && this.Hero.y < this.Up_Bound && this.Hero.x < this.Left_Bound - this.Hero_Start_X) {
          var Dis_X_Pow = Math.pow(this.Left_Bound - this.node.x, 2);
          var Dis_Y_Pow = Math.pow(this.Hero.y - this.node.y, 2);
          var Dis = Math.sqrt(Dis_X_Pow + Dis_Y_Pow);
          this.Time = 2;
          cc.tween(this.node).delay(1e-5).to(this.Time, {
            position: cc.v2(this.Left_Bound, this.Hero.y)
          }, {
            easing: "quadOut"
          }).start();
        } else if (this.Hero.y > this.Down_Bound && this.Hero.y < this.Up_Bound && this.Hero.x > this.Right_Bound - this.Hero_Start_X) {
          var Dis_X_Pow = Math.pow(this.Right_Bound - this.node.x, 2);
          var Dis_Y_Pow = Math.pow(this.Hero.y - this.node.y, 2);
          var Dis = Math.sqrt(Dis_X_Pow + Dis_Y_Pow);
          this.Time = 2;
          cc.tween(this.node).delay(1e-5).to(this.Time, {
            position: cc.v2(this.Right_Bound, this.Hero.y)
          }, {
            easing: "quadOut"
          }).start();
        } else if (this.Hero.y < this.Down_Bound && this.Hero.x > this.Left_Bound - this.Hero_Start_X && this.Hero.x < this.Right_Bound - this.Hero_Start_X) {
          var Dis_X_Pow = Math.pow(this.Hero.x + this.Hero_Start_X - this.node.x, 2);
          var Dis_Y_Pow = Math.pow(this.Down_Bound - this.node.y, 2);
          var Dis = Math.sqrt(Dis_X_Pow + Dis_Y_Pow);
          this.Time = 2;
          cc.tween(this.node).delay(1e-5).to(this.Time, {
            position: cc.v2(this.Hero.x + this.Hero_Start_X, this.Down_Bound)
          }, {
            easing: "quadOut"
          }).start();
        } else if (this.Hero.y > this.Up_Bound && this.Hero.x > this.Left_Bound - this.Hero_Start_X && this.Hero.x < this.Right_Bound - this.Hero_Start_X) {
          var Dis_X_Pow = Math.pow(this.Hero.x + this.Hero_Start_X - this.node.x, 2);
          var Dis_Y_Pow = Math.pow(this.Up_Bound - this.node.y, 2);
          var Dis = Math.sqrt(Dis_X_Pow + Dis_Y_Pow);
          this.Time = 2;
          cc.tween(this.node).delay(1e-5).to(this.Time, {
            position: cc.v2(this.Hero.x + this.Hero_Start_X, this.Up_Bound)
          }, {
            easing: "quadOut"
          }).start();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Chat_Menu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80af02sRCtARos9GByZMWGC", "Chat_Menu");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Progress: 0,
        Can_Click: 0,
        Chat_Menu_Button: cc.Node,
        Boss_Image: [ cc.SpriteFrame ],
        Chat_Picture: cc.Sprite,
        Is_Open_Button: 0,
        Animation: cc.Animation
      },
      Chat: function Chat(Boss) {
        var _this = this;
        switch (Boss) {
         case 0:
          switch (this.Progress) {
           case 0:
            this.Can_Click = 0;
            cc.Tween.stopAllByTarget(this.Battle_Controller.Hero);
            cc.tween(this.Battle_Controller.Hero).to(.3, {
              position: cc.v2(-720.697, 0)
            }).call(function() {
              _this.Can_Click = 1;
            }).start();
            this.Chat_Show();
            this.Chat_Picture.spriteFrame = this.Boss_Image[0];
            this.Progress++;
            break;

           case 1:
            this.Chat_Picture.spriteFrame = this.Boss_Image[1];
            this.Progress++;
            break;

           case 2:
            this.Chat_Picture.spriteFrame = this.Boss_Image[2];
            this.Progress++;
            break;

           case 3:
            this.Battle_Controller.Boss_Battle_Start();
            this.Chat_End();
            this.Progress++;
            break;

           case 4:
            this.Chat_Picture.spriteFrame = this.Boss_Image[3];
            this.Progress++;
            this.Chat_Show();
            break;

           case 4:
            this.Battle_Controller.Continue_Boss_Battle();
            this.Chat_End();
            this.Progress = 0;
          }
          break;

         case 1:
          switch (this.Progress) {
           case 0:
            this.Chat_Show();
            this.Can_Click = 0;
            cc.Tween.stopAllByTarget(this.Battle_Controller.Hero);
            cc.tween(this.Battle_Controller.Hero).to(.3, {
              position: cc.v2(-720.697, 0)
            }).call(function() {
              _this.Battle_Controller.JoyStick.Up_Bound = 451.178;
              _this.Battle_Controller.JoyStick.Down_Bound = -451.178;
              _this.Battle_Controller.JoyStick.Left_Bound = -1111.298;
              _this.Battle_Controller.JoyStick.Right_Bound = 1111.298;
              _this.Can_Click = 1;
            }).start();
            this.Chat_Picture.spriteFrame = this.Boss_Image[0];
            this.Progress++;
            break;

           case 1:
            this.Chat_Picture.spriteFrame = this.Boss_Image[1];
            this.Progress++;
            break;

           case 2:
            this.Chat_Picture.spriteFrame = this.Boss_Image[2];
            this.Animation.play("Chat_Menu_Shake");
            this.Progress++;
            break;

           case 3:
            this.Animation.play("Chat_Menu_Shake_Big");
            this.Chat_Picture.spriteFrame = this.Boss_Image[3];
            this.Progress++;
            break;

           case 4:
            this.Battle_Controller.Boss_Battle_Start();
            this.Chat_End();
            this.Progress++;
            break;

           case 5:
            this.Chat_Show();
            this.Chat_Picture.spriteFrame = this.Boss_Image[4];
            this.Progress++;
            break;

           case 6:
            this.Animation.play("Chat_Menu_Shake");
            this.Chat_Picture.spriteFrame = this.Boss_Image[5];
            this.Progress++;
            break;

           case 7:
            this.Chat_Picture.spriteFrame = this.Boss_Image[6];
            this.Progress++;
            break;

           case 8:
            this.Battle_Controller.Camera_Shake_Big();
            this.Battle_Controller.Hero_Injured_White.play();
            this.Battle_Controller.BG_Parent.children[0].children[1].active = true;
            cc.find("Canvas/Front_BG/Front_BG_9/Tetris_BG_Frame").destroy();
            cc.find("Canvas/Front_BG/Front_BG_9/Tetris_BG_Frame_Out").destroy();
            cc.find("Canvas/BG_Parent/New_BG_9/Frame_Particle").destroy();
            this.Battle_Controller.JoyStick.Up_Bound = 864;
            this.Battle_Controller.JoyStick.Down_Bound = -864;
            this.Battle_Controller.JoyStick.Left_Bound = -1920;
            this.Battle_Controller.JoyStick.Right_Bound = 1920;
            cc.find("Canvas/Enemy/Boss_Tetris").getComponent("Boss_Tetris").Smoke_And_Create_Splinter();
            this.Chat_Picture.spriteFrame = this.Boss_Image[7];
            this.Progress++;
            break;

           case 9:
            var BUG_Line_BG = cc.find("Canvas/BG_Parent/New_BG_9/BUG_Line_BG").getComponent(cc.Sprite);
            cc.tween(BUG_Line_BG).to(1, {
              fillRange: 1
            }).start();
            this.Battle_Controller.Boss_Tetris_BUG_Progress_Line = cc.find("Canvas/BG_Parent/New_BG_9/BUG_Line");
            this.Chat_Picture.spriteFrame = this.Boss_Image[8];
            this.Progress++;
            break;

           case 10:
            this.Battle_Controller.Continue_Boss_Battle();
            this.Chat_End();
            this.Progress = 0;
          }
          break;

         case 2:
          switch (this.Progress) {
           case 0:
            this.Can_Click = 0;
            cc.Tween.stopAllByTarget(this.Battle_Controller.Hero);
            cc.tween(this.Battle_Controller.Hero).to(.3, {
              position: cc.v2(-720.697, 0)
            }).call(function() {
              _this.Can_Click = 1;
            }).start();
            this.Chat_Show();
            this.Chat_Picture.spriteFrame = this.Boss_Image[0];
            this.Progress++;
            break;

           case 1:
            this.Chat_Picture.spriteFrame = this.Boss_Image[1];
            this.Progress++;
            break;

           case 2:
            this.Chat_Picture.spriteFrame = this.Boss_Image[2];
            this.Progress++;
            break;

           case 3:
            this.Chat_Picture.spriteFrame = this.Boss_Image[3];
            this.Progress++;
            break;

           case 4:
            this.Chat_Picture.spriteFrame = this.Boss_Image[4];
            this.Progress++;
            break;

           case 5:
            this.Chat_Picture.spriteFrame = this.Boss_Image[5];
            this.Progress++;
            break;

           case 6:
            this.Chat_Picture.spriteFrame = this.Boss_Image[6];
            this.Progress++;
            break;

           case 7:
            this.Chat_Picture.spriteFrame = this.Boss_Image[7];
            this.Progress++;
            break;

           case 8:
            this.Chat_Picture.spriteFrame = this.Boss_Image[8];
            this.Progress++;
            break;

           case 9:
            this.Chat_Picture.spriteFrame = this.Boss_Image[9];
            this.Progress++;
            break;

           case 10:
            this.Chat_Picture.spriteFrame = this.Boss_Image[10];
            this.Progress++;
            break;

           case 11:
            this.Chat_Picture.spriteFrame = this.Boss_Image[11];
            this.Progress++;
            break;

           case 12:
            this.Chat_Picture.spriteFrame = this.Boss_Image[12];
            this.Progress++;
            break;

           case 13:
            this.Battle_Controller.Boss_Battle_Start();
            this.Chat_End();
            this.Progress = 14;
            break;

           case 14:
            this.Chat_Show();
            this.Chat_Picture.spriteFrame = this.Boss_Image[13];
            cc.tween(this.Battle_Controller.Hero).to(.3, {
              position: cc.v2(-720.697, 0)
            }).start();
            this.Progress++;
            break;

           case 15:
            this.Chat_Picture.spriteFrame = this.Boss_Image[14];
            this.Progress++;
            break;

           case 16:
            this.Chat_Picture.spriteFrame = this.Boss_Image[15];
            this.Progress++;
            break;

           case 17:
            this.Chat_Picture.spriteFrame = this.Boss_Image[16];
            this.Progress++;
            this.Chat_End();
            var Boss_Water_Script = cc.find("Canvas/Enemy/Boss_Water").getComponent("Boss_Water");
            Boss_Water_Script.Water_Attack_Back_Fire_Show();
          }
          break;

         case 3:
          switch (this.Progress) {
           case 0:
            this.Chat_Show();
            this.Chat_Picture.spriteFrame = this.Boss_Image[13];
            this.Progress++;
            break;

           case 1:
            this.Battle_Controller.Boss_Battle_Start();
            this.Chat_End();
          }

         case 4:
          switch (this.Progress) {
           case 0:
            this.Chat_Show();
            this.Chat_Picture.spriteFrame = this.Boss_Image[13];
            this.Progress++;
            break;

           case 1:
            this.Battle_Controller.Boss_Battle_Start();
            this.Chat_End();
          }
        }
      },
      Chat_Show: function Chat_Show() {
        var _this2 = this;
        cc.Tween.stopAllByTarget(this.node);
        cc.tween(this.node).to(.5, {
          opacity: 255
        }).call(function() {
          _this2.Can_Click = 1;
          if (0 == _this2.Is_Open_Button) {
            _this2.Chat_Menu_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
              1 == this.Can_Click && this.Chat(this.Battle_Controller.Enemy_Create.Boss_ID);
            }, _this2);
            _this2.Is_Open_Button = 1;
          }
        }).start();
      },
      Chat_End: function Chat_End() {
        var _this3 = this;
        this.Can_Click = 0;
        cc.Tween.stopAllByTarget(this.node);
        cc.tween(this.node).to(.5, {
          opacity: 0
        }).call(function() {
          _this3.node.active = false;
        }).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Cloud_1: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "868fdDeq3VFEoAthYgCdL1l", "Cloud_1");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      update: function update(dt) {
        this.node.x -= 80;
        this.node.x <= -4000.853 && (this.node.x = 4000.858);
      }
    });
    cc._RF.pop();
  }, {} ],
  Cloud_2: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f25d3E9CZJD5pz2GZAQJMpA", "Cloud_2");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      update: function update(dt) {
        this.node.x -= 30;
        this.node.x <= -4000.357 && (this.node.x = 4000.234);
      }
    });
    cc._RF.pop();
  }, {} ],
  Cloud_3: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "85a51rJiAhCo5/3UNA3H0Ck", "Cloud_3");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      update: function update(dt) {
        this.node.x -= 10;
        this.node.x <= -4000.554 && (this.node.x = 4000.996);
      }
    });
    cc._RF.pop();
  }, {} ],
  Cloud_4: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58cb4pl5v5Ftpl0qEKRgRQZ", "Cloud_4");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      update: function update(dt) {
        this.node.x -= 5;
        this.node.x <= -4000.554 && (this.node.x = 4000.996);
      }
    });
    cc._RF.pop();
  }, {} ],
  Code_Rain_Up_Down: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "232212AfDVG5Kza4Y55c3tg", "Code_Rain_Up_Down");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Number: 0,
        New_Rain: cc.Prefab,
        Sprite: cc.Sprite,
        SpriteFrame: [ cc.SpriteFrame ]
      },
      start: function start() {
        this.Sprite.spriteFrame = this.SpriteFrame[Math.floor(Math.random() * this.SpriteFrame.length)];
      },
      Create_New: function Create_New() {
        if (this.Number <= 15) {
          var node = cc.instantiate(this.New_Rain);
          node.parent = this.node.parent;
          node.setPosition(this.node.x, this.node.y - 30);
          node.getComponent("Code_Rain_Up_Down").Number = this.Number + 1;
        }
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Code_Rain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37c8egp7RJNCrWFnhowd3yD", "Code_Rain");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Sprite: cc.Sprite,
        SpriteFrame: [ cc.SpriteFrame ]
      },
      start: function start() {
        this.Sprite.spriteFrame = this.SpriteFrame[Math.floor(Math.random() * this.SpriteFrame.length)];
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Destroy_Self: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ea72dneYFZBwbXgBd8ENhpt", "Destroy_Self");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Down_Cloud: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4119dZQKclEeLUF+JnCcwyY", "Down_Cloud");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().to(15 * Math.random() + 1, {
          position: cc.v2(-8e3, this.node.y)
        }).call(function() {
          _this.node.x = 8e3;
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Enemy_Angle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b3923wgHV9OtrqdY1JzYnKK", "Enemy_Angle");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Number: 0,
        Move_Stage: 0,
        Wait_Time: 0,
        In_Target_X: 0,
        In_Target_Y: 0,
        Sprint_Time: 0,
        Sprint_Particle: cc.ParticleSystem,
        Ghost: cc.Prefab,
        CJB_Parent_Animation: cc.Animation
      },
      start: function start() {
        this.Special_Move_Content();
      },
      Special_Move_Content: function Special_Move_Content() {
        var _this = this;
        var dis_x = Math.pow(this.In_Target_X - this.node.x, 2);
        var dis_y = Math.pow(this.In_Target_Y - this.node.y, 2);
        var dis = Math.sqrt(dis_x + dis_y);
        if (0 == this.Move_Stage) cc.tween(this.node).to(dis / this.Enemy_Common.Speed, {
          position: cc.v2(this.In_Target_X, this.In_Target_Y)
        }, {
          easing: "quartIn"
        }).call(function() {
          _this.Stage_Change();
        }).start(); else if (1 == this.Move_Stage) cc.tween(this.node).delay(this.Wait_Time).call(function() {
          _this.Stage_Change();
        }).start(); else if (2 == this.Move_Stage) {
          this.CJB_Parent_Animation.play();
          cc.tween(this.Sprint_Particle).by(2, {
            emissionRate: 999
          }, {
            easing: "quartIn"
          }).start();
          cc.tween(this.node).by(4, {
            position: cc.v2(-4e3, 0)
          }, {
            easing: "quartIn"
          }).call(function() {
            _this.No_Reward_Dead();
          }).start();
        }
      },
      Stage_Change: function Stage_Change() {
        this.Move_Stage++;
        this.Special_Move_Content();
        2 == this.Move_Stage && this.Animation.play("Enemy_Angle_Sprint");
      },
      To_Sprinting: function To_Sprinting() {
        this.Animation.play("Enemy_Angle_Sprinting");
        this.schedule(function() {
          var node = cc.instantiate(this.Ghost);
          node.parent = this.Enemy_Common.Battle_Controller.Hero_Ghost_Parent;
          node.setPosition(this.node.x, this.node.y);
        }, .05);
      },
      Is_Interrupting_To_Sprint: function Is_Interrupting_To_Sprint() {
        0 == this.Enemy_Common.Is_Interrupting;
        this.Sprint();
      },
      Sprint: function Sprint() {
        var _this2 = this;
        this.Animation.play(this.node.name + "_Stay");
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          var Dis_X = this.Enemy_Common.Battle_Controller.Hero.x;
          var Dis_Y = this.Enemy_Common.Battle_Controller.Hero.y;
          var Dis = Math.sqrt(Math.pow(Dis_X - this.node.x, 2) + Math.pow(Dis_Y - this.node.y, 2));
          var time = Dis / this.Enemy_Common.Speed;
          cc.tween(this.node).to(1 * time, {
            position: cc.v2(Dis_X, Dis_Y)
          }, {
            easing: "quintInOut"
          }).call(function() {
            0 == _this2.Enemy_Common.Is_Interrupting && _this2.Think();
          }).start();
        }
      },
      No_Reward_Dead: function No_Reward_Dead() {
        if (0 == this.Enemy_Common.Is_Dead) {
          this.Enemy_Common.Is_Dead = 1;
          this.node.destroy();
        }
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_BUG: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c277fXuSKJMaoIvop7QBzkR", "Enemy_BUG");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    var Motion_Streak_Script = require("Motion_Streak_Script");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Common: Enemy_Common,
        Wait_Time: 0,
        Target_Y_Up: 0,
        Target_Y_Down: 0,
        Y_Speed: 200,
        X_Speed: 800,
        Sprite: cc.Sprite,
        Motion_Streak_Script: Motion_Streak_Script,
        Ghost: cc.Prefab,
        Coin: cc.Prefab
      },
      start: function start() {
        this.Target_Y_Up = this.node.y + 200;
        this.Target_Y_Down = this.node.y - 200;
        this.Special_Move_Content();
        this.schedule(function() {
          var Ghost = cc.instantiate(this.Ghost);
          Ghost.parent = this.Enemy_Common.Battle_Controller.Particle_Parent_Back;
          Ghost.x = this.node.x;
          Ghost.y = this.node.y;
          var color = Math.floor(3 * Math.random());
          switch (color) {
           case 0:
            Ghost.color = cc.color(255, 126, 126);
            break;

           case 1:
            Ghost.color = cc.color(126, 255, 216);
            break;

           case 2:
            Ghost.color = cc.color(126, 160, 255);
          }
        }, .1);
      },
      Special_Move_Content: function Special_Move_Content() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().to(Math.abs(this.Target_Y_Up - this.node.y) / this.Y_Speed, {
          y: this.Target_Y_Up
        }, {
          easing: "quartInOut"
        }).to(Math.abs(this.Target_Y_Down - this.node.y) / this.Y_Speed, {
          y: this.Target_Y_Down
        }, {
          easing: "quartInOut"
        })).start();
        cc.tween(this.node).to(Math.abs(-2200 - this.node.x) / this.X_Speed, {
          x: -2200
        }).call(function() {
          _this.No_Reward_Dead();
        }).start();
      },
      No_Reward_Dead: function No_Reward_Dead() {
        if (0 == this.Enemy_Common.Is_Dead) {
          this.Enemy_Common.Is_Dead = 1;
          this.Motion_Streak_Script.node.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
          this.Motion_Streak_Script.node.setPosition(this.node.x, this.node.y);
          this.Motion_Streak_Script.Wait_Destroy();
          this.node.destroy();
        }
      },
      Special_Dead: function Special_Dead() {
        this.Motion_Streak_Script.node.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        this.Motion_Streak_Script.node.setPosition(this.node.x, this.node.y);
        this.Motion_Streak_Script.Wait_Destroy();
        var Coin = cc.instantiate(this.Coin);
        Coin.parent = this.Enemy_Common.Battle_Controller.Particle_Parent;
        Coin.x = this.node.x;
        Coin.y = this.node.y;
        console.log(Coin);
        var Script = Coin.getComponent("BUG_Coin");
        Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Script.Hero = cc.find("Canvas/Enemy/Boss_Tetris");
        Script.Start_Set();
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common",
    Motion_Streak_Script: "Motion_Streak_Script"
  } ],
  Enemy_Black_Man_Bomb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "188eeEQdBxJxK123HsBD+zM", "Enemy_Black_Man_Bomb");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Bullet_Prefab: cc.Prefab
      },
      start: function start() {
        this.scheduleOnce(function() {
          this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = 0;
          Bullet_Script.Ini_Speed_Y = 500;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = 250;
          Bullet_Script.Ini_Speed_Y = 250;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = 500;
          Bullet_Script.Ini_Speed_Y = 0;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = 250;
          Bullet_Script.Ini_Speed_Y = -250;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = 0;
          Bullet_Script.Ini_Speed_Y = -500;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = -250;
          Bullet_Script.Ini_Speed_Y = -250;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = -500;
          Bullet_Script.Ini_Speed_Y = 0;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = -250;
          Bullet_Script.Ini_Speed_Y = 250;
          Bullet_Script.Set_Speed();
          this.node.destroy();
        }, 2);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Black_Man: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1c501IKb4tLzKNu6bCF3XIH", "Enemy_Black_Man");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Bullet_Accelerate: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9685WhwC9LSbzch3UqcjbZ", "Enemy_Bullet_Accelerate");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Target_Speed: 500,
        Now_Speed: 2e3,
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Schedule: cc.Schedule
      },
      start: function start() {
        this.Schedule = function() {
          if (this.Now_Speed >= this.Target_Speed) this.unschedule(this.Schedule); else {
            this.Now_Speed += 100;
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
          }
        };
        this.schedule(this.Schedule, .02);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Angle_Stone: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2a2c3odOutMrL9M+llWl3XC", "Enemy_Bullet_Angle_Stone");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Target_Speed: 500,
        Now_Speed: 2e3,
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Schedule: cc.Schedule
      },
      start: function start() {
        this.Schedule = function() {
          if (this.Now_Speed <= this.Target_Speed) this.unschedule(this.Schedule); else {
            this.Now_Speed -= 100;
            this.Enemy_Bullet_Common.Ini_Speed = -this.Now_Speed;
            this.Enemy_Bullet_Common.Set_Speed();
          }
        };
        this.schedule(this.Schedule, .02);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Butterfly: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "129cfoK1ExIY7mO8O0Wn9wm", "Enemy_Bullet_Butterfly");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Body_Image: [ cc.SpriteFrame ],
        Wing_Image: [ cc.SpriteFrame ],
        Body_Sprite: cc.Sprite,
        Wing_Sprite: cc.Sprite
      },
      start: function start() {
        var color = Math.floor(4 * Math.random());
        this.Body_Sprite.spriteFrame = this.Body_Image[color];
        this.Wing_Sprite.spriteFrame = this.Wing_Image[color];
      }
    });
    cc._RF.pop();
  }, {} ],
  Enemy_Bullet_Coin_Son: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d5488msnhlFXpaRjJZ1X8Sa", "Enemy_Bullet_Coin_Son");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Animation: cc.Animation,
        Number: 0
      },
      Move: function Move() {
        switch (this.Number) {
         case 0:
          this.Enemy_Bullet_Common.Ini_Speed = -300;
          this.Enemy_Bullet_Common.Ini_Speed_Y = 0;
          break;

         case 1:
          this.Enemy_Bullet_Common.Ini_Speed = 0;
          this.Enemy_Bullet_Common.Ini_Speed_Y = 300;
          break;

         case 2:
          this.Enemy_Bullet_Common.Ini_Speed = 0;
          this.Enemy_Bullet_Common.Ini_Speed_Y = -300;
          break;

         case 3:
          this.Enemy_Bullet_Common.Ini_Speed = 300;
          this.Enemy_Bullet_Common.Ini_Speed_Y = 0;
        }
        this.Enemy_Bullet_Common.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Coin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6da36HdWfVJ4ZgkF4sB1MI0", "Enemy_Bullet_Coin");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Son_Bullet: cc.Prefab,
        Wait_Time: 0,
        Animation: cc.Animation
      },
      start: function start() {
        this.Enemy_Bullet_Common.Set_Speed();
        this.Wait_Time = Math.floor(7 * Math.random() + 2);
        this.scheduleOnce(function() {
          this.Enemy_Bullet_Common.Ini_Speed_Y = 0;
          this.Enemy_Bullet_Common.Set_Speed();
          this.Animation.play();
        }, this.Wait_Time);
      },
      Create_Son_Bullet: function Create_Son_Bullet() {
        var Bullet = cc.instantiate(this.Son_Bullet);
        Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 37.5;
        Bullet.y = this.node.y + 36.461;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        var Enemy_Bullet_Coin_Son = Bullet.getComponent("Enemy_Bullet_Coin_Son");
        Enemy_Bullet_Coin_Son.Number = 0;
        var Bullet = cc.instantiate(this.Son_Bullet);
        Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 38.509;
        Bullet.y = this.node.y + 36.461;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        var Enemy_Bullet_Coin_Son = Bullet.getComponent("Enemy_Bullet_Coin_Son");
        Enemy_Bullet_Coin_Son.Number = 1;
        var Bullet = cc.instantiate(this.Son_Bullet);
        Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 38.509;
        Bullet.y = this.node.y - 37.357;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        var Enemy_Bullet_Coin_Son = Bullet.getComponent("Enemy_Bullet_Coin_Son");
        Enemy_Bullet_Coin_Son.Number = 2;
        var Bullet = cc.instantiate(this.Son_Bullet);
        Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 37.5;
        Bullet.y = this.node.y - 37.357;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        var Enemy_Bullet_Coin_Son = Bullet.getComponent("Enemy_Bullet_Coin_Son");
        Enemy_Bullet_Coin_Son.Number = 3;
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "995588GcdtLKITAEpBdggsJ", "Enemy_Bullet_Common");
    "use strict";
    var Motion_Streak_Script = require("Motion_Streak_Script");
    cc.Class({
      extends: cc.Component,
      properties: {
        Is_Normal_Bullet: 1,
        Battle_Controller: cc.Node,
        Attack: 0,
        Jing_Jie: 0,
        Ini_Speed: -1e3,
        Ini_Speed_Y: 0,
        RigidBody: cc.RigidBody,
        Can_Destroy: 1,
        Can_Bound_Destroy: 1,
        Particle: cc.Node,
        Many_Particle: [ cc.Node ],
        Motion_Streak_Script: Motion_Streak_Script,
        Is_Tetris: 0,
        Is_Wait_Trigger: 0,
        Trigger_Wait_Time: 0,
        Can_Be_Mozu_Blackhole_Absorb: 1,
        Is_Mozu_Blackhole_Absorbing: 0,
        Special_Destroy_Particle: cc.Prefab,
        Special_Number: 0
      },
      Set_Speed: function Set_Speed() {
        0 == this.Is_Mozu_Blackhole_Absorbing && (this.RigidBody.linearVelocity = cc.v2(this.Ini_Speed * this.Battle_Controller.Enemy_Bullet_Speed_Ratio, this.Ini_Speed_Y * this.Battle_Controller.Enemy_Bullet_Speed_Ratio));
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Bullet_Bound" == otherCollider.node.group) {
          if (1 == this.Can_Bound_Destroy) {
            if (null != this.Particle) {
              this.Particle.parent = this.Battle_Controller.Particle_Parent;
              this.Particle.getComponent(cc.ParticleSystem).duration = .1;
            }
            if (0 != this.Many_Particle.length) for (var i = 0; i < this.Many_Particle.length; i++) {
              this.Many_Particle[i].parent = this.Battle_Controller.Particle_Parent;
              this.Many_Particle[i].getComponent(cc.ParticleSystem).duration = .1;
            }
            if (null != this.Motion_Streak_Script) this.Have_Motion_Streak_Destroy(); else {
              if (null != this.Special_Destroy_Particle) {
                var Particle = cc.instantiate(this.Special_Destroy_Particle);
                Particle.parent = this.Battle_Controller.Particle_Parent;
                Particle.x = this.node.x;
                Particle.y = this.node.y;
              }
              this.node.destroy();
            }
          }
        } else if ("Hero" == otherCollider.node.group && 1 == this.Is_Normal_Bullet && 0 == this.Is_Mozu_Blackhole_Absorbing) {
          var Hero_Common_Script = otherCollider.node.getComponent("Hero_Common");
          if (0 == Hero_Common_Script.Is_Sprint) {
            Hero_Common_Script.Normal_Injured(this.Attack, this.Jing_Jie);
            1 == this.Can_Destroy && this.Be_Destroy();
          }
        }
      },
      Be_Destroy: function Be_Destroy() {
        if (1 == this.Can_Destroy) {
          var Particle = cc.instantiate(this.Battle_Controller.Enemy_Bullet_Destroy_Particle);
          Particle.parent = this.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x, this.node.y);
          if (null != this.Special_Destroy_Particle) {
            var Particle = cc.instantiate(this.Special_Destroy_Particle);
            Particle.parent = this.Battle_Controller.Particle_Parent;
            Particle.x = this.node.x;
            Particle.y = this.node.y;
          }
          if (null != this.Particle) {
            this.Particle.parent = this.Battle_Controller.Particle_Parent;
            this.Particle.getComponent(cc.ParticleSystem).duration = .1;
          }
          if (0 != this.Many_Particle.length) for (var i = 0; i < this.Many_Particle.length; i++) {
            this.Many_Particle[i].parent = this.Battle_Controller.Particle_Parent;
            this.Many_Particle[i].getComponent(cc.ParticleSystem).duration = .1;
          }
          null != this.Motion_Streak_Script ? this.Have_Motion_Streak_Destroy() : this.node.destroy();
        }
      },
      Must_Destroy: function Must_Destroy() {
        var Particle = cc.instantiate(this.Battle_Controller.Enemy_Bullet_Destroy_Particle);
        Particle.parent = this.Battle_Controller.Particle_Parent;
        Particle.setPosition(this.node.x, this.node.y);
        if (null != this.Special_Destroy_Particle) {
          var Particle = cc.instantiate(this.Special_Destroy_Particle);
          Particle.parent = this.Battle_Controller.Particle_Parent;
          Particle.x = this.node.x;
          Particle.y = this.node.y;
        }
        if (null != this.Particle) {
          this.Particle.parent = this.Battle_Controller.Particle_Parent;
          this.Particle.getComponent(cc.ParticleSystem).duration = .1;
        }
        if (0 != this.Many_Particle.length) for (var i = 0; i < this.Many_Particle.length; i++) {
          this.Many_Particle[i].parent = this.Battle_Controller.Particle_Parent;
          this.Many_Particle[i].getComponent(cc.ParticleSystem).duration = .1;
        }
        if (null != this.Motion_Streak_Script) this.Have_Motion_Streak_Destroy(); else {
          if (null != this.Special_Destroy_Particle) {
            var Particle = cc.instantiate(this.Special_Destroy_Particle);
            Particle.parent = this.Battle_Controller.Particle_Parent;
            Particle.x = this.node.x;
            Particle.y = this.node.y;
          }
          this.node.destroy();
        }
      },
      Be_Mozu_Blackhole_Absorb: function Be_Mozu_Blackhole_Absorb(x, y) {
        var _this = this;
        this.Ini_Speed = 0;
        this.Ini_Speed_Y = 0;
        this.Set_Speed();
        this.Can_Destroy = 0;
        this.Is_Mozu_Blackhole_Absorbing = 1;
        this.Is_Wait_Trigger = 0;
        cc.Tween.stopAllByTarget(this.Node);
        this.unscheduleAllCallbacks;
        var t = cc.tween;
        t(this.node).parallel(t().to(.2, {
          position: cc.v2(x, y),
          scale: 0
        }, {
          easing: "quadIn"
        }), t().by(.2, {
          angle: 200
        }, {
          easing: "quadIn"
        })).call(function() {
          null != _this.Motion_Streak_Script ? _this.Have_Motion_Streak_Destroy() : _this.node.destroy();
        }).start();
      },
      Have_Motion_Streak_Destroy: function Have_Motion_Streak_Destroy() {
        this.node.stopAllActions();
        cc.Tween.stopAllByTarget(this.Node);
        var Animation = this.node.getComponent(cc.Animation);
        null != Animation && Animation.stop();
        var Component = this.node.getComponents(cc.Component);
        for (var i = 0; i < Component.length; i++) Component[i].unscheduleAllCallbacks();
        this.node.group = "Dead_Bullet";
        this.node.parent = this.Battle_Controller.Dead_Bullet_Parent;
        this.RigidBody.enabledContactListener = false;
        this.RigidBody.linearVelocity = cc.v2(0, 0);
        this.node.scale = cc.v2(0, 0);
        this.scheduleOnce(function() {
          this.node.destroy();
        }, this.Motion_Streak_Script.Destroy_Time);
      }
    });
    cc._RF.pop();
  }, {
    Motion_Streak_Script: "Motion_Streak_Script"
  } ],
  Enemy_Bullet_Demon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d5607q1MlVDOZeRfsYcnB+E", "Enemy_Bullet_Demon");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Start_Target_X: 0,
        Start_Target_Y: 0,
        Angle: 0,
        Now_Speed: 0,
        a: 0,
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Schedule: cc.Schedule
      },
      start: function start() {
        this.Start_Move();
      },
      Start_Move: function Start_Move() {
        var _this = this;
        cc.tween(this.node).to(.5, {
          position: cc.v2(this.Start_Target_X, this.Start_Target_Y)
        }, {
          easing: "quintInOut"
        }).call(function() {
          _this.Normal_Move();
        }).start();
      },
      Normal_Move: function Normal_Move() {
        this.Schedule = function() {
          this.Now_Speed += this.a;
          this.a++;
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.Angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.Angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        };
        this.schedule(this.Schedule, .02);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Doctor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0dc27P4qGpLULwqdBLFgnB0", "Enemy_Bullet_Doctor");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common
      },
      start: function start() {
        var _this = this;
        cc.tween(this.node).to(Math.abs((864 - this.node.y) / 2e3), {
          position: cc.v2(this.node.x, 864)
        }).call(function() {
          _this.node.x = Math.floor(1921 * Math.random() - 1920);
          _this.Enemy_Bullet_Common.Ini_Speed_Y = -400;
          _this.Enemy_Bullet_Common.Set_Speed();
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Fish_Seed: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ddc32FiYoRAxY16nWLle14F", "Enemy_Bullet_Fish_Seed");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Left_Or_Right: 0,
        Now_Speed: 300,
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Schedule: cc.Schedule
      },
      Set: function Set() {
        this.node.angle < -90 && (this.Left_Or_Right = 1);
        if (0 == this.Left_Or_Right) {
          this.Left_Schedule = function() {
            this.node.angle <= 90 ? this.node.angle += 2 : this.unschedule(this.Left_Schedule);
            this.Now_Speed += 20;
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
          };
          this.schedule(this.Left_Schedule, .02);
        } else {
          this.Right_Schedule = function() {
            this.node.angle >= -270 ? this.node.angle -= 2 : this.unschedule(this.Right_Schedule);
            this.Now_Speed += 20;
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
          };
          this.schedule(this.Right_Schedule, .02);
        }
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Fish: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc76ak7aC1CYYSLtQDWn7HH", "Enemy_Bullet_Fish");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Left_Or_Right: 0,
        Now_Speed: 500,
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Schedule: cc.Schedule,
        Seed_Bullet: cc.Prefab,
        Ink_Particle: cc.Prefab,
        Animation: cc.Animation
      },
      Set: function Set() {
        this.node.angle < -90 && (this.Left_Or_Right = 1);
        if (0 == this.Left_Or_Right) {
          this.Left_Schedule = function() {
            this.node.angle <= 90 ? this.node.angle += 2 : this.unschedule(this.Left_Schedule);
            this.Now_Speed += 30;
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
          };
          this.schedule(this.Left_Schedule, .02);
        } else {
          this.Right_Schedule = function() {
            this.node.angle >= -270 ? this.node.angle -= 2 : this.unschedule(this.Right_Schedule);
            this.Now_Speed += 30;
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
          };
          this.schedule(this.Right_Schedule, .02);
        }
        this.schedule(function() {
          var Bo = cc.instantiate(this.Ink_Particle);
          Bo.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
          Bo.x = this.node.x;
          Bo.y = this.node.y;
          var Bullet = cc.instantiate(this.Seed_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = -75;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          var Enemy_Bullet_Fish_Seed = Bullet.getComponent("Enemy_Bullet_Fish_Seed");
          Enemy_Bullet_Fish_Seed.Set();
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Seed_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = -45;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          var Enemy_Bullet_Fish_Seed = Bullet.getComponent("Enemy_Bullet_Fish_Seed");
          Enemy_Bullet_Fish_Seed.Set();
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Seed_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = 0;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          var Enemy_Bullet_Fish_Seed = Bullet.getComponent("Enemy_Bullet_Fish_Seed");
          Enemy_Bullet_Fish_Seed.Set();
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Seed_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = 45;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          var Enemy_Bullet_Fish_Seed = Bullet.getComponent("Enemy_Bullet_Fish_Seed");
          Enemy_Bullet_Fish_Seed.Set();
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Seed_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = -95;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          var Enemy_Bullet_Fish_Seed = Bullet.getComponent("Enemy_Bullet_Fish_Seed");
          Enemy_Bullet_Fish_Seed.Set();
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Seed_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = -135;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          var Enemy_Bullet_Fish_Seed = Bullet.getComponent("Enemy_Bullet_Fish_Seed");
          Enemy_Bullet_Fish_Seed.Set();
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Seed_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = -180;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          var Enemy_Bullet_Fish_Seed = Bullet.getComponent("Enemy_Bullet_Fish_Seed");
          Enemy_Bullet_Fish_Seed.Set();
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Seed_Bullet);
          Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = -225;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          var Enemy_Bullet_Fish_Seed = Bullet.getComponent("Enemy_Bullet_Fish_Seed");
          Enemy_Bullet_Fish_Seed.Set();
          Bullet_Common_Script.Set_Speed();
          this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          this.Enemy_Bullet_Common.Be_Destroy();
        }, 1.5);
      },
      Fly: function Fly() {
        var Bo = cc.instantiate(this.Ink_Particle);
        Bo.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
        Bo.x = this.node.x;
        Bo.y = this.node.y;
        this.Set();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Heart_Son: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6367bEjoWROdZBkid0zOeFG", "Enemy_Bullet_Heart_Son");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Animation: cc.Animation,
        Number: 0
      },
      Move: function Move() {
        switch (this.Number) {
         case 0:
          this.Enemy_Bullet_Common.Ini_Speed = -150;
          this.Enemy_Bullet_Common.Ini_Speed_Y = 150;
          break;

         case 1:
          this.Enemy_Bullet_Common.Ini_Speed = 150;
          this.Enemy_Bullet_Common.Ini_Speed_Y = 150;
          break;

         case 2:
          this.Enemy_Bullet_Common.Ini_Speed = 150;
          this.Enemy_Bullet_Common.Ini_Speed_Y = -150;
          break;

         case 3:
          this.Enemy_Bullet_Common.Ini_Speed = -150;
          this.Enemy_Bullet_Common.Ini_Speed_Y = -150;
        }
        this.Enemy_Bullet_Common.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Heart: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a1068emYzlLtJaQB5IBMkQb", "Enemy_Bullet_Heart");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Son_Bullet: cc.Prefab,
        Wait_Time: 0,
        Animation: cc.Animation
      },
      start: function start() {
        this.Enemy_Bullet_Common.Set_Speed();
        this.Wait_Time = Math.floor(7 * Math.random() + 2);
        this.scheduleOnce(function() {
          this.Enemy_Bullet_Common.Ini_Speed_Y = 0;
          this.Enemy_Bullet_Common.Set_Speed();
          this.Animation.play();
        }, this.Wait_Time);
      },
      Create_Son_Bullet: function Create_Son_Bullet() {
        var Bullet = cc.instantiate(this.Son_Bullet);
        Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 37.5;
        Bullet.y = this.node.y + 36.461;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        var Enemy_Bullet_Coin_Son = Bullet.getComponent("Enemy_Bullet_Heart_Son");
        Enemy_Bullet_Coin_Son.Number = 0;
        var Bullet = cc.instantiate(this.Son_Bullet);
        Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 38.509;
        Bullet.y = this.node.y + 36.461;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        var Enemy_Bullet_Coin_Son = Bullet.getComponent("Enemy_Bullet_Heart_Son");
        Enemy_Bullet_Coin_Son.Number = 1;
        var Bullet = cc.instantiate(this.Son_Bullet);
        Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 38.509;
        Bullet.y = this.node.y - 37.357;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        var Enemy_Bullet_Coin_Son = Bullet.getComponent("Enemy_Bullet_Heart_Son");
        Enemy_Bullet_Coin_Son.Number = 2;
        var Bullet = cc.instantiate(this.Son_Bullet);
        Bullet.parent = this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 37.5;
        Bullet.y = this.node.y - 37.357;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
        var Enemy_Bullet_Coin_Son = Bullet.getComponent("Enemy_Bullet_Heart_Son");
        Enemy_Bullet_Coin_Son.Number = 3;
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Luan: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b19bcLxaJCxJz0DWlRytoO", "Enemy_Bullet_Luan");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Bullet_Prefab: [ cc.Prefab ],
        Ink_Smoke: cc.Prefab
      },
      Shoot: function Shoot() {
        for (var i = 0; i < this.Bullet_Prefab.length; i++) {
          this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          var Bullet = cc.instantiate(this.Bullet_Prefab[i]);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = -1 * Math.floor(601 * Math.random() + 200);
          Bullet_Script.Ini_Speed_Y = Math.floor(1601 * Math.random() - 800);
          Bullet_Script.Set_Speed();
        }
        var node = cc.instantiate(this.Ink_Smoke);
        node.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
        node.setPosition(this.node.x, this.node.y);
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Magic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c47f9FAkGVABpTUrz4ESfb1", "Enemy_Bullet_Magic");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common
      },
      start: function start() {
        this.schedule(function() {
          if (null != this.Enemy_Bullet_Common) {
            this.Enemy_Bullet_Common.Ini_Speed = -1 * Math.floor(301 * Math.random() + 100);
            this.Enemy_Bullet_Common.Ini_Speed_Y = -1 * Math.floor(1001 * Math.random() - 500);
            this.Enemy_Bullet_Common.Set_Speed();
          }
        }, .2);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Posion: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3bf8bj+f5lKGIjIU5Z+bl2p", "Enemy_Bullet_Posion");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Attack: 0,
        Jing_Jie: 0
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Enemy_Bullet_San_Luan: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2eaeaGC8t9Br4+fP9TG3tAL", "Enemy_Bullet_San_Luan");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Target_Speed: 500,
        Now_Speed: 2e3,
        Jia_Su_Du: 1.1,
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Schedule: cc.Schedule
      },
      start: function start() {
        this.Target_Speed = 6e3;
        this.Now_Speed = 4e3;
        this.Jia_Su_Du = .6;
        this.Schedule = function() {
          if (this.Now_Speed >= this.Target_Speed) this.unschedule(this.Schedule); else {
            this.Now_Speed = this.Now_Speed * this.Jia_Su_Du;
            this.Enemy_Bullet_Common.Ini_Speed = this.Enemy_Bullet_Common.Ini_Speed * this.Jia_Su_Du;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Enemy_Bullet_Common.Ini_Speed_Y * this.Jia_Su_Du;
            this.Jia_Su_Du += .08;
            this.Enemy_Bullet_Common.RigidBody.angularVelocity += 50 * Math.random();
            this.Enemy_Bullet_Common.Set_Speed();
          }
        };
        this.schedule(this.Schedule, .02);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_San: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d62963QXRBImL/dJ+X9K0Rq", "Enemy_Bullet_San");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Bullet_Prefab: [ cc.Prefab ],
        Ink_Smoke: cc.Prefab,
        Bullet_Speed: [ cc.Integer ],
        Bullet_Speed_Y: [ cc.Integer ]
      },
      start: function start() {
        this.Bullet_Speed = [ -100, -300, -500, -700, -900, -700, -500, -300, -100 ];
        this.Bullet_Speed_Y = [ 800, 600, 400, 200, 0, -200, -400, -600, -800 ];
      },
      Shoot: function Shoot() {
        for (var i = 0; i < this.Bullet_Prefab.length; i++) {
          this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          var Bullet = cc.instantiate(this.Bullet_Prefab[i]);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = this.Bullet_Speed[i];
          Bullet_Script.Ini_Speed_Y = this.Bullet_Speed_Y[i];
          Bullet_Script.Set_Speed();
        }
        var node = cc.instantiate(this.Ink_Smoke);
        node.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
        node.setPosition(this.node.x, this.node.y);
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Seed_Wait_Trigger: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "552cclYrBNCJJfKxa61qkkB", "Enemy_Bullet_Seed_Wait_Trigger");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Wait_Time: 0,
        Target_Speed: 2500,
        Now_Speed: -2e3,
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Schedule: cc.Schedule
      },
      Move: function Move() {
        var _this = this;
        this.Schedule = function() {
          if (this.Now_Speed <= this.Target_Speed) this.unschedule(this.Schedule); else {
            this.Now_Speed -= 80;
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
          }
        };
        cc.tween(this.node).delay(this.Wait_Time).call(function() {
          _this.schedule(_this.Schedule, .01);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Seed: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c8220xtp01BAIx/QWS9FvRh", "Enemy_Bullet_Seed");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Target_Speed: 500,
        Now_Speed: 2e3,
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Schedule: cc.Schedule
      },
      start: function start() {
        this.Schedule = function() {
          if (this.Now_Speed <= this.Target_Speed) this.unschedule(this.Schedule); else {
            this.Now_Speed -= 50;
            this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
            this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
          }
        };
        this.schedule(this.Schedule, .02);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Strong: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3b74xu6wpBPpBJltGAeEri", "Enemy_Bullet_Strong");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Label: cc.Label,
        RigidBody: cc.RigidBody
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Sword_Big: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ddbd8/PIkVKFpaVcagrUf/F", "Enemy_Bullet_Sword_Big");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Target_Speed: 1e3,
        Now_Speed: 0,
        a: 1,
        Target_Angular_Velocity: 360,
        Now_Angular_Velocity: 0,
        aa: 1,
        BoxCollider: cc.BoxCollider,
        Speed_Schedule: cc.Schedule,
        Angular_Speed_Schedule: cc.Schedule,
        Ghost: cc.Prefab
      },
      start: function start() {
        this.Speed_Schedule = function() {
          if (this.Now_Speed <= this.Target_Speed) {
            this.Now_Speed += this.a;
            this.a++;
            this.Enemy_Bullet_Common.Ini_Speed = -1 * this.Now_Speed;
            this.Enemy_Bullet_Common.Set_Speed();
          } else this.unschedule(this.Speed_Schedule);
        };
        this.Angular_Speed_Schedule = function() {
          if (this.Now_Angular_Velocity <= this.Target_Angular_Velocity) {
            this.Now_Angular_Velocity += this.aa;
            this.aa++;
            this.Enemy_Bullet_Common.RigidBody.angularVelocity = this.Now_Angular_Velocity * this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Speed_Ratio;
          } else this.unschedule(this.Angular_Speed_Schedule);
        };
      },
      Shoot: function Shoot() {
        this.BoxCollider.enabled = true;
        this.Enemy_Bullet_Common.RigidBody.enabledContactListener = true;
        this.schedule(this.Speed_Schedule, .02);
        this.schedule(this.Angular_Speed_Schedule, .02);
        this.schedule(function() {
          var Ghost = cc.instantiate(this.Ghost);
          Ghost.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
          Ghost.x = this.node.x;
          Ghost.y = this.node.y;
          Ghost.angle = this.node.angle;
        }, .01);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Sword_Crazy: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5c431bc5VKU7QdHcvzIGxX", "Enemy_Bullet_Sword_Crazy");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Target_X: 100,
        Target_Y: 100,
        Color: 0,
        Boss_Script: cc.Node
      },
      onLoad: function onLoad() {
        this.Target_X = Math.floor(3201 * Math.random() - 1600);
        this.Target_Y = Math.floor(1401 * Math.random() - 700);
      },
      Start_Move: function Start_Move() {
        this.schedule(function() {
          this.Target_X = Math.floor(3201 * Math.random() - 1600);
          this.Target_Y = Math.floor(1401 * Math.random() - 700);
        }, 2);
        this.schedule(function() {
          var dis_x = Math.pow(this.Target_X - this.node.x, 2);
          var dis_y = Math.pow(this.Target_Y - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          if (dis <= 200) {
            this.node.angle += 3;
            this.Enemy_Bullet_Common.Ini_Speed = 1e3 * Math.cos(this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Ini_Speed_Y = 1e3 * Math.sin(this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
          } else {
            var dir = cc.v2(this.Target_X - this.node.x, this.Target_Y - this.node.y);
            var radian = Math.atan2(dir.y, dir.x);
            cc.tween(this.node).delay(1e-5).to(Math.abs(radian / Math.PI * 180 - this.node.angle) / 500, {
              angle: radian / Math.PI * 180
            }).start();
            this.Enemy_Bullet_Common.Ini_Speed = 1e3 * Math.cos(this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Ini_Speed_Y = 1e3 * Math.sin(this.node.angle * Math.PI / 180);
            this.Enemy_Bullet_Common.Set_Speed();
          }
        }, .01);
      },
      onDestroy: function onDestroy() {
        null != this.Boss_Script && 0 == this.Boss_Script.Enemy_Common.Is_Dead && this.Boss_Script.Create_Single_Color_Sword(this.Color);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Sword_Stright: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "81747NgeXxNTLj45sYox50A", "Enemy_Bullet_Sword_Stright");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Target: cc.Node,
        Now_Speed: 0,
        a: -200,
        BoxCollider: cc.PhysicsBoxCollider
      },
      Shoot: function Shoot() {
        var _this = this;
        this.BoxCollider.apply();
        if (null != this.Enemy_Bullet_Common.Battle_Controller.Hero) {
          this.Target = this.Enemy_Bullet_Common.Battle_Controller.Hero;
          var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
          var radian = Math.atan2(dir.y, dir.x);
          cc.tween(this.node).to(.3, {
            angle: radian / Math.PI * 180
          }, {
            easing: "backInOut"
          }).call(function() {
            _this.Set_Speed();
          }).start();
        } else this.Enemy_Bullet_Common.RigidBody.linearVelocity = cc.v2(-500, 0);
      },
      Set_Speed: function Set_Speed() {
        this.schedule(function() {
          this.Now_Speed += this.a;
          this.a += 80;
          this.Enemy_Bullet_Common.Ini_Speed = this.Now_Speed * Math.cos(-this.node.angle * Math.PI / 180) * -1;
          this.Enemy_Bullet_Common.Ini_Speed_Y = this.Now_Speed * Math.sin(-this.node.angle * Math.PI / 180);
          this.Enemy_Bullet_Common.Set_Speed();
        }, .02);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Sword: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d6ec0cxyi5GPKkfzcrMsoXj", "Enemy_Bullet_Sword");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Target: cc.Node
      },
      start: function start() {
        this.schedule(function() {
          if (null == this.Target || "" == this.Target.name) if (null != this.Enemy_Bullet_Common.Battle_Controller.Hero) this.Target = this.Enemy_Bullet_Common.Battle_Controller.Hero; else {
            this.Enemy_Bullet_Common.RigidBody.linearVelocity = cc.v2(this.Enemy_Bullet_Common.Ini_Speed * Math.cos(this.node.angle * Math.PI / 180) * -1 * this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Speed_Ratio, this.Enemy_Bullet_Common.Ini_Speed * Math.sin(this.node.angle * Math.PI / 180) * -1 * this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Speed_Ratio);
            cc.tween(this.node).delay(1e-5).to(Math.abs(0 - this.node.angle) / 100, {
              angle: 0
            }, {
              easing: "quadOut"
            }).start();
          } else if (this.node.x > this.Target.x) {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.Enemy_Bullet_Common.RigidBody.linearVelocity = cc.v2(this.Enemy_Bullet_Common.Ini_Speed * Math.cos(this.node.angle * Math.PI / 180) * -1 * this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Speed_Ratio, this.Enemy_Bullet_Common.Ini_Speed * Math.sin(this.node.angle * Math.PI / 180) * -1 * this.Enemy_Bullet_Common.Battle_Controller.Enemy_Bullet_Speed_Ratio);
            cc.tween(this.node).delay(1e-5).to(Math.abs(radian / Math.PI * 180 - 180 - this.node.angle) / 200, {
              angle: radian / Math.PI * 180
            }, {
              easing: "quadOut"
            }).start();
          } else cc.Tween.stopAllByTarget(this.node);
        }, .01);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Tetris_Up_To_Down: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33579dwjwdEvZfmogiThf36", "Enemy_Bullet_Tetris_Up_To_Down");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Ghost: cc.Prefab,
        Sprite: cc.Sprite,
        SpriteFrame: [ cc.SpriteFrame ]
      },
      start: function start() {
        this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Small();
        this.node.angle = 360 * Math.random();
        var index = Math.floor(Math.random() * this.SpriteFrame.length);
        this.Sprite.spriteFrame = this.SpriteFrame[index];
        this.schedule(function() {
          var Ghost = cc.instantiate(this.Ghost);
          Ghost.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
          Ghost.x = this.node.x;
          Ghost.y = this.node.y;
          Ghost.angle = this.node.angle;
          Ghost.scaleX = this.node.scaleX;
          Ghost.scaleY = this.node.scaleY;
          var color = Math.floor(3 * Math.random());
          switch (color) {
           case 0:
            Ghost.color = cc.color(255, 126, 126);
            break;

           case 1:
            Ghost.color = cc.color(126, 255, 216);
            break;

           case 2:
            Ghost.color = cc.color(126, 160, 255);
          }
          Ghost.getComponent(cc.Sprite).spriteFrame = this.Sprite.spriteFrame;
        }, .02);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Tetris_Word: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "df164VF+SRKe5YSxFFw+Sxx", "Enemy_Bullet_Tetris_Word");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Sprite: cc.Sprite,
        SpriteFrame: [ cc.SpriteFrame ]
      }
    });
    cc._RF.pop();
  }, {} ],
  Enemy_Bullet_Tetris: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4d264Z5GglN/bMC8dnrUxmo", "Enemy_Bullet_Tetris");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Type: 0,
        State: 0,
        Acceleration: 10,
        Accelerate_Schedule: cc.Schedule,
        Left_Accelerate_Schedule: cc.Schedule,
        PhysicsBoxCollider: cc.PhysicsBoxCollider,
        BoxCollider: cc.BoxCollider,
        PolygonCollider: cc.PolygonCollider,
        PhysicsPolygonCollider: cc.PhysicsPolygonCollider,
        Animation: cc.Animation,
        Sprite: cc.Sprite,
        Tetris_Ghost: cc.Prefab
      },
      start: function start() {
        this.Acceleration = -200;
        this.Accelerate_Schedule = function() {
          this.Acceleration += 25;
          this.Enemy_Bullet_Common.Ini_Speed_Y -= this.Acceleration;
          this.Enemy_Bullet_Common.Set_Speed();
          var Ghost = cc.instantiate(this.Tetris_Ghost);
          Ghost.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
          Ghost.x = this.node.x;
          Ghost.y = this.node.y;
          Ghost.angle = this.Sprite.node.angle;
          Ghost.getComponent(cc.Sprite).spriteFrame = this.Sprite.spriteFrame;
        };
        this.Left_Accelerate_Schedule = function() {
          this.Acceleration += 5;
          this.Enemy_Bullet_Common.Ini_Speed -= this.Acceleration;
          this.Enemy_Bullet_Common.Set_Speed();
          this.Enemy_Bullet_Common.RigidBody.angularVelocity += 50;
          var Ghost = cc.instantiate(this.Tetris_Ghost);
          Ghost.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
          Ghost.x = this.node.x;
          Ghost.y = this.node.y;
          Ghost.angle = this.Sprite.node.angle;
          Ghost.getComponent(cc.Sprite).spriteFrame = this.Sprite.spriteFrame;
        };
      },
      Move: function Move() {
        if (0 == this.Type) this.schedule(this.Accelerate_Schedule, .01); else {
          this.Enemy_Bullet_Common.Ini_Speed_Y = -500;
          this.Enemy_Bullet_Common.Set_Speed();
        }
        if (null != this.BoxCollider) {
          this.BoxCollider.enabled = true;
          this.PhysicsBoxCollider.enabled = true;
        } else {
          this.PolygonCollider.enabled = true;
          this.PhysicsPolygonCollider.enabled = true;
        }
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Bullet_Bound" == otherCollider.node.group) this.node.destroy(); else if ("Tetris_Bound" == otherCollider.node.group) {
          if (0 == this.State) {
            this.unschedule(this.Accelerate_Schedule);
            this.Enemy_Bullet_Common.Ini_Speed_Y = 0;
            this.Enemy_Bullet_Common.Set_Speed();
            this.State = 1;
            this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Small();
            var Smoke = cc.instantiate(this.Enemy_Bullet_Common.Battle_Controller.Enemy_Born_Smoke_White_Coin);
            Smoke.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
            Smoke.x = this.node.x;
            Smoke.y = this.node.y - 50;
            var Smoke = cc.instantiate(this.Enemy_Bullet_Common.Battle_Controller.Enemy_Create.Enemy_Create_Smoke_White_Prefab);
            Smoke.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
            Smoke.x = this.node.x;
            Smoke.y = this.node.y - 50;
          }
        } else if ("Enemy_Bullet" == otherCollider.node.group && 1 == otherCollider.node.getComponent("Enemy_Bullet_Common").Is_Tetris) {
          if (1 == otherCollider.node.getComponent("Enemy_Bullet_Tetris").State) {
            this.unschedule(this.Accelerate_Schedule);
            this.Enemy_Bullet_Common.Ini_Speed_Y = 0;
            this.Enemy_Bullet_Common.Set_Speed();
            this.State = 1;
            this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Small();
            var Smoke = cc.instantiate(this.Enemy_Bullet_Common.Battle_Controller.Enemy_Born_Smoke_White_Coin);
            Smoke.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
            Smoke.x = this.node.x;
            Smoke.y = this.node.y - 50;
            var Smoke = cc.instantiate(this.Enemy_Bullet_Common.Battle_Controller.Enemy_Create.Enemy_Create_Smoke_White_Prefab);
            Smoke.parent = this.Enemy_Bullet_Common.Battle_Controller.Particle_Parent;
            Smoke.x = this.node.x;
            Smoke.y = this.node.y - 50;
          }
        } else if ("Hero" == otherCollider.node.group) {
          var Hero_Common_Script = otherCollider.node.getComponent("Hero_Common");
          0 == Hero_Common_Script.Is_Sprint && Hero_Common_Script.Normal_Injured(this.Enemy_Bullet_Common.Attack, this.Enemy_Bullet_Common.Jing_Jie);
        }
      },
      Wake_Up: function Wake_Up() {
        this.State = 2;
        this.Animation.play("Boss_Tetris_Wake_Up");
        this.Enemy_Bullet_Common.Ini_Speed_Y = Math.floor(300 * Math.random() + 5);
        this.Enemy_Bullet_Common.Set_Speed();
      },
      Go: function Go() {
        var _this = this;
        this.Acceleration = -150;
        this.Enemy_Bullet_Common.RigidBody.angularVelocity = -500;
        this.Enemy_Bullet_Common.Ini_Speed_Y = 0;
        this.Enemy_Bullet_Common.Set_Speed();
        var Particle_1 = this.Enemy_Bullet_Common.Many_Particle[0].getComponent(cc.ParticleSystem);
        Particle_1.emissionRate = 20;
        Particle_1.endSize = 300;
        this.Enemy_Bullet_Common.Many_Particle[1].getComponent(cc.ParticleSystem).emissionRate = 10;
        cc.tween(this.node).delay(1).call(function() {
          _this.schedule(_this.Left_Accelerate_Schedule, .01);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Bullet_Thunder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "327ebFVBaBCkL4/6MqwIRze", "Enemy_Bullet_Thunder");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common
      },
      Shake: function Shake() {
        this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "87ba4WhgBhBC4fxM6FVSudo", "Enemy_Common");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        PhysicsBoxCollider: cc.PhysicsBoxCollider,
        BoxCollider: cc.BoxCollider,
        Normal_Initial_Data: cc.Node,
        Battle_Controller: cc.Node,
        Hp_Ratio: 1,
        Boss_Hp_Ratio: [ cc.Integer ],
        Attack_Ratio: 1,
        Anti_Retreat_Power: 0,
        Can_Interruptible: 1,
        Full_Hp: 0,
        Hp: 0,
        Ini_Attack: 0,
        Attack: 0,
        Defend: 0,
        Enemy_Jing_Jie: 0,
        Bullet_Attack: 0,
        Attack_Addition: 0,
        Be_Hit_Attack_Addition: 0,
        Have_Image: 0,
        Image: cc.Node,
        Up_Bound: 521.375,
        Down_Bound: -517.905,
        Left_Bound: 0,
        Right_Bound: 1117.399,
        Boss_Start_Position_X: 1200,
        Boss_Start_Position_Y: 0,
        Can_Injured: 1,
        Can_Move: 1,
        Is_Wall: 0,
        Is_Mario_Cube: 0,
        Mario_Cube_Type: 0,
        Is_Dead: 0,
        Is_Normal_Dead: 1,
        Back_Distance: 0,
        Speed: 100,
        Boss_Speed: [ cc.Integer ],
        Speed_Ratio: 1,
        Half_Hp: 0,
        Is_Interrupting: 0,
        Animation: cc.Animation,
        Enemy_Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Enemy_Script: cc.Node,
        Hp_Line: cc.Node,
        Hp_Line_White: cc.Node,
        Hit_Number_Prefab: cc.Prefab,
        Dead_Effect_Prefab: cc.Prefab,
        Dead_Smoke_Prefab: cc.Prefab,
        Coin_Prefab: cc.Prefab,
        Energy_Prefab: cc.Prefab,
        Have_Rogue_Enegy_Reward: 1,
        Have_Coin_Reward: 1,
        Coin_Number: 0,
        Is_Boss: 0,
        Max_Stage: 4,
        Have_Special_Change_Stage: 0,
        Have_Debuff_String: [ cc.string ],
        Debuff_Label: cc.Label,
        Is_Weak: 0,
        Weak_Particle: cc.ParticleSystem,
        Weak_Schdule: cc.Schdule,
        Is_Strong: 0,
        Strong_Particle: cc.ParticleSystem,
        Strong_Schdule: cc.Schdule,
        Is_Fire: 0,
        Fire_Particle: cc.ParticleSystem,
        Fire_Smoke: cc.ParticleSystem,
        Fire_Schedule: cc.Schdule,
        Fire_Number: 0,
        Is_Ice: 0,
        Ice_Particle: cc.ParticleSystem,
        Is_Vertigo: 0,
        Vertigo_Particle: cc.ParticleSystem,
        Vertigo_Schedule: cc.Schedule,
        Move_Stage: 0,
        Is_Special: 0,
        Hp_Line_Name: cc.String,
        Image_Offset_X: 0,
        Image_Offset_Y: 0,
        Is_In_Muguiying_Jiejie: 0,
        Police_Crucial_Crosshair: cc.Node,
        Be_Hit_Crucial: 0,
        Police_Crucial_Crosshair_Animation: cc.Animation,
        Is_Be_Gold_Bullet_Hit: 0,
        Is_Key_People: 0,
        Key_People_Attack: 0,
        Key_People_Schedule: cc.Schedule,
        Key_People_Icon_Node: cc.Node,
        Is_Be_Wanted: 0,
        Wanted_Icon_Node: cc.Node,
        Is_Second_Boss: 0,
        Main_Boss_Enemy_Common: cc.Node
      },
      start: function start() {
        this.Speed = this.Speed * this.Speed_Ratio;
        this.Animation = this.node.getComponent(cc.Animation);
        this.Enemy_Script = this.node.getComponent(this.node.name);
        this.Battle_Controller = cc.find("Canvas").getComponent("Battle_Controller");
        this.Enemy_Bullet_Parent = cc.find("Canvas/Enemy_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        0 == this.Is_Wall && 0 == this.Is_Mario_Cube && (this.Police_Crucial_Crosshair = this.Police_Crucial_Crosshair.getComponent("Police_Crucial_Crosshair"));
        this.Normal_Initial_Data = cc.find("Canvas").getComponent("Normal_Initial_Data");
        if (1 == this.Is_Boss) {
          this.Hp_Ratio = this.Boss_Hp_Ratio[0];
          this.Battle_Controller.Boss_Hp_Number_Label.string = "x " + this.Max_Stage;
        }
        this.Full_Hp = Math.ceil(this.Hp_Ratio * this.Normal_Initial_Data.Standard_Enemy_Hp * this.Normal_Initial_Data.Standard_Every_Xiaoguanqia_Enemy_Hp_Mult[this.Battle_Controller.Now_Xiaoguanqia - 1]);
        this.Hp = this.Full_Hp;
        this.Ini_Attack = Math.ceil(this.Attack_Ratio * this.Normal_Initial_Data.Standard_Enemy_Attack * this.Normal_Initial_Data.Standard_Every_Xiaoguanqia_Enemy_Attack_Mult[this.Battle_Controller.Now_Xiaoguanqia - 1]);
        this.Attack = this.Ini_Attack;
        this.Defend = this.Normal_Initial_Data.Standard_Team_Level;
        this.Enemy_Jing_Jie = this.Normal_Initial_Data.Standard_Team_Level;
        0 == this.Is_Wall && 0 == this.Is_Special && 0 == this.Is_Boss && 0 == this.Is_Mario_Cube && 0 == this.Is_Second_Boss && this.Move();
        0 == this.Is_Wall && 0 == this.Is_Mario_Cube && this.scheduleOnce(function() {
          this.PhysicsBoxCollider.enabled = true;
          this.BoxCollider.enabled = true;
        }, .1);
        this.Fire_Schedule = function() {
          this.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 0;
          this.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
          this.Injured(this.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result, this.Battle_Controller.Hero_Script.Hero_Common.Attack_Result, 0, 0, 0);
          this.Fire_Number++;
          if (this.Fire_Number >= 5) {
            this.unschedule(this.Fire_Schedule);
            this.Fire_Number = 0;
            this.Is_Fire = 0;
            this.Fire_Particle.emissionRate = 0;
            for (var i = 0; i < this.Have_Debuff_String.length; i++) if ("\u707c\u70e7" == this.Have_Debuff_String[i]) {
              this.Have_Debuff_String.splice(i, 1);
              this.Debuff_Label.string = this.Have_Debuff_String;
              break;
            }
          }
        };
        this.Ice_Schedule = function() {
          this.Is_Ice = 0;
          this.Ice_Particle.emissionRate = 0;
          this.Speed_Ratio = 2 * this.Speed_Ratio;
          this.unschedule(this.Ice_Schedule);
          for (var i = 0; i < this.Have_Debuff_String.length; i++) if ("\u5bd2\u51b7" == this.Have_Debuff_String[i]) {
            this.Have_Debuff_String.splice(i, 1);
            this.Debuff_Label.string = this.Have_Debuff_String;
            break;
          }
        };
        this.Vertigo_Schedule = function() {
          this.Is_Vertigo = 0;
          null != this.Vertigo_Particle && (this.Vertigo_Particle.duration = 1);
          for (var i = 0; i < this.Have_Debuff_String.length; i++) if ("\u7729\u6655" == this.Have_Debuff_String[i]) {
            this.Have_Debuff_String.splice(i, 1);
            this.Debuff_Label.string = this.Have_Debuff_String;
            break;
          }
          this.unschedule(this.Vertigo_Schedule);
          0 == this.Is_Special ? this.Move() : this.Special_Move();
        };
        this.Key_People_Schedule = function() {
          this.Is_Key_People = 0;
          for (var i = 0; i < 20; i++) {
            var Particle = cc.instantiate(this.Battle_Controller.Purple_Single_Particle);
            Particle.parent = this.Particle_Parent;
            Particle.setPosition(this.node.x + this.Image_Offset_X, this.node.y + this.Image_Offset_Y);
            Particle.angle = 360 * Math.random();
          }
          var Particle = cc.instantiate(this.Battle_Controller.Purple_Smoke);
          Particle.parent = this.Particle_Parent;
          Particle.setPosition(this.node.x + this.Image_Offset_X, this.node.y + this.Image_Offset_Y);
          this.Battle_Controller.Hero_Script.Shoot_Key_People_Bullet(this.node.x + this.Image_Offset_X, this.node.y + this.Image_Offset_Y);
          this.Battle_Controller.Hero_Script.Hero_Common.Recovery(30);
          this.Injured(this.Battle_Controller.Jing_Jie, this.Key_People_Attack, 0, 0, 0);
          null != this.Key_People_Icon_Node && this.Key_People_Icon_Node.destroy();
        };
      },
      Open_Collider: function Open_Collider() {
        this.PhysicsBoxCollider.enabled = true;
        this.BoxCollider.enabled = true;
      },
      Move: function Move() {
        var _this = this;
        if (1 == this.Can_Move && 0 == this.Is_Vertigo) {
          this.Animation.play(this.node.name + "_Stay");
          if (this.node.x > this.Battle_Controller.Hero.x) {
            var Dis_X = Math.floor(Math.random() * this.Right_Bound + 1);
            var Dis_Y = Math.floor(Math.random() * (this.Up_Bound - this.Down_Bound + 1) + this.Down_Bound);
          } else {
            var Dis_X = this.Battle_Controller.Hero.x + 100 * Math.random();
            var Dis_Y = this.Battle_Controller.Hero.y + 1001 * Math.random() - 500;
          }
          var Dis = Math.sqrt(Math.pow(Dis_X - this.node.x, 2) + Math.pow(Dis_Y - this.node.y, 2));
          var time = Dis / (this.Speed * this.Speed_Ratio);
          cc.tween(this.node).to(1 * time, {
            position: cc.v2(Dis_X, Dis_Y)
          }, {
            easing: "quintInOut"
          }).call(function() {
            if (0 == _this.Is_Interrupting) {
              _this.Move_Stage++;
              _this.Enemy_Script.Think();
            }
          }).start();
        }
      },
      No_Stay_Animation_Move: function No_Stay_Animation_Move() {
        var _this2 = this;
        if (1 == this.Can_Move && 0 == this.Is_Vertigo) {
          if (this.node.x > this.Battle_Controller.Hero.x) {
            var Dis_X = Math.floor(Math.random() * this.Right_Bound + 1);
            var Dis_Y = Math.floor(Math.random() * (this.Up_Bound - this.Down_Bound + 1) + this.Down_Bound);
          } else {
            var Dis_X = this.Battle_Controller.Hero.x + 100 * Math.random();
            var Dis_Y = this.Battle_Controller.Hero.y + 1001 * Math.random() - 500;
          }
          var Dis = Math.sqrt(Math.pow(Dis_X - this.node.x, 2) + Math.pow(Dis_Y - this.node.y, 2));
          var time = Dis / (this.Speed * this.Speed_Ratio);
          cc.tween(this.node).to(1 * time, {
            position: cc.v2(Dis_X, Dis_Y)
          }, {
            easing: "quintInOut"
          }).call(function() {
            if (0 == _this2.Is_Interrupting) {
              _this2.Move_Stage++;
              _this2.Enemy_Script.Think();
            }
          }).start();
        }
      },
      Bullet_Attack_Count: function Bullet_Attack_Count() {
        this.Bullet_Attack = Math.ceil(this.Attack * (100 + this.Attack_Addition) / 100);
      },
      Injured: function Injured(Jing_Jie, Attack, Crit_Rate, Crit_Mult, Power) {
        if (1 == this.Can_Injured) {
          Power - this.Anti_Retreat_Power > 0 ? this.Back_Distance = Power - this.Anti_Retreat_Power : this.Back_Distance = 0;
          if (1 == this.Can_Interruptible) {
            cc.Tween.stopAllByTarget(this.node);
            this.node.stopAllActions();
          }
          this.node.runAction(cc.spawn(cc.sequence(cc.moveBy(.1, this.Back_Distance, 0), cc.moveBy(.1, -this.Back_Distance / 1.5, 0)), cc.sequence(cc.tintTo(.1, 255, 221, 66), cc.tintTo(.5, 255, 255, 255))));
          1 == this.Have_Image && this.Image.runAction(cc.sequence(cc.tintTo(.1, 255, 221, 66), cc.tintTo(.5, 255, 255, 255)));
          if (1 == this.Can_Interruptible && null != this.Animation) {
            this.Animation.stop();
            this.Animation.play(this.node.name + "_Injured");
            1 == this.Is_Interrupting;
          }
          if (1 == this.Be_Hit_Crucial) {
            if (1 == this.Is_Be_Gold_Bullet_Hit) {
              Attack = 5 * Math.ceil((Attack - this.Normal_Initial_Data.Team_Level_Up_Attack_Up * (Jing_Jie - this.Defend)) * Math.pow(this.Normal_Initial_Data.Same_Level_Kill_Enemy / this.Normal_Initial_Data.Tall_One_Level_Kill_Enemy, Jing_Jie - this.Defend));
              this.Is_Be_Gold_Bullet_Hit = 0;
            } else Attack = this.Battle_Controller.Crucial_Attack_Cult * Math.ceil((Attack - this.Normal_Initial_Data.Team_Level_Up_Attack_Up * (Jing_Jie - this.Defend)) * Math.pow(this.Normal_Initial_Data.Same_Level_Kill_Enemy / this.Normal_Initial_Data.Tall_One_Level_Kill_Enemy, Jing_Jie - this.Defend));
            Crit_Rate = 100;
            this.Be_Hit_Crucial = 0;
            this.Police_Crucial_Crosshair.unschedule(this.Police_Crucial_Crosshair.End_Schedule);
            var Particle = cc.instantiate(this.Battle_Controller.Crucial_Effect_Prefab);
            Particle.x = this.node.x + this.Police_Crucial_Crosshair.node.parent.x;
            Particle.y = this.node.y + this.Police_Crucial_Crosshair.node.parent.y;
            Particle.parent = this.Particle_Parent;
            this.Battle_Controller.Camera_Shake_Medium();
            this.Police_Crucial_Crosshair.node.active = false;
          } else Attack = Math.ceil((Attack - this.Normal_Initial_Data.Team_Level_Up_Attack_Up * (Jing_Jie - this.Defend)) * Math.pow(this.Normal_Initial_Data.Same_Level_Kill_Enemy / this.Normal_Initial_Data.Tall_One_Level_Kill_Enemy, Jing_Jie - this.Defend));
          var Is_Crit = Math.floor(100 * Math.random());
          Is_Crit <= Crit_Rate && (Attack = Math.ceil(Attack * Crit_Mult));
          1 == this.Is_Weak && (Attack += Math.ceil(Attack * this.Battle_Controller.Weak_Injured_Add / 100));
          if (0 == this.Is_Second_Boss) {
            this.Hp -= Attack + Math.ceil(Attack * this.Be_Hit_Attack_Addition / 100);
            if (0 == this.Is_Boss) {
              this.Hp_Line.scaleX = this.Hp / this.Full_Hp;
              this.Hp_Line_White.scaleX = this.Hp / this.Full_Hp;
              this.Hp_Line_White.runAction(cc.sequence(cc.fadeIn(.3), cc.fadeOut(.3)));
            } else {
              this.Battle_Controller.Boss_Hp_Line_Animation.node.scaleX = this.Hp / this.Full_Hp;
              this.Battle_Controller.Boss_Hp_Line_White_Animation.node.scaleX = this.Hp / this.Full_Hp;
              this.Battle_Controller.Boss_Hp_Line_Animation.play();
              this.Battle_Controller.Boss_Hp_Line_White_Animation.play();
            }
            if (this.Hp <= this.Full_Hp / 4 && 0 == this.Half_Hp && 1 == this.Is_Boss) {
              this.Half_Hp = 1;
              this.Enemy_Script.Half_Hp();
            }
            if (this.Hp <= 0) if (0 == this.Is_Boss) this.Dead(); else if (this.Battle_Controller.Boss_Stage < this.Max_Stage) {
              this.Half_Hp = 0;
              0 == this.Have_Special_Change_Stage ? this.Noarmal_Change_Stage() : this.Enemy_Script.Special_Change_Stage();
            } else this.Dead();
          } else {
            this.Main_Boss_Enemy_Common.Hp -= Attack + Math.ceil(Attack * this.Be_Hit_Attack_Addition / 100);
            this.Main_Boss_Enemy_Common.Second_Boss_Injured_To_Main_Boss();
          }
          var Hit_Number = cc.instantiate(this.Hit_Number_Prefab);
          Hit_Number.parent = this.Particle_Parent;
          Hit_Number.x = this.node.x;
          Hit_Number.y = this.node.y;
          if (Jing_Jie > this.Enemy_Jing_Jie) {
            Hit_Number.getComponent(cc.Label).string = "\u5883\u754c\u538b\u5236  " + (Attack + Math.ceil(Attack * this.Be_Hit_Attack_Addition / 100));
            Hit_Number.color = cc.color(255, 191, 66);
          } else Hit_Number.getComponent(cc.Label).string = Attack + Math.ceil(Attack * this.Be_Hit_Attack_Addition / 100);
          if (Is_Crit <= Crit_Rate) {
            Hit_Number.scaleX = 2;
            Hit_Number.scaleY = 2;
            Hit_Number.color = cc.color(255, 128, 29);
          }
          for (var i = 0; i < this.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script.length; i++) this.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script[i].Check(this);
        }
      },
      Second_Boss_Injured_To_Main_Boss: function Second_Boss_Injured_To_Main_Boss() {
        this.Battle_Controller.Boss_Hp_Line_Animation.node.scaleX = this.Hp / this.Full_Hp;
        this.Battle_Controller.Boss_Hp_Line_White_Animation.node.scaleX = this.Hp / this.Full_Hp;
        this.Battle_Controller.Boss_Hp_Line_Animation.play();
        this.Battle_Controller.Boss_Hp_Line_White_Animation.play();
        if (this.Hp <= this.Full_Hp / 4 && 0 == this.Half_Hp && 1 == this.Is_Boss) {
          this.Half_Hp = 1;
          this.Enemy_Script.Half_Hp();
        }
        if (this.Hp <= 0) if (0 == this.Is_Boss) this.Dead(); else if (this.Battle_Controller.Boss_Stage < this.Max_Stage) {
          this.Half_Hp = 0;
          0 == this.Have_Special_Change_Stage ? this.Noarmal_Change_Stage() : this.Enemy_Script.Special_Change_Stage();
        } else this.Dead();
      },
      Noarmal_Change_Stage: function Noarmal_Change_Stage() {
        var _this3 = this;
        this.Battle_Controller.Boss_Stage++;
        this.Battle_Controller.Destroy_Enemy_Bullet();
        this.Animation.play(this.node.name + "_Stay");
        this.Can_Move = 0;
        this.Can_Injured = 0;
        this.Stop();
        this.Hp_Ratio = this.Boss_Hp_Ratio[this.Battle_Controller.Boss_Stage];
        this.Speed = this.Boss_Speed[this.Battle_Controller.Boss_Stage];
        this.Full_Hp = Math.ceil(this.Hp_Ratio * this.Normal_Initial_Data.Standard_Enemy_Hp * this.Normal_Initial_Data.Standard_Every_Xiaoguanqia_Enemy_Hp_Mult[this.Battle_Controller.Now_Xiaoguanqia - 1]);
        this.Hp = this.Full_Hp;
        this.Battle_Controller.Boss_Hp_Line_Animation.node.scaleX = 1;
        this.Battle_Controller.Boss_Hp_Line_White_Animation.node.scaleX = 1;
        this.Battle_Controller.Boss_Hp_Number_Label.string = "x " + (this.Max_Stage - this.Battle_Controller.Boss_Stage);
        this.Battle_Controller.Boss_Picture.Create_Picture();
        this.Can_Injured = 1;
        this.Can_Move = 1;
        this.Move_Stage = 0;
        this.Enemy_Script.Think_Stage = 0;
        cc.tween(this.node).delay(1.5).call(function() {
          _this3.Enemy_Script.Think();
        }).start();
      },
      Stop: function Stop() {
        cc.Tween.stopAllByTarget(this.node);
        this.node.stopAllActions();
        this.Animation.stop();
      },
      Is_Interrupting_To_Move: function Is_Interrupting_To_Move() {
        0 == this.Is_Interrupting;
        0 == this.Is_Wall && 0 == this.Is_Mario_Cube && this.Move();
      },
      Dead: function Dead() {
        if (0 == this.Is_Dead) {
          this.Is_Dead = 1;
          this.Battle_Controller.Camera_Shake_Medium();
          var Dead_Effect = cc.instantiate(this.Dead_Effect_Prefab);
          Dead_Effect.parent = this.Particle_Parent;
          Dead_Effect.x = this.node.x;
          Dead_Effect.y = this.node.y;
          var Dead_Smoke = cc.instantiate(this.Dead_Smoke_Prefab);
          Dead_Smoke.parent = this.Particle_Parent;
          Dead_Smoke.x = this.node.x;
          Dead_Smoke.y = this.node.y;
          if (1 == this.Have_Rogue_Enegy_Reward) {
            var Energy = cc.instantiate(this.Energy_Prefab);
            Energy.parent = this.Particle_Parent;
            Energy.x = this.node.x;
            Energy.y = this.node.y;
          }
          this.Coin_Reward();
          1 == this.Is_Normal_Dead ? this.node.destroy() : this.Enemy_Script.Special_Dead();
        }
      },
      Coin_Reward: function Coin_Reward() {
        if (1 == this.Have_Coin_Reward) {
          this.Coin_Reward = Math.ceil(100 * this.Normal_Initial_Data.Every_Guanqia_Gacha / this.Normal_Initial_Data.One_Guanqia_All_Enemy);
          this.Battle_Controller.Coin += this.Coin_Reward;
          var Coin = cc.instantiate(this.Coin_Prefab);
          Coin.parent = this.Particle_Parent;
          Coin.x = this.node.x;
          Coin.y = this.node.y;
          this.Battle_Controller.Exp += this.Normal_Initial_Data.One_Eenemy_Exp;
        }
      },
      onDestroy: function onDestroy() {
        1 == this.Is_Boss && (this.Battle_Controller.Boss_Is_Alive = 0);
        0 == this.Is_Wall && 0 == this.Is_Mario_Cube && this.Battle_Controller.Enemy_Dead_Check();
      },
      To_Weak: function To_Weak() {
        if (1 == this.Is_Weak) this.unschedule(this.Weak_Schdule); else {
          this.Have_Debuff_String.push("\u865a\u5f31");
          this.Debuff_Label.string = this.Have_Debuff_String;
        }
        this.Is_Weak = 1;
        this.Weak_Particle.emissionRate = 999;
        this.Weak_Schdule = function() {
          this.Is_Weak = 0;
          this.Weak_Particle.emissionRate = 0;
          for (var i = 0; i < this.Have_Debuff_String.length; i++) if ("\u865a\u5f31" == this.Have_Debuff_String[i]) {
            this.Have_Debuff_String.splice(i, 1);
            this.Debuff_Label.string = this.Have_Debuff_String;
            break;
          }
        };
        this.scheduleOnce(this.Weak_Schdule, this.Battle_Controller.Enemy_Weak_Time);
      },
      To_Strong: function To_Strong(Attack_Addition) {
        if (1 == this.Is_Strong) this.unschedule(this.Strong_Schdule); else {
          this.Attack_Addition += Attack_Addition;
          this.Have_Debuff_String.push("\u5f3a\u5316");
          this.Debuff_Label.string = this.Have_Debuff_String;
        }
        this.Is_Strong = 1;
        this.Strong_Particle.emissionRate = 999;
        this.Strong_Schdule = function() {
          this.Is_Strong = 0;
          this.Strong_Particle.emissionRate = 0;
          this.Attack_Addition -= Attack_Addition;
          for (var i = 0; i < this.Have_Debuff_String.length; i++) if ("\u5f3a\u5316" == this.Have_Debuff_String[i]) {
            this.Have_Debuff_String.splice(i, 1);
            this.Debuff_Label.string = this.Have_Debuff_String;
            break;
          }
        };
        this.scheduleOnce(this.Strong_Schdule, 5);
      },
      Start_Fire: function Start_Fire() {
        if (1 == this.Is_Fire) this.unschedule(this.Fire_Schedule); else {
          this.Have_Debuff_String.push("\u707c\u70e7");
          this.Debuff_Label.string = this.Have_Debuff_String;
        }
        this.Fire_Number = 0;
        this.schedule(this.Fire_Schedule, 1);
        this.Fire_Particle.emissionRate = 999;
        this.Is_Fire = 1;
      },
      Start_Ice: function Start_Ice() {
        this.unschedule(this.Ice_Schedule);
        if (0 == this.Is_Ice) {
          this.Have_Debuff_String.push("\u5bd2\u51b7");
          this.Debuff_Label.string = this.Have_Debuff_String;
          this.Is_Ice = 1;
          this.Speed_Ratio = .6 * this.Speed_Ratio;
          this.Ice_Particle.emissionRate = 999;
        }
        this.scheduleOnce(this.Ice_Schedule, 5);
      },
      Start_Vertigo: function Start_Vertigo() {
        this.Stop();
        if (0 == this.Is_Vertigo) {
          this.Is_Vertigo = 1;
          var Vertigo_Particle = cc.instantiate(this.Battle_Controller.Vertigo_Particle);
          Vertigo_Particle.parent = this.node;
          Vertigo_Particle.x = this.Debuff_Label.node.x;
          Vertigo_Particle.y = this.Debuff_Label.node.y;
          this.Vertigo_Particle = Vertigo_Particle.getComponent(cc.ParticleSystem);
          this.Have_Debuff_String.push("\u7729\u6655");
          this.Debuff_Label.string = this.Have_Debuff_String;
        }
        this.unschedule(this.Vertigo_Schedule);
        this.schedule(this.Vertigo_Schedule, 4);
      },
      Be_Set_Key_People: function Be_Set_Key_People() {
        if (0 == this.Is_Key_People) {
          this.Key_People_Icon_Node = cc.instantiate(this.Battle_Controller.Police_Key_People_Icon);
          this.Key_People_Icon_Node.parent = this.node;
          this.Key_People_Icon_Node.x = this.Image_Offset_X;
          this.Key_People_Icon_Node.y = this.Image_Offset_Y;
          this.Key_People_Icon_Node.scaleX = this.node.scaleX;
          this.Is_Key_People = 1;
          this.unschedule(this.Key_People_Schedule);
          this.scheduleOnce(this.Key_People_Schedule, 5);
        }
      },
      Be_Wanted: function Be_Wanted() {
        if (0 == this.Is_Be_Wanted) {
          this.Wanted_Icon_Node = cc.instantiate(this.Battle_Controller.Police_Wanted_Icon);
          this.Wanted_Icon_Node.parent = this.node;
          this.Wanted_Icon_Node.x = this.Image_Offset_X;
          this.Wanted_Icon_Node.y = this.Image_Offset_Y;
          this.Wanted_Icon_Node.scaleX = this.node.scaleX;
          this.Is_Be_Wanted = 1;
        }
      },
      Police_Wanted_Injured: function Police_Wanted_Injured(Attack) {
        if (1 == this.Is_Be_Wanted) {
          this.Is_Be_Wanted = 0;
          this.Injured(this.Battle_Controller.Jing_Jie, Attack, 0, 0, 0);
          var Dead_Effect = cc.instantiate(this.Dead_Effect_Prefab);
          Dead_Effect.parent = this.Particle_Parent;
          Dead_Effect.x = this.node.x + this.Image_Offset_X;
          Dead_Effect.y = this.node.y + this.Image_Offset_Y;
          var Dead_Smoke = cc.instantiate(this.Dead_Smoke_Prefab);
          Dead_Smoke.parent = this.Particle_Parent;
          Dead_Smoke.x = this.node.x + this.Image_Offset_X;
          Dead_Smoke.y = this.node.y + this.Image_Offset_Y;
          null != this.Wanted_Icon_Node && this.Wanted_Icon_Node.destroy();
        }
      },
      Special_Move: function Special_Move() {
        this.Enemy_Script.Special_Move_Content();
      },
      Show_Crucial: function Show_Crucial() {
        this.Police_Crucial_Crosshair.node.opacity = 0;
        this.Police_Crucial_Crosshair.node.angle = 0;
        this.Police_Crucial_Crosshair.node.active = true;
        this.Police_Crucial_Crosshair_Animation.play("Police_Crucial_Crosshair_In");
      }
    });
    cc._RF.pop();
  }, {} ],
  Enemy_Create: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9116UXwR9CNa4JQUp2plLB", "Enemy_Create");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Enemy_Prefab: [ cc.Prefab ],
        Boss_ID: 0,
        Enemy_Parent: cc.Node,
        Enemy_Number: 12,
        Particle_Parent: cc.Node,
        Enemy_Create_Smoke_Black_Prefab: cc.Prefab,
        Enemy_Create_Smoke_White_Prefab: cc.Prefab,
        Angle_Wait_Time: 0,
        Angle_In_Target_X: 0,
        Angle_In_Target_Y: 0
      },
      Start_Set: function Start_Set() {
        this.Battle_Controller = this.Battle_Controller.getComponent("Battle_Controller");
        this.Angle_Wait_Time = [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 10, 11, 12 ];
        this.Angle_In_Target_X = [ 600, 900, 400, 1100, 400, 1100, 200, 1300, 200, 1300, 0, 1500, 0, 1500, 200, 200, 200, 200, 200, 200, 200, 1100, 1100, 1100, 1100, 1100, 1100, 1100, -200, 100, 100, 100, 400, 400, 400, 400, 400, 700, 1e3, 1300, 1600, 1900 ];
        this.Angle_In_Target_Y = [ 0, 0, 200, 200, -200, -200, 400, 400, -400, -400, 600, 600, -600, -600, 600, 400, 200, 0, -200, -400, -600, -600, -400, -200, 0, 200, 400, 600, 0, 0, 200, -200, 0, 200, -200, 400, -400, 0, 0, 0, 0, 0 ];
        this.Boss_ID = this.Battle_Controller.Will_Create_Boss;
      },
      Enemy_Create: function Enemy_Create() {
        var Boss_Boci = cc.sys.localStorage.getItem("Boss_Boci");
        null == Boss_Boci && (Boss_Boci = 0);
        if (this.Battle_Controller.Now_Zongboci == Boss_Boci) this.Create_Boss(); else if (22 == this.Battle_Controller.Now_Zongboci) {
          this.Boss_ID++;
          this.Create_Boss();
        } else {
          this.Enemy_Number = cc.sys.localStorage.getItem("Enemy_Number");
          null == this.Enemy_Number && (this.Enemy_Number = 12);
          var Enemy_Type = 7;
          console.log(Enemy_Type);
          for (var i = 0; i < this.Enemy_Number; i++) {
            var Create_X = Math.floor(1173 - 1173 * Math.random());
            var Create_Y = Math.floor(1124 * Math.random() - 562);
            var Enemy_Create_Smoke_Black = cc.instantiate(this.Enemy_Create_Smoke_Black_Prefab);
            Enemy_Create_Smoke_Black.parent = this.Particle_Parent;
            Enemy_Create_Smoke_Black.x = Create_X;
            Enemy_Create_Smoke_Black.y = Create_Y;
            var Enemy_Create_Smoke_White = cc.instantiate(this.Enemy_Create_Smoke_White_Prefab);
            Enemy_Create_Smoke_White.parent = this.Particle_Parent;
            Enemy_Create_Smoke_White.x = Create_X;
            Enemy_Create_Smoke_White.y = Create_Y;
            var Enemy = cc.instantiate(this.Enemy_Prefab[Enemy_Type]);
            Enemy.parent = this.Enemy_Parent;
            Enemy.x = Create_X;
            Enemy.y = Create_Y;
          }
        }
      },
      Create_Boss: function Create_Boss() {
        var _this = this;
        cc.tween(this.node).call(function() {
          _this.Battle_Controller.JoyStick.Joytick_Back();
          _this.Battle_Controller.UI_Parent.active = false;
          _this.Battle_Controller.Attack_Button_Parent.children[0].getComponent(_this.Battle_Controller.Attack_Button_Parent.children[0].name).Cancle_Touch();
          var Create_X = 1400;
          var Create_Y = 1600;
          var Enemy_Create_Smoke_Black = cc.instantiate(_this.Enemy_Create_Smoke_Black_Prefab);
          Enemy_Create_Smoke_Black.parent = _this.Particle_Parent;
          Enemy_Create_Smoke_Black.x = Create_X;
          Enemy_Create_Smoke_Black.y = Create_Y;
          var Enemy_Create_Smoke_White = cc.instantiate(_this.Enemy_Create_Smoke_White_Prefab);
          Enemy_Create_Smoke_White.parent = _this.Particle_Parent;
          Enemy_Create_Smoke_White.x = Create_X;
          Enemy_Create_Smoke_White.y = Create_Y;
          var Enemy = cc.instantiate(_this.Battle_Controller.Will_Create_Boss_Prefab);
          Enemy.parent = _this.Enemy_Parent;
          Enemy.x = Create_X;
          Enemy.y = Create_Y;
          var Enemy_Common = Enemy.getComponent("Enemy_Common");
          cc.tween(Enemy).to(1, {
            position: cc.v2(Enemy_Common.Boss_Start_Position_X, Enemy_Common.Boss_Start_Position_Y),
            easing: "quadInOut"
          }).start();
        }).delay(1).call(function() {
          _this.Battle_Controller.Chat_Menu.node.active = true;
          console.log(_this.Boss_ID);
          _this.Battle_Controller.Chat_Menu.Chat(_this.Boss_ID);
        }).start();
      },
      Angle_Enemy_Create: function Angle_Enemy_Create(Angle_Type) {
        if (0 == Angle_Type) {
          this.Enemy_Number = 14;
          for (var i = 0; i < this.Enemy_Number; i++) {
            var Enemy = cc.instantiate(this.Enemy_Prefab[18]);
            Enemy.parent = this.Enemy_Parent;
            Enemy.x = 2296.418;
            Enemy.y = -50;
            var Enemy_Angle_Script = Enemy.getComponent("Enemy_Angle");
            Enemy_Angle_Script.Number = i;
            Enemy_Angle_Script.Wait_Time = this.Angle_Wait_Time[i];
            Enemy_Angle_Script.In_Target_X = this.Angle_In_Target_X[i];
            Enemy_Angle_Script.In_Target_Y = this.Angle_In_Target_Y[i];
          }
        } else if (1 == Angle_Type) {
          this.Enemy_Number = 14;
          for (var i = 0; i < this.Enemy_Number; i++) {
            var Enemy = cc.instantiate(this.Enemy_Prefab[18]);
            Enemy.parent = this.Enemy_Parent;
            Enemy.x = 2296.418;
            Enemy.y = -50;
            var Enemy_Angle_Script = Enemy.getComponent("Enemy_Angle");
            Enemy_Angle_Script.Number = i + 14;
            Enemy_Angle_Script.Wait_Time = this.Angle_Wait_Time[i + 14];
            Enemy_Angle_Script.In_Target_X = this.Angle_In_Target_X[i + 14];
            Enemy_Angle_Script.In_Target_Y = this.Angle_In_Target_Y[i + 14];
          }
        } else if (2 == Angle_Type) {
          this.Enemy_Number = 14;
          for (var i = 0; i < this.Enemy_Number; i++) {
            var Enemy = cc.instantiate(this.Enemy_Prefab[18]);
            Enemy.parent = this.Enemy_Parent;
            Enemy.x = 2296.418;
            Enemy.y = -50;
            var Enemy_Angle_Script = Enemy.getComponent("Enemy_Angle");
            Enemy_Angle_Script.Number = i + 14;
            Enemy_Angle_Script.Wait_Time = this.Angle_Wait_Time[i + 28];
            Enemy_Angle_Script.In_Target_X = this.Angle_In_Target_X[i + 28];
            Enemy_Angle_Script.In_Target_Y = this.Angle_In_Target_Y[i + 28];
          }
        }
      },
      Staff_Enemy_Create: function Staff_Enemy_Create(Staff_Type) {
        if (0 == Staff_Type) {
          this.Enemy_Number = 14;
          for (var i = 0; i < 7; i++) {
            var Enemy = cc.instantiate(this.Enemy_Prefab[19]);
            Enemy.parent = this.Enemy_Parent;
            Enemy.x = 500;
            Enemy.y = -1e3;
            var Enemy_Angle_Script = Enemy.getComponent("Enemy_Staff");
            Enemy_Angle_Script.Wait_Time = i;
            Enemy_Angle_Script.Type = 0;
            Enemy_Angle_Script.Start_Set();
            Enemy_Angle_Script.Special_Move_Content();
          }
          for (var i = 0; i < 7; i++) {
            var Enemy = cc.instantiate(this.Enemy_Prefab[19]);
            Enemy.parent = this.Enemy_Parent;
            Enemy.x = 500;
            Enemy.y = 1e3;
            var Enemy_Angle_Script = Enemy.getComponent("Enemy_Staff");
            Enemy_Angle_Script.Wait_Time = i;
            Enemy_Angle_Script.Type = 1;
            Enemy_Angle_Script.Start_Set();
            Enemy_Angle_Script.Special_Move_Content();
          }
        } else for (var i = 0; i < 14; i++) {
          var Enemy = cc.instantiate(this.Enemy_Prefab[19]);
          Enemy.parent = this.Enemy_Parent;
          Enemy.x = 500;
          Enemy.y = 1e3;
          var Enemy_Angle_Script = Enemy.getComponent("Enemy_Staff");
          Enemy_Angle_Script.Wait_Time = i;
          Enemy_Angle_Script.Type = 2;
          Enemy_Angle_Script.Start_Set();
          Enemy_Angle_Script.Special_Move_Content();
        }
      },
      Demon_Enemy_Create: function Demon_Enemy_Create() {
        this.Enemy_Number = 1;
        var Enemy = cc.instantiate(this.Enemy_Prefab[20]);
        Enemy.parent = this.Enemy_Parent;
        Enemy.x = 1400;
        Enemy.y = 950;
      }
    });
    cc._RF.pop();
  }, {} ],
  Enemy_Demon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "701055SlRVLCrDENOU0UY7o", "Enemy_Demon");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Move_Stage: 0,
        Bullet_Prefab: cc.Prefab,
        Star_Bullet_X: [ cc.Integer ],
        Star_Bullet_Y: [ cc.Integer ]
      },
      start: function start() {
        this.Star_Bullet_X = [ 0, -20, -40, -60, -80, -55, -30, 0, 25, 50, 75, 60, 40, 20, -60, -100, -140, -100, -60, 60, 100, 140, 100, 60 ];
        this.Star_Bullet_Y = [ 150, 100, 50, 0, -50, -30, -10, 10, -10, -30, -50, 0, 50, 100, 100, 100, 100, 70, 40, 40, 70, 100, 100, 100 ];
        this.Special_Move_Content();
      },
      Special_Move_Content: function Special_Move_Content() {
        var _this = this;
        if (0 == this.Move_Stage) {
          var dis_x = Math.pow(800 - this.node.x, 2);
          var dis_y = Math.pow(0 - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          cc.tween(this.node).to(dis / this.Enemy_Common.Speed, {
            position: cc.v2(800, 0)
          }, {
            easing: "quintInOut"
          }).call(function() {
            _this.Stage_Change();
          }).start();
        } else if (1 == this.Move_Stage) {
          var dis_x = Math.pow(1400 - this.node.x, 2);
          var dis_y = Math.pow(-950 - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          cc.tween(this.node).call(function() {
            _this.Animation.play("Enemy_Demon_Stay");
          }).to(dis / this.Enemy_Common.Speed, {
            position: cc.v2(1400, -950)
          }, {
            easing: "quintInOut"
          }).call(function() {
            _this.No_Reward_Dead();
          }).start();
        } else cc.tween(this.node).delay(2).call(function() {
          _this.Animation.play("Enemy_Demon_Attack");
          _this.Stage_Change();
        }).start();
      },
      Shoot: function Shoot() {
        for (var i = 0; i < 20; i++) {
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Enemy_Bullet_Demon = Bullet.getComponent("Enemy_Bullet_Demon");
          var Bullet_Common_Script = Enemy_Bullet_Demon.Enemy_Bullet_Common;
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Enemy_Bullet_Demon.Angle = 18 * i;
          Enemy_Bullet_Demon.Start_Target_X = this.node.x + 300 * Math.cos(Enemy_Bullet_Demon.Angle * Math.PI / 180);
          Enemy_Bullet_Demon.Start_Target_Y = this.node.y + 300 * Math.sin(Enemy_Bullet_Demon.Angle * Math.PI / 180);
          Enemy_Bullet_Demon.Start_Move();
        }
        for (var i = 0; i < 24; i++) {
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Enemy_Bullet_Demon = Bullet.getComponent("Enemy_Bullet_Demon");
          var Bullet_Common_Script = Enemy_Bullet_Demon.Enemy_Bullet_Common;
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Enemy_Bullet_Demon.Start_Target_X = this.node.x + 1.5 * this.Star_Bullet_X[i];
          Enemy_Bullet_Demon.Start_Target_Y = this.node.y + 1.5 * (this.Star_Bullet_Y[i] - 50);
          var dir = cc.v2(Enemy_Bullet_Demon.Start_Target_X - this.node.x, Enemy_Bullet_Demon.Start_Target_Y - this.node.y);
          var radian = Math.atan2(dir.y, dir.x);
          Enemy_Bullet_Demon.Angle = radian / Math.PI * 180;
          Enemy_Bullet_Demon.Start_Move();
        }
      },
      Stage_Change: function Stage_Change() {
        this.Move_Stage++;
        this.Special_Move_Content();
      },
      No_Reward_Dead: function No_Reward_Dead() {
        if (0 == this.Enemy_Common.Is_Dead) {
          this.Enemy_Common.Is_Dead = 1;
          this.node.destroy();
        }
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Animation.play("Enemy_Demon_Stay");
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Doctor: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc2d8/m/aRMy6fwqBmQR3xq", "Enemy_Doctor");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Knight: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aec6a65VzxKeLbEzuCCuMCD", "Enemy_Knight");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 111.128;
        Bullet.y = this.node.y + 71.217;
        Bullet.angle = -60;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -2e3 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 2e3 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 152.168;
        Bullet.y = this.node.y + 27.762;
        Bullet.angle = -30;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -2e3 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 2e3 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 179.93;
        Bullet.y = this.node.y - 18.107;
        Bullet.angle = 0;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -2e3 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 2e3 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 154.582;
        Bullet.y = this.node.y - 61.562;
        Bullet.angle = 30;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -2e3 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 2e3 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 113.542;
        Bullet.y = this.node.y - 106.224;
        Bullet.angle = 60;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -2e3 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 2e3 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Konfu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ddd80nQY99OF4Nxw+LqhiPA", "Enemy_Konfu");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_L337: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "585batb9gZDILPkjmrcaeyq", "Enemy_L337");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      start: function start() {},
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed_Y = Math.floor(201 * Math.random() - 100);
        Bullet_Common_Script.Set_Speed();
      },
      Special_Dead: function Special_Dead() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -1 * Math.floor(501 * Math.random() + 300);
        Bullet_Common_Script.Ini_Speed_Y = Math.floor(1001 * Math.random() - 500);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -1 * Math.floor(501 * Math.random() + 300);
        Bullet_Common_Script.Ini_Speed_Y = Math.floor(1001 * Math.random() - 500);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -1 * Math.floor(501 * Math.random() + 300);
        Bullet_Common_Script.Ini_Speed_Y = Math.floor(1001 * Math.random() - 500);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -1 * Math.floor(501 * Math.random() + 300);
        Bullet_Common_Script.Ini_Speed_Y = Math.floor(1001 * Math.random() - 500);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -1 * Math.floor(501 * Math.random() + 300);
        Bullet_Common_Script.Ini_Speed_Y = Math.floor(1001 * Math.random() - 500);
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Magic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "754b59zpWZH+bM7wCA5g9g5", "Enemy_Magic");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Mario_Cube: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dd4f3YubllOP6UsA4uEnn7x", "Enemy_Mario_Cube");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Common: Enemy_Common
      },
      start: function start() {},
      Bomb: function Bomb() {}
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Ninja: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "25476+tHeVHXZ4ppbjzSvbE", "Enemy_Ninja");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Is_Disappear: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Disappear_Label_Prefab: cc.Prefab
      },
      Think: function Think() {
        if (this.Think_Stage <= 2) {
          this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
          this.Think_Stage++;
        } else {
          this.Think_Stage = 0;
          0 == this.Is_Disappear && this.Animation.play(this.node.name + "_Disappear");
        }
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        Bullet.angle = -30;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -2e3 * Math.cos(-Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 2e3 * Math.sin(-Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        Bullet.angle = 30;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -2e3 * Math.cos(-Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Ini_Speed_Y = 2e3 * Math.sin(-Bullet.angle * Math.PI / 180);
        Bullet_Common_Script.Set_Speed();
      },
      Disappear_Schedule: function Disappear_Schedule() {
        var Disappear_Label = cc.instantiate(this.Disappear_Label_Prefab);
        Disappear_Label.parent = this.Enemy_Common.Particle_Parent;
        Disappear_Label.x = this.node.x - 76.123;
        Disappear_Label.y = this.node.y;
        this.scheduleOnce(function() {
          var _this = this;
          cc.tween(this.node).to(.2, {
            opacity: 255
          }).call(function() {
            _this.Is_Disappear = 0;
          }).start();
        }, 8);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Normal: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec46f5CsHhNe5zaTTevAXMz", "Enemy_Normal");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Injured_Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      },
      Injured_Shoot: function Injured_Shoot() {
        if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
          var Bullet = cc.instantiate(this.Injured_Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet.angle = 90;
          Bullet_Common_Script.Ini_Speed = 0;
          Bullet_Common_Script.Ini_Speed_Y = 800;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Injured_Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet.angle = -45;
          Bullet_Common_Script.Ini_Speed = -400;
          Bullet_Common_Script.Ini_Speed_Y = 400;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Injured_Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet.angle = 0;
          Bullet_Common_Script.Ini_Speed = -800;
          Bullet_Common_Script.Ini_Speed_Y = 0;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Injured_Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet.angle = 45;
          Bullet_Common_Script.Ini_Speed = -400;
          Bullet_Common_Script.Ini_Speed_Y = -400;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Injured_Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet.angle = 90;
          Bullet_Common_Script.Ini_Speed = 0;
          Bullet_Common_Script.Ini_Speed_Y = -800;
          Bullet_Common_Script.Set_Speed();
        }
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Poem_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9aef4IZmKxLvJWP2SrEjH6a", "Enemy_Poem_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Stay_Time: 0
      },
      Start_Schdule: function Start_Schdule() {
        this.scheduleOnce(function() {
          this.Enemy_Bullet_Common.Ini_Speed = -400;
          this.Enemy_Bullet_Common.Ini_Speed_Y = Math.floor(601 * Math.random() - 300);
          this.Enemy_Bullet_Common.Set_Speed();
        }, this.Stay_Time);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Poem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6deaecDw75AOqrLtMuT+RlV", "Enemy_Poem");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Wall_Prefab: cc.Prefab,
        Last_Bullet_Angle: 0,
        Last_Bullet_X: 0,
        Last_Bullet_Y: 0
      },
      Think: function Think() {
        if (this.Think_Stage <= 2) {
          this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
          this.Think_Stage++;
        } else {
          this.Think_Stage = 0;
          this.Animation.play(this.node.name + "_Skill");
        }
      },
      Shoot: function Shoot(Stay_Time) {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        if (.5 == Stay_Time) {
          Bullet.angle = 181 * Math.random() - 90;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
        } else {
          Bullet.angle = this.Last_Bullet_Angle + 161 * Math.random() - 80;
          Bullet.x = this.Last_Bullet_X + 60 * Math.cos(this.Last_Bullet_Angle * Math.PI / 180) * -1;
          Bullet.y = this.Last_Bullet_Y + 60 * Math.sin(this.Last_Bullet_Angle * Math.PI / 180) * -1;
        }
        this.Last_Bullet_Angle = Bullet.angle;
        this.Last_Bullet_X = Bullet.x;
        this.Last_Bullet_Y = Bullet.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
        var Enemy_Poem_Bullet_Script = Bullet.getComponent("Enemy_Poem_Bullet");
        Enemy_Poem_Bullet_Script.Stay_Time = Stay_Time;
        Enemy_Poem_Bullet_Script.Start_Schdule();
      },
      Create_Wall: function Create_Wall() {
        if (this.Enemy_Common.Battle_Controller.Wall_Parent.children.length <= 5) {
          var Enemy = cc.instantiate(this.Wall_Prefab);
          Enemy.parent = this.Enemy_Common.Battle_Controller.Wall_Parent;
          Enemy.x = -1 * Math.floor(801 * Math.random() + 100);
          Enemy.y = this.node.y;
          Enemy.opacity = 150;
          var Enemy_Common_Script = Enemy.getComponent("Enemy_Common");
          Enemy_Common_Script.Have_Coin_Reward = 0;
          Enemy_Common_Script.Have_Rogue_Enegy_Reward = 0;
        }
      },
      Disappear_Schedule: function Disappear_Schedule() {
        var Disappear_Label = cc.instantiate(this.Disappear_Label_Prefab);
        Disappear_Label.parent = this.Enemy_Common.Particle_Parent;
        Disappear_Label.x = this.node.x - 76.123;
        Disappear_Label.y = this.node.y;
        this.scheduleOnce(function() {
          var _this = this;
          cc.tween(this.node).to(.2, {
            opacity: 255
          }).call(function() {
            _this.Is_Disappear = 0;
          }).start();
        }, 8);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Red_Ninja: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01f23Vdg8dFwb6gKpQ/MXWz", "Enemy_Red_Ninja");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Think_Stage: 0,
        Bullet_Prefab: cc.Prefab,
        Enemy_Red_Ninja_Prefab: cc.Prefab
      },
      Think: function Think() {
        if (this.Think_Stage <= 2) {
          this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
          this.Think_Stage++;
        } else {
          this.Think_Stage = 0;
          null != this.node && this.FenShen();
        }
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      },
      FenShen: function FenShen() {
        if (this.Enemy_Common.Battle_Controller.Enemy_Parent.children.length < 20) {
          var Enemy = cc.instantiate(this.Enemy_Red_Ninja_Prefab);
          Enemy.parent = this.Enemy_Common.Battle_Controller.Enemy_Parent;
          Enemy.x = this.node.x;
          Enemy.y = this.node.y;
          Enemy.opacity = 150;
          var Enemy_Common_Script = Enemy.getComponent("Enemy_Common");
          Enemy_Common_Script.Have_Coin_Reward = 0;
          Enemy_Common_Script.Have_Rogue_Enegy_Reward = 0;
          var Hit_Number = cc.instantiate(this.Enemy_Common.Hit_Number_Prefab);
          Hit_Number.parent = this.Enemy_Common.Particle_Parent;
          Hit_Number.x = this.node.x;
          Hit_Number.y = this.node.y;
          Hit_Number.getComponent(cc.Label).string = "\u5206\u8eab\u672f\uff01";
        }
        this.Enemy_Common.Move();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Ruler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1917czyaMxIH4Pj1qWK9svp", "Enemy_Ruler");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Bullet_Label: [ cc.String ],
        Bullet_Speed: [ cc.Integer ]
      },
      start: function start() {
        this.Strong_Bullet_Label = [ "A", "@", "+", "!", "\u5f39" ];
        this.Bullet_Speed = [ 600, 500, 400, 300, 200 ];
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot(Number) {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 78;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          var dir = cc.v2(this.node.x - this.Enemy_Common.Battle_Controller.Hero.x, this.node.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = this.Bullet_Speed[Number] * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = this.Bullet_Speed[Number] * Math.sin(angle * Math.PI / 180);
        } else {
          Bullet_Common_Script.Ini_Speed = -1 * this.Bullet_Speed[Number];
          Bullet_Common_Script.Ini_Speed_Y = 0;
        }
        Bullet_Common_Script.Set_Speed();
        var Bullet_Strong_Script = Bullet.getComponent("Enemy_Bullet_Strong");
        Bullet_Strong_Script.Label.string = this.Strong_Bullet_Label[Number];
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_SAS_Bomb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cc424Ok0jBOwpG6BPhECw2A", "Enemy_SAS_Bomb");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Posion_Prefab: cc.Prefab
      },
      start: function start() {
        this.scheduleOnce(function() {
          var Posion = cc.instantiate(this.Posion_Prefab);
          Posion.parent = this.node.parent;
          Posion.x = this.node.x;
          Posion.y = this.node.y;
          var Posion_Script = Posion.getComponent("Enemy_Bullet_Posion");
          Posion_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Posion_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          this.node.destroy();
        }, 2 * Math.random() + 2);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_SAS: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c73d2e8zUxFH6THgeAuFYLh", "Enemy_SAS");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab,
        Bomb_Prefab: cc.Prefab
      },
      Think: function Think() {
        if (this.Think_Stage <= 2) {
          this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
          this.Think_Stage++;
        } else {
          this.Think_Stage = 0;
          this.Animation.play(this.node.name + "_Skill");
        }
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      },
      Skill_Shoot: function Skill_Shoot() {
        var Bomb = cc.instantiate(this.Bomb_Prefab);
        Bomb.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bomb.x = this.node.x - 76.123;
        Bomb.y = this.node.y;
        var Bullet_Common_Script = Bomb.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed = -1 * Math.random() * 200 - 450;
        Bullet_Common_Script.Ini_Speed_Y = 100 * Math.random() + 450;
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Soldier: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d789Sg9GZFBqLx8fVmVCjK", "Enemy_Soldier");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x + 10;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          var dir = cc.v2(this.node.x - this.Enemy_Common.Battle_Controller.Hero.x, this.node.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 600 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 600 * Math.sin(angle * Math.PI / 180);
        } else {
          Bullet_Common_Script.Ini_Speed = -800;
          Bullet_Common_Script.Ini_Speed_Y = 0;
        }
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Sprint: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e4c15c2cmVAPZMPB6huz/m5", "Enemy_Sprint");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Sprint();
      },
      Shoot: function Shoot() {
        if (this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50) {
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 0;
          Bullet_Common_Script.Ini_Speed_Y = 200;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = -200;
          Bullet_Common_Script.Ini_Speed_Y = 0;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 200;
          Bullet_Common_Script.Ini_Speed_Y = 0;
          Bullet_Common_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          this.Enemy_Common.Bullet_Attack_Count();
          Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
          Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
          Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
          Bullet_Common_Script.Ini_Speed = 0;
          Bullet_Common_Script.Ini_Speed_Y = -200;
          Bullet_Common_Script.Set_Speed();
        }
      },
      Is_Interrupting_To_Sprint: function Is_Interrupting_To_Sprint() {
        0 == this.Enemy_Common.Is_Interrupting;
        this.Sprint();
      },
      Sprint: function Sprint() {
        var _this = this;
        this.Animation.play(this.node.name + "_Stay");
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          var Dis_X = this.Enemy_Common.Battle_Controller.Hero.x;
          var Dis_Y = this.Enemy_Common.Battle_Controller.Hero.y;
          var Dis = Math.sqrt(Math.pow(Dis_X - this.node.x, 2) + Math.pow(Dis_Y - this.node.y, 2));
          var time = Dis / this.Enemy_Common.Speed;
          cc.tween(this.node).to(1 * time, {
            position: cc.v2(Dis_X, Dis_Y)
          }, {
            easing: "quintInOut"
          }).call(function() {
            0 == _this.Enemy_Common.Is_Interrupting && _this.Think();
          }).start();
        }
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Staff: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bd81cAzeNlE46bc6hEh1ZLj", "Enemy_Staff");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Common: Enemy_Common,
        Type: 0,
        Move_Stage: 0,
        Wait_Time: 0,
        Target_X_0: [ cc.Integer ],
        Target_Y_0: [ cc.Integer ],
        Target_X_1: [ cc.Integer ],
        Target_Y_1: [ cc.Integer ],
        Bullet_Prefab: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Target_X_0 = [ 500, 1500 ];
        this.Target_Y_0 = [ -100, -1e3 ];
        this.Target_X_1 = [ 500, 800, 1200, 1500, 1200, 800, 500, 500 ];
        this.Target_Y_1 = [ 0, -300, -300, 0, 300, 300, 0, -1e3 ];
      },
      Special_Move_Content: function Special_Move_Content() {
        var _this = this;
        if (0 == this.Type) if (0 == this.Move_Stage) cc.tween(this.node).delay(this.Wait_Time).call(function() {
          _this.Stage_Change();
        }).start(); else if (1 == this.Move_Stage) {
          var dis_x = Math.pow(this.Target_X_0[this.Move_Stage - 1] - this.node.x, 2);
          var dis_y = Math.pow(this.Target_Y_0[this.Move_Stage - 1] - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          cc.tween(this.node).to(dis / this.Enemy_Common.Speed, {
            position: cc.v2(this.Target_X_0[this.Move_Stage - 1], this.Target_Y_0[this.Move_Stage - 1])
          }, {
            easing: "quintInOut"
          }).call(function() {
            _this.Stage_Change();
            _this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 && _this.Shoot();
          }).start();
        } else {
          var dis_x = Math.pow(this.Target_X_0[this.Move_Stage - 1] - this.node.x, 2);
          var dis_y = Math.pow(this.Target_Y_0[this.Move_Stage - 1] - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          cc.tween(this.node).to(dis / this.Enemy_Common.Speed, {
            position: cc.v2(this.Target_X_0[this.Move_Stage - 1], this.Target_Y_0[this.Move_Stage - 1])
          }, {
            easing: "quintInOut"
          }).call(function() {
            _this.No_Reward_Dead();
          }).start();
        } else if (1 == this.Type) if (0 == this.Move_Stage) cc.tween(this.node).delay(this.Wait_Time).call(function() {
          _this.Stage_Change();
        }).start(); else if (1 == this.Move_Stage) {
          var dis_x = Math.pow(this.Target_X_1[this.Move_Stage - 1] - this.node.x, 2);
          var dis_y = Math.pow(-1 * this.Target_Y_1[this.Move_Stage - 1] - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          cc.tween(this.node).to(dis / this.Enemy_Common.Speed, {
            position: cc.v2(this.Target_X_0[this.Move_Stage - 1], -1 * this.Target_Y_0[this.Move_Stage - 1])
          }).call(function() {
            _this.Stage_Change();
            _this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 && _this.Shoot();
          }).start();
        } else {
          var dis_x = Math.pow(this.Target_X_1[this.Move_Stage - 1] - this.node.x, 2);
          var dis_y = Math.pow(-1 * this.Target_Y_1[this.Move_Stage - 1] - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          cc.tween(this.node).to(dis / this.Enemy_Common.Speed, {
            position: cc.v2(this.Target_X_0[this.Move_Stage - 1], -1 * this.Target_Y_0[this.Move_Stage - 1])
          }).call(function() {
            _this.No_Reward_Dead();
          }).start();
        } else if (2 == this.Type) if (0 == this.Move_Stage) cc.tween(this.node).delay(this.Wait_Time).call(function() {
          _this.Stage_Change();
        }).start(); else if (1 == this.Move_Stage || 7 == this.Move_Stage) {
          var dis_x = Math.pow(this.Target_X_1[this.Move_Stage - 1] - this.node.x, 2);
          var dis_y = Math.pow(this.Target_Y_1[this.Move_Stage - 1] - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          cc.tween(this.node).to(dis / this.Enemy_Common.Speed, {
            position: cc.v2(this.Target_X_1[this.Move_Stage - 1], this.Target_Y_1[this.Move_Stage - 1])
          }).call(function() {
            _this.Stage_Change();
            _this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 && _this.Shoot();
          }).start();
        } else if (8 == this.Move_Stage) {
          var dis_x = Math.pow(this.Target_X_1[this.Move_Stage - 1] - this.node.x, 2);
          var dis_y = Math.pow(this.Target_Y_1[this.Move_Stage - 1] - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          cc.tween(this.node).to(dis / this.Enemy_Common.Speed, {
            position: cc.v2(this.Target_X_1[this.Move_Stage - 1], this.Target_Y_1[this.Move_Stage - 1])
          }).call(function() {
            _this.No_Reward_Dead();
          }).start();
        } else {
          var dis_x = Math.pow(this.Target_X_1[this.Move_Stage - 1] - this.node.x, 2);
          var dis_y = Math.pow(this.Target_Y_1[this.Move_Stage - 1] - this.node.y, 2);
          var dis = Math.sqrt(dis_x + dis_y);
          cc.tween(this.node).to(dis / this.Enemy_Common.Speed, {
            position: cc.v2(this.Target_X_1[this.Move_Stage - 1], this.Target_Y_1[this.Move_Stage - 1])
          }).call(function() {
            _this.Stage_Change();
          }).start();
        }
      },
      Stage_Change: function Stage_Change() {
        this.Move_Stage++;
        this.Special_Move_Content();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 78;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          var dir = cc.v2(this.node.x - this.Enemy_Common.Battle_Controller.Hero.x, this.node.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 600 * Math.cos(angle * Math.PI / 180);
          Bullet_Common_Script.Ini_Speed_Y = 600 * Math.sin(angle * Math.PI / 180);
        } else {
          Bullet_Common_Script.Ini_Speed = -600;
          Bullet_Common_Script.Ini_Speed_Y = 0;
        }
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 78;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          var dir = cc.v2(this.node.x - this.Enemy_Common.Battle_Controller.Hero.x, this.node.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 600 * Math.cos(angle * Math.PI / 180) - 100;
          Bullet_Common_Script.Ini_Speed_Y = 600 * Math.sin(angle * Math.PI / 180) + 100;
        } else {
          Bullet_Common_Script.Ini_Speed = -700;
          Bullet_Common_Script.Ini_Speed_Y = 100;
        }
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 78;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          var dir = cc.v2(this.node.x - this.Enemy_Common.Battle_Controller.Hero.x, this.node.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 600 * Math.cos(angle * Math.PI / 180) + 100;
          Bullet_Common_Script.Ini_Speed_Y = 600 * Math.sin(angle * Math.PI / 180) - 100;
        } else {
          Bullet_Common_Script.Ini_Speed = -500;
          Bullet_Common_Script.Ini_Speed_Y = -100;
        }
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 78;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          var dir = cc.v2(this.node.x - this.Enemy_Common.Battle_Controller.Hero.x, this.node.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 600 * Math.cos(angle * Math.PI / 180) + 200;
          Bullet_Common_Script.Ini_Speed_Y = 600 * Math.sin(angle * Math.PI / 180) - 200;
        } else {
          Bullet_Common_Script.Ini_Speed = -400;
          Bullet_Common_Script.Ini_Speed_Y = -200;
        }
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 78;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        if (null != this.Enemy_Common.Battle_Controller.Hero) {
          var dir = cc.v2(this.node.x - this.Enemy_Common.Battle_Controller.Hero.x, this.node.y - this.Enemy_Common.Battle_Controller.Hero.y);
          var radian = Math.atan2(dir.y, dir.x);
          var angle = radian / Math.PI * 180 - 180;
          Bullet_Common_Script.Ini_Speed = 600 * Math.cos(angle * Math.PI / 180) - 200;
          Bullet_Common_Script.Ini_Speed_Y = 600 * Math.sin(angle * Math.PI / 180) + 200;
        } else {
          Bullet_Common_Script.Ini_Speed = -800;
          Bullet_Common_Script.Ini_Speed_Y = 200;
        }
        Bullet_Common_Script.Set_Speed();
      },
      No_Reward_Dead: function No_Reward_Dead() {
        if (0 == this.Enemy_Common.Is_Dead) {
          this.Enemy_Common.Is_Dead = 1;
          this.node.destroy();
        }
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Stone: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8f3d3vhZlNPVKr6Pxu2j+oW", "Enemy_Stone");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Think_Stage: 0,
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        if (this.Think_Stage <= 2) {
          this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
          this.Think_Stage++;
        } else {
          this.Think_Stage = 0;
          this.Animation.play(this.node.name + "_Skill");
        }
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed_Y = 10;
        var Enemy_Bullet_Angle_Stone = Bullet.getComponent("Enemy_Bullet_Angle_Stone");
        Enemy_Bullet_Angle_Stone.Target_Speed = 400;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed_Y = -10;
        var Enemy_Bullet_Angle_Stone = Bullet.getComponent("Enemy_Bullet_Angle_Stone");
        Enemy_Bullet_Angle_Stone.Target_Speed = 400;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed_Y = 20;
        var Enemy_Bullet_Angle_Stone = Bullet.getComponent("Enemy_Bullet_Angle_Stone");
        Enemy_Bullet_Angle_Stone.Target_Speed = 300;
        Bullet_Common_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Ini_Speed_Y = -20;
        var Enemy_Bullet_Angle_Stone = Bullet.getComponent("Enemy_Bullet_Angle_Stone");
        Enemy_Bullet_Angle_Stone.Target_Speed = 300;
        Bullet_Common_Script.Set_Speed();
      },
      Skill: function Skill() {
        this.Enemy_Common.Can_Injured = 0;
      },
      Skill_End: function Skill_End() {
        this.Enemy_Common.Can_Injured = 1;
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Sword: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "41906qD/StGCZdhjGeqk2hi", "Enemy_Sword");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_UAV: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2ff01eU6CNH57GqXHPxH9GD", "Enemy_UAV");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      start: function start() {
        this.schedule(function() {
          if (null != this.node) {
            var Bullet = cc.instantiate(this.Bullet_Prefab);
            Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
            Bullet.x = this.node.x + 10;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            this.Enemy_Common.Bullet_Attack_Count();
            Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
            if (null != this.Enemy_Common.Battle_Controller.Hero) {
              var dir = cc.v2(this.node.x - this.Enemy_Common.Battle_Controller.Hero.x, this.node.y - this.Enemy_Common.Battle_Controller.Hero.y);
              var radian = Math.atan2(dir.y, dir.x);
              var angle = radian / Math.PI * 180 - 180;
              Bullet_Common_Script.Ini_Speed = 800 * Math.cos(angle * Math.PI / 180);
              Bullet_Common_Script.Ini_Speed_Y = 800 * Math.sin(angle * Math.PI / 180);
            } else {
              Bullet_Common_Script.Ini_Speed = -800;
              Bullet_Common_Script.Ini_Speed_Y = 0;
            }
            Bullet_Common_Script.Set_Speed();
            this.Miaozhunshe_Shoot_Schedule_Count++;
          }
        }, 2);
      },
      Think: function Think() {}
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_Warrior_Mother_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "baf07ktRTpP9axHQ/uM101F", "Enemy_Warrior_Mother_Bullet");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Son_Bullet: cc.Prefab
      },
      start: function start() {
        this.schedule(function() {
          if (this.node.parent.children.length < 50 && null != this.node) {
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = -300;
            Bullet_Common_Script.Ini_Speed_Y = 300;
            Bullet_Common_Script.Set_Speed();
            var Bullet = cc.instantiate(this.Son_Bullet);
            Bullet.parent = this.node.parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
            Bullet_Common_Script.Attack = this.Enemy_Bullet_Common.Attack;
            Bullet_Common_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
            Bullet_Common_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
            Bullet_Common_Script.Ini_Speed = -300;
            Bullet_Common_Script.Ini_Speed_Y = -300;
            Bullet_Common_Script.Set_Speed();
          }
        }, 1.5);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_Warrior: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "428a74S2TZL7LWt8p5wEofa", "Enemy_Warrior");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Enemy_White_Man_Bomb: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9706qYtF5Otao2xr/03iOw", "Enemy_White_Man_Bomb");
    "use strict";
    var Enemy_Bullet_Common = require("Enemy_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Bullet_Common: Enemy_Bullet_Common,
        Bullet_Prefab: cc.Prefab
      },
      start: function start() {
        this.scheduleOnce(function() {
          this.Enemy_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = Math.floor(801 * Math.random() - 1e3);
          Bullet_Script.Ini_Speed_Y = Math.floor(351 * Math.random() + 50);
          Bullet_Script.RigidBody.gravityScale = .5;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = Math.floor(801 * Math.random() - 1e3);
          Bullet_Script.Ini_Speed_Y = Math.floor(351 * Math.random() + 50);
          Bullet_Script.RigidBody.gravityScale = .5;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = Math.floor(801 * Math.random() - 1e3);
          Bullet_Script.Ini_Speed_Y = Math.floor(351 * Math.random() + 50);
          Bullet_Script.RigidBody.gravityScale = .5;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = Math.floor(801 * Math.random() - 1e3);
          Bullet_Script.Ini_Speed_Y = Math.floor(351 * Math.random() + 50);
          Bullet_Script.RigidBody.gravityScale = .5;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = Math.floor(801 * Math.random() - 1e3);
          Bullet_Script.Ini_Speed_Y = Math.floor(351 * Math.random() + 50);
          Bullet_Script.RigidBody.gravityScale = .5;
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.scale = cc.v2(.5, .5);
          var Bullet_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Script.Attack = this.Enemy_Bullet_Common.Attack;
          Bullet_Script.Jing_Jie = this.Enemy_Bullet_Common.Jing_Jie;
          Bullet_Script.Battle_Controller = this.Enemy_Bullet_Common.Battle_Controller;
          Bullet_Script.Ini_Speed = Math.floor(801 * Math.random() - 1e3);
          Bullet_Script.Ini_Speed_Y = Math.floor(351 * Math.random() + 50);
          Bullet_Script.RigidBody.gravityScale = .5;
          Bullet_Script.Set_Speed();
          this.node.destroy();
        }, .5);
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Bullet_Common: "Enemy_Bullet_Common"
  } ],
  Enemy_White_Man: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6134cstQLNN/IJ3WY9TfObE", "Enemy_White_Man");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Enemy_Common: Enemy_Common,
        Bullet_Prefab: cc.Prefab
      },
      Think: function Think() {
        this.Enemy_Common.Enemy_Bullet_Parent.children.length <= 50 ? this.Animation.play(this.node.name + "_Attack") : this.Enemy_Common.Move();
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Enemy_Common.Enemy_Bullet_Parent;
        Bullet.x = this.node.x - 76.123;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        this.Enemy_Common.Bullet_Attack_Count();
        Bullet_Common_Script.Attack = this.Enemy_Common.Bullet_Attack;
        Bullet_Common_Script.Jing_Jie = this.Enemy_Common.Enemy_Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Enemy_Common.Battle_Controller;
        Bullet_Common_Script.Set_Speed();
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Example1: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4975aGNb/RF5qr3YkdDHi3o", "Example1");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = this && this.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TextMeshPro_1 = require("./TextMeshPro");
    var TmpUtils_1 = require("./utils/TmpUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Example1 = function(_super) {
      __extends(Example1, _super);
      function Example1() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.text1 = null;
        _this.text2 = null;
        _this.text3 = null;
        _this._time = 0;
        _this._fScale = 1;
        _this._xOffset = 0;
        _this._initPos = [];
        _this.alpha = 0;
        return _this;
      }
      Example1.prototype.start = function() {
        var _this = this;
        this.anim1();
        this.anim3();
        this.scheduleOnce(function() {
          for (var i = 0; i < _this.text2.string.length; i++) {
            var result = _this.text2.getPosVertices(i);
            _this._initPos.push(result);
          }
        }, 0);
      };
      Example1.prototype.update = function(dt) {
        this._time += dt;
        this.anim2();
      };
      Example1.prototype.anim1 = function() {
        return __awaiter(this, void 0, Promise, function() {
          var i, _loop_1, this_1, i;
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, TmpUtils_1.default.waitCmpt(this, 1) ];

             case 1:
              _a.sent();
              this.text1.string = "\u8fd9 \u662f \u4e00 \u6bb5 \u6d4b \u8bd5 \u6587 \u5b57aaagghjsa;dzxmc;";
              this.text1.forceUpdateRenderData();
              this.text2.tmpUniform.outlineColor = cc.color(123, 223, 0);
              for (i = 0; i < this.text1.string.length; i++) this.text1.setVisible(i, false);
              _loop_1 = function(i) {
                var result, center, updateCall;
                return __generator(this, function(_a) {
                  switch (_a.label) {
                   case 0:
                    this_1.text1.setVisible(i, true);
                    if (!this_1.text1.isVisible(i)) return [ 2, "continue" ];
                    result = this_1.text1.getPosVertices(i);
                    center = cc.v2();
                    center.x = (result[0].x + result[1].x + result[2].x + result[3].x) / 4;
                    center.y = (result[0].y + result[1].y + result[2].y + result[3].y) / 4;
                    this_1._xOffset = -30;
                    updateCall = function() {
                      var copy = [];
                      copy.push(result[0].clone());
                      copy.push(result[1].clone());
                      copy.push(result[2].clone());
                      copy.push(result[3].clone());
                      for (var j = 0; j < 4; j++) {
                        var delta = copy[j].sub(center);
                        delta.mulSelf(_this._fScale).addSelf(cc.v2(_this._xOffset, 0));
                        copy[j] = center.add(delta);
                      }
                      _this.text1.setPosVertices(i, copy);
                    };
                    cc.tween(this_1).to(.05, {
                      _fScale: 2,
                      _xOffset: -15
                    }, {
                      onUpdate: updateCall
                    }).to(.05, {
                      _fScale: 1,
                      _xOffset: 0
                    }, {
                      onUpdate: updateCall
                    }).start();
                    return [ 4, TmpUtils_1.default.waitCmpt(this_1, .1) ];

                   case 1:
                    _a.sent();
                    return [ 2 ];
                  }
                });
              };
              this_1 = this;
              i = 0;
              _a.label = 2;

             case 2:
              if (!(i < this.text1.string.length)) return [ 3, 5 ];
              return [ 5, _loop_1(i) ];

             case 3:
              _a.sent();
              _a.label = 4;

             case 4:
              i++;
              return [ 3, 2 ];

             case 5:
              return [ 2 ];
            }
          });
        });
      };
      Example1.prototype.anim2 = function() {
        if (this._initPos.length <= 0) return;
        for (var i = 0; i < this.text2.string.length; i++) {
          if (!this.text2.isVisible(i)) continue;
          var result = [];
          for (var j = 0; j < 4; j++) {
            result.push(this._initPos[i][j].clone());
            result[j].y += 10 * Math.sin(.5 * i + 5 * this._time);
          }
          this.text2.setPosVertices(i, result);
        }
      };
      Example1.prototype.anim3 = function() {
        return __awaiter(this, void 0, Promise, function() {
          var i, time, _loop_2, this_2, i;
          var _this = this;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              return [ 4, TmpUtils_1.default.waitCmpt(this, 1) ];

             case 1:
              _a.sent();
              this.text3.string = "\u8fd9 \u662f \u4e00 \u6bb5 \u6d4b \u8bd5 \u6587 \u5b57aaagghjsa;dzxmc;";
              this.text3.forceUpdateRenderData();
              for (i = 0; i < this.text3.string.length; i++) this.text3.setVisible(i, false);
              time = .1;
              _loop_2 = function(i) {
                var result;
                return __generator(this, function(_a) {
                  switch (_a.label) {
                   case 0:
                    this_2.text3.setVisible(i, true);
                    if (!this_2.text3.isVisible(i)) return [ 2, "continue" ];
                    this_2.text3.setVisible(i, false);
                    result = this_2.text3.getColorExtraVertices(i);
                    this_2.alpha = 0;
                    cc.tween(this_2).to(time / 2, {
                      alpha: 255
                    }, {
                      onUpdate: function() {
                        result[0].a = _this.alpha;
                        result[2].a = _this.alpha;
                        _this.text3.setColorExtraVertices(i, result);
                      }
                    }).call(function() {
                      _this.alpha = 0;
                    }).to(time / 2, {
                      alpha: 255
                    }, {
                      onUpdate: function() {
                        result[1].a = _this.alpha;
                        result[3].a = _this.alpha;
                        _this.text3.setColorExtraVertices(i, result);
                      }
                    }).start();
                    return [ 4, TmpUtils_1.default.waitCmpt(this_2, time) ];

                   case 1:
                    _a.sent();
                    return [ 2 ];
                  }
                });
              };
              this_2 = this;
              i = 0;
              _a.label = 2;

             case 2:
              if (!(i < this.text3.string.length)) return [ 3, 5 ];
              return [ 5, _loop_2(i) ];

             case 3:
              _a.sent();
              _a.label = 4;

             case 4:
              i++;
              return [ 3, 2 ];

             case 5:
              return [ 2 ];
            }
          });
        });
      };
      __decorate([ property(TextMeshPro_1.default) ], Example1.prototype, "text1", void 0);
      __decorate([ property(TextMeshPro_1.default) ], Example1.prototype, "text2", void 0);
      __decorate([ property(TextMeshPro_1.default) ], Example1.prototype, "text3", void 0);
      Example1 = __decorate([ ccclass ], Example1);
      return Example1;
    }(cc.Component);
    exports.default = Example1;
    cc._RF.pop();
  }, {
    "./TextMeshPro": "TextMeshPro",
    "./utils/TmpUtils": "TmpUtils"
  } ],
  Extra_Skill_Script: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7863d7BkWpHILSWSoS36O0+", "Extra_Skill_Script");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Extra_Skill_Limit: 3,
        Extra_Skill_Number: 0,
        Extra_Skill_Parent_1: cc.Node,
        Extra_Skill_Parent_2: cc.Node,
        Extra_Skill_Parent_3: cc.Node,
        U_Skill: cc.Node,
        I_Skill: cc.Node,
        O_Skill: cc.Node
      },
      onLoad: function onLoad() {
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
      },
      onKeyDown: function onKeyDown(event) {
        var _this = this;
        switch (event.keyCode) {
         case cc.macro.KEY.u:
          console.log("UUUUUUUUUUUUUUUUUUUU");
          if (null != this.U_Skill && 0 == this.U_Skill.Is_Cooling && 0 == this.Battle_Controller.Hero_Script.Is_Doing_Something && 1 == this.Battle_Controller.Hero_Script.Can_Skill) {
            this.U_Skill.Is_Cooling = 1;
            this.U_Skill.BG_Sprite.fillRange = 1;
            this.U_Skill.Skill_Start();
            cc.tween(this.U_Skill.BG_Sprite).to(this.U_Skill.Cold_Time, {
              fillRange: 0
            }).call(function() {
              _this.U_Skill.Is_Cooling = 0;
            }).start();
          }
          break;

         case cc.macro.KEY.i:
          if (null != this.I_Skill && 0 == this.I_Skill.Is_Cooling && 0 == this.Battle_Controller.Hero_Script.Is_Doing_Something && 1 == this.Battle_Controller.Hero_Script.Can_Skill) {
            this.I_Skill.Is_Cooling = 1;
            this.I_Skill.BG_Sprite.fillRange = 1;
            this.I_Skill.Skill_Start();
            cc.tween(this.I_Skill.BG_Sprite).to(this.I_Skill.Cold_Time, {
              fillRange: 0
            }).call(function() {
              _this["this"].I_Skill.Is_Cooling = 0;
            }).start();
          }
          break;

         case cc.macro.KEY.o:
          if (null != this.O_Skill && 0 == this.O_Skill.Is_Cooling && 0 == this.Battle_Controller.Hero_Script.Is_Doing_Something && 1 == this.Battle_Controller.Hero_Script.Can_Skill) {
            this.O_Skill.Is_Cooling = 1;
            this.O_Skill.BG_Sprite.fillRange = 1;
            this.O_Skill.Skill_Start();
            cc.tween(this.O_Skill.BG_Sprite).to(this.O_Skill.Cold_Time, {
              fillRange: 0
            }).call(function() {
              _this["this"].O_Skill.Is_Cooling = 0;
            }).start();
          }
        }
      },
      Set_U_Skill: function Set_U_Skill() {
        this.U_Skill.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          var _this2 = this;
          if (null != this.U_Skill && 0 == this.U_Skill.Is_Cooling && 0 == this.Battle_Controller.Hero_Script.Is_Doing_Something && 1 == this.Battle_Controller.Hero_Script.Can_Skill) {
            this.U_Skill.Is_Cooling = 1;
            this.U_Skill.BG_Sprite.fillRange = 1;
            this.U_Skill.Skill_Start();
            cc.tween(this.U_Skill.BG_Sprite).to(this.U_Skill.Cold_Time, {
              fillRange: 0
            }).call(function() {
              _this2.U_Skill.Is_Cooling = 0;
            }).start();
          }
        }, this);
      },
      Set_I_Skill: function Set_I_Skill() {
        this.I_Skill.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          var _this3 = this;
          if (null != this.I_Skill && 0 == this.I_Skill.Is_Cooling && 0 == this.Battle_Controller.Hero_Script.Is_Doing_Something && 1 == this.Battle_Controller.Hero_Script.Can_Skill) {
            this.I_Skill.Is_Cooling = 1;
            this.I_Skill.BG_Sprite.fillRange = 1;
            this.I_Skill.Skill_Start();
            cc.tween(this.I_Skill.BG_Sprite).to(this.I_Skill.Cold_Time, {
              fillRange: 0
            }).call(function() {
              _this3.I_Skill.Is_Cooling = 0;
            }).start();
          }
        }, this);
      },
      Set_O_Skill: function Set_O_Skill() {
        this.O_Skill.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          var _this4 = this;
          if (null != this.O_Skill && 0 == this.O_Skill.Is_Cooling && 0 == this.Battle_Controller.Hero_Script.Is_Doing_Something && 1 == this.Battle_Controller.Hero_Script.Can_Skill) {
            this.O_Skill.Is_Cooling = 1;
            this.O_Skill.BG_Sprite.fillRange = 1;
            this.O_Skill.Skill_Start();
            cc.tween(this.O_Skill.BG_Sprite).to(this.O_Skill.Cold_Time, {
              fillRange: 0
            }).call(function() {
              _this4.O_Skill.Is_Cooling = 0;
            }).start();
          }
        }, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  Fire_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4dbd2TozsVLzLpVd6Siz26Y", "Fire_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        "Enemy" == otherCollider.node.group && otherCollider.node.getComponent("Enemy_Common").Start_Fire();
      }
    });
    cc._RF.pop();
  }, {} ],
  Fly_Item_Big_Cloud: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fcbefcRJdxHT4fe0QAO9SYb", "Fly_Item_Big_Cloud");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().to(15 * Math.random() + 1, {
          position: cc.v2(-5e3, this.node.y)
        }).call(function() {
          _this.node.x = 5e3;
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Fly_Item_Cloud: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bccc0gaWKhPr7BPAhWyoJte", "Fly_Item_Cloud");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().to(5 * Math.random() + 1, {
          position: cc.v2(-1 * this.node.width, this.node.y)
        }).call(function() {
          _this.node.x = _this.node.width;
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Fly_Item_Up_Cloud: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3a378YzFBBw6uHMmhLLEfU", "Fly_Item_Up_Cloud");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().to(15 * Math.random() + 1, {
          position: cc.v2(-8e3, this.node.y)
        }).call(function() {
          _this.node.scaleX = 1 * Math.random() + 1.5;
          _this.node.scaleY = 1 * Math.random() + 1.5;
          _this.node.x = 8e3;
          var a = Math.round(Math.random());
          _this.node.y = 1 == a ? 800 * Math.random() : -800 * Math.random();
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Fly_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f8f74YVUEhMtL94F1K/uXYT", "Fly_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().to(2 * Math.random() + 1, {
          position: cc.v2(-2074.344, this.node.y)
        }).call(function() {
          _this.node.scaleX = (Math.random() + 2) / 15;
          _this.node.scaleY = (Math.random() + 2) / 15;
          _this.node.x = 2040.6;
          var a = Math.round(Math.random());
          _this.node.y = 1 == a ? 750 * Math.random() : -750 * Math.random();
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Follow_Hero_Item_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f9d5bR0HxVCeofSR8SSWRvb", "Follow_Hero_Item_Common");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Follow_Hero_Schedule: cc.Schedule,
        Follow_Hero_Tween: cc.Tween,
        Hero_Target: cc.Node,
        Position: 0
      },
      start: function start() {
        this.Follow_Start();
      },
      Follow_Start: function Follow_Start() {
        this.Follow_Hero_Schedule = function() {
          var _this = this;
          this.Follow_Hero_Tween = cc.tween(this.node).call(function() {
            null == _this.Hero_Target && (_this.Hero_Target = cc.find("Canvas/Hero").children[0]);
            _this.Position = _this.node.parent.children.indexOf(_this.node) + 1;
          }).to(.2 + .3 * this.Position, {
            position: cc.v2(this.Hero_Target.x - 80 * this.Position, this.Hero_Target.y)
          }, {
            easing: "quadOut"
          }).start();
        };
        this.schedule(this.Follow_Hero_Schedule, 1e-4);
      },
      Stop_Follow: function Stop_Follow() {
        this.unschedule(this.Follow_Hero_Schedule);
        cc.Tween.stopAllByTarget(this.node);
      }
    });
    cc._RF.pop();
  }, {} ],
  Fu_Bagua: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93213N0Sw5A5bMxq8lvrtu7", "Fu_Bagua");
    "use strict";
    var Fu_Common = require("Fu_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Fu_Common: Fu_Common,
        White_Bullet: cc.Prefab,
        Black_Bullet: cc.Prefab,
        White_Particle: cc.Prefab,
        Black_Particle: cc.Prefab
      },
      Fu_Effect: function Fu_Effect() {
        this.Fu_Common.Battle_Controller.Camera_Shake_Medium();
        var Bullet = cc.instantiate(this.White_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.angle = -90;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Luxue_Yinyang_Bullet = Bullet.getComponent("Luxue_Bagua_Bullet");
        null != Luxue_Yinyang_Bullet && (Luxue_Yinyang_Bullet.Is_4_Star = 1);
        var Bullet = cc.instantiate(this.Black_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.angle = 90;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Luxue_Yinyang_Bullet = Bullet.getComponent("Luxue_Bagua_Bullet");
        null != Luxue_Yinyang_Bullet && (Luxue_Yinyang_Bullet.Is_4_Star = 1);
        var Bomb_Particle = cc.instantiate(this.White_Particle);
        Bomb_Particle.parent = this.Fu_Common.Battle_Controller.Particle_Parent;
        Bomb_Particle.x = this.node.x;
        Bomb_Particle.y = this.node.y;
        var Bomb_Particle = cc.instantiate(this.Black_Particle);
        Bomb_Particle.parent = this.Fu_Common.Battle_Controller.Particle_Parent;
        Bomb_Particle.x = this.node.x;
        Bomb_Particle.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Fu_Common: "Fu_Common"
  } ],
  Fu_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "142e7WsJgJICqYITxaDZTf+", "Fu_Common");
    "use strict";
    var Battle_Controller = require("Battle_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: Battle_Controller,
        Animation: cc.Animation,
        Can_Collider: 0,
        Particle: [ cc.ParticleSystem ],
        Attack_Result: 0,
        Crit_Rate_Result: 0,
        Crit_Mult_Result: 0,
        Jing_Jie_Result: 0,
        Bullet_Scale_Result: 0,
        Is_Normal_Destroy: 1,
        End_Schedule: cc.Schedule
      },
      start: function start() {
        this.End_Schedule = function() {
          var _this = this;
          cc.tween(this.node).to(1, {
            scale: 0
          }).call(function() {
            for (var i = 0; i < _this.Particle.length; i++) {
              _this.Particle[i].node.parent = _this.Battle_Controller.Particle_Parent;
              _this.Particle[i].duration = .5;
            }
            _this.node.destroy();
          }).start();
        };
        this.scheduleOnce(this.End_Schedule, 10);
      },
      To_Stay: function To_Stay() {
        this.Animation.play("Fu_Stay");
        this.Can_Collider = 1;
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        var _this2 = this;
        if (1 == this.Can_Collider && "Hero" == other.node.group) {
          this.Can_Collider = 0;
          this.unschedule(this.End_Schedule);
          cc.Tween.stopAllByTarget(this.node);
          this.Fu_Effect();
          cc.tween(this.node).to(1, {
            scaleX: 5,
            scaleY: 5,
            opacity: 0
          }).call(function() {
            for (var i = 0; i < _this2.Particle.length; i++) {
              _this2.Particle[i].node.parent = _this2.Battle_Controller.Particle_Parent;
              _this2.Particle[i].duration = .5;
            }
            1 == _this2.Is_Normal_Destroy && _this2.node.destroy();
          }).start();
        }
      },
      Fu_Effect: function Fu_Effect() {
        this.node.getComponent(this.node.name).Fu_Effect();
      },
      Fu_Attack_Count: function Fu_Attack_Count() {
        this.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 2;
        this.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        this.Bullet_Scale_Result = this.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        this.Jing_Jie_Result = this.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
        this.Attack_Result = Math.ceil(this.Battle_Controller.Hero_Script.Hero_Common.Attack_Result * (100 + this.Battle_Controller.Fu_Attack_Addition) / 100);
        this.Crit_Rate_Result = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
        this.Crit_Mult_Result = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
      }
    });
    cc._RF.pop();
  }, {
    Battle_Controller: "Battle_Controller"
  } ],
  Fu_Fire: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "93f6anyJqxK8bZdmRYs7pnU", "Fu_Fire");
    "use strict";
    var Fu_Common = require("Fu_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Fu_Common: Fu_Common,
        Fire_Bullet: cc.Prefab,
        Bomb_Particle: cc.Prefab
      },
      Fu_Effect: function Fu_Effect() {
        this.Fu_Common.Battle_Controller.Camera_Shake_Medium();
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.angle = -90;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = 2 * this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.angle = 90;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = 2 * this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = 2 * this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Bomb_Particle = cc.instantiate(this.Bomb_Particle);
        Bomb_Particle.parent = this.Fu_Common.Battle_Controller.Particle_Parent;
        Bomb_Particle.x = this.node.x;
        Bomb_Particle.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Fu_Common: "Fu_Common"
  } ],
  Fu_Heart: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7cf07iuYYhLvJtktdscaW5t", "Fu_Heart");
    "use strict";
    var Fu_Common = require("Fu_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Fu_Common: Fu_Common
      },
      Fu_Effect: function Fu_Effect() {
        this.Fu_Common.Battle_Controller.Hero_Script.Hero_Common.Recovery(10);
      }
    });
    cc._RF.pop();
  }, {
    Fu_Common: "Fu_Common"
  } ],
  Fu_Poison: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b9be3vTtVOqImUAyOrHUY/", "Fu_Poison");
    "use strict";
    var Fu_Common = require("Fu_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Fu_Common: Fu_Common,
        Fire_Bullet: cc.Prefab,
        Bomb_Particle: cc.Prefab
      },
      Fu_Effect: function Fu_Effect() {
        this.Fu_Common.Battle_Controller.Camera_Shake_Medium();
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.angle = -90;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = 2 * this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.angle = 90;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = 2 * this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = 2 * this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Bomb_Particle = cc.instantiate(this.Bomb_Particle);
        Bomb_Particle.parent = this.Fu_Common.Battle_Controller.Particle_Parent;
        Bomb_Particle.x = this.node.x;
        Bomb_Particle.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Fu_Common: "Fu_Common"
  } ],
  Fu_Thunder: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5fe5blJ+y9Pc5Xhx3LBnGht", "Fu_Thunder");
    "use strict";
    var Fu_Common = require("Fu_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Fu_Common: Fu_Common,
        Fire_Bullet: cc.Prefab,
        Number: 0
      },
      Fu_Effect: function Fu_Effect() {
        this.schedule(function() {
          this.Number++;
          if (this.Number <= 5) if (this.Fu_Common.Battle_Controller.Enemy_Parent.children.length <= 0) {
            var Bullet = cc.instantiate(this.Fire_Bullet);
            Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
            Bullet.x = 500;
            Bullet.y = 0;
            this.Fu_Common.Fu_Attack_Count();
            Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
            Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
            var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
            Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
            Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
            Bullet_Script.Attack = this.Fu_Common.Attack_Result;
            Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
            Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
          } else {
            var Target = this.Fu_Common.Battle_Controller.Enemy_Parent.children[Math.floor(Math.random() * this.Fu_Common.Battle_Controller.Enemy_Parent.children.length)];
            if (null != Target) {
              var Bullet = cc.instantiate(this.Fire_Bullet);
              Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
              Bullet.x = Target.x;
              Bullet.y = 0;
              this.Fu_Common.Fu_Attack_Count();
              Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
              Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
              var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
              Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
              Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
              Bullet_Script.Attack = this.Fu_Common.Attack_Result;
              Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
              Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
            }
          } else this.node.destroy();
        }, 1);
      }
    });
    cc._RF.pop();
  }, {
    Fu_Common: "Fu_Common"
  } ],
  Fu_Water_Dragon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0a3b4hEaj1GF5N/qj92xP1T", "Fu_Water_Dragon");
    "use strict";
    var Fu_Common = require("Fu_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Fu_Common: Fu_Common,
        Fire_Bullet: cc.Prefab,
        Bomb_Particle: cc.Prefab
      },
      Fu_Effect: function Fu_Effect() {
        this.Fu_Common.Battle_Controller.Camera_Shake_Medium();
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.scaleX = .5;
        Bullet.scaleY = .5;
        var Bomb_Particle = cc.instantiate(this.Bomb_Particle);
        Bomb_Particle.parent = this.Fu_Common.Battle_Controller.Particle_Parent;
        Bomb_Particle.x = this.node.x;
        Bomb_Particle.y = this.node.y;
        Bomb_Particle.scaleX = 3;
        Bomb_Particle.scaleY = 3;
        this.Fu_Common.Battle_Controller.Normal_Attack_Addition_Add(20);
        this.Fu_Common.Battle_Controller.Hero_Script.Attack_Addition += 20;
        this.Fu_Common.Battle_Controller.Hero_Script.Ice_Probability += 20;
        this.Fu_Common.Battle_Controller.Hero_Script.Ice_Probability_Addition += 20;
        this.Fu_Common.Battle_Controller.Normal_Crit_Rate_Addition_Add(20);
        this.Fu_Common.Battle_Controller.Hero_Script.Normal_Crit_Rate_Addition += 20;
        if (this.Fu_Common.Battle_Controller.Hero_Script.Normal_Bullet_Scale_Addition <= 300) {
          this.Fu_Common.Battle_Controller.Normal_Bullet_Scale_Addition += 50;
          this.Fu_Common.Battle_Controller.Hero_Script.Normal_Bullet_Scale_Addition += 50;
        }
      }
    });
    cc._RF.pop();
  }, {
    Fu_Common: "Fu_Common"
  } ],
  Fu_Water: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "79966SgtqNL1I3Kb0wiBpH8", "Fu_Water");
    "use strict";
    var Fu_Common = require("Fu_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Fu_Common: Fu_Common,
        Fire_Bullet: cc.Prefab,
        Bomb_Particle: cc.Prefab
      },
      Fu_Effect: function Fu_Effect() {
        this.Fu_Common.Battle_Controller.Camera_Shake_Medium();
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.angle = -90;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.angle = 90;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Bullet = cc.instantiate(this.Fire_Bullet);
        Bullet.parent = this.Fu_Common.Battle_Controller.Hero_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        this.Fu_Common.Fu_Attack_Count();
        Bullet.scaleX = this.Fu_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Fu_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Fu_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Fu_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Fu_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Fu_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Fu_Common.Crit_Mult_Result;
        var Bomb_Particle = cc.instantiate(this.Bomb_Particle);
        Bomb_Particle.parent = this.Fu_Common.Battle_Controller.Particle_Parent;
        Bomb_Particle.x = this.node.x;
        Bomb_Particle.y = this.node.y;
        Bomb_Particle.scaleX = 3;
        Bomb_Particle.scaleY = 3;
      }
    });
    cc._RF.pop();
  }, {
    Fu_Common: "Fu_Common"
  } ],
  GBA_Absorb_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd744pnv7dNzbjrmA2PJROF", "GBA_Absorb_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Sprite: cc.Sprite,
        SpriteFrame: [ cc.SpriteFrame ],
        Target: cc.Node
      },
      Start_Set: function Start_Set() {
        this.node.scaleX = 10 * Math.random() + .2;
        this.node.scaleY = this.node.scaleX;
        this.node.angle = 360 * Math.random();
        this.Sprite.spriteFrame = this.SpriteFrame[Math.floor(Math.random() * this.SpriteFrame.length)];
        if (null != this.Target) {
          var Action = cc.sequence(cc.spawn(cc.moveTo(1, this.Target.x, this.Target.y), cc.scaleTo(1, 0, 0), cc.fadeTo(1, 255), cc.rotateBy(1, 255)), cc.callFunc(function() {
            this.node.destroy();
          }, this));
          this.node.runAction(Action);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  God_Information: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1581dP32lDuYd07bfW9Q/p", "God_Information");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Name: [ cc.String ],
        Dialogue: [ cc.String ],
        Select_1: [ cc.String ],
        Select_2: [ cc.String ],
        Picture: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        this.Name = [ "\u3010\u533b\u795e\u3011", "\u3010\u5e78\u8fd0\u5973\u795e\u3011" ];
        this.Dialogue = [ "\u201c\u5c0f\u4f19\u5b50\uff0c\u770b\u4f60\u8eab\u4f53\u597d\u50cf\u4e0d\u5927\u884c\u554a\u3002\u9009\u4e2a\u6311\u6218\u953b\u70bc\u4e00\u4e0b\u5427\u201d", "\u201c\u6765\u8bd5\u8bd5\u4f60\u7684\u8fd0\u6c14\u5427~\u201d" ];
        this.Select_1 = [ "\u6062\u590d20%\u751f\u547d\u503c\n\u4f46\u4e0b\u4e00\u91cd\u52ab\u654c\u4eba\u653b\u51fb\u529b\u83b7\u5f9710%\u52a0\u6210", "\u6295\u63b7\u4e00\u679a\u786c\u5e01\n\u7ed3\u679c\u662f\u6b63\u9762\u7684\u8bdd\u67d0\u4e2a\u5df2\u83b7\u5f97\u6108\u6218\u6108\u52c7\u80fd\u529b\u589e\u52a05\u7ea7\n\u7ed3\u679c\u662f\u53cd\u9762\u7684\u8bdd\u67d0\u4e2a\u4ee5\u83b7\u5f97\u6108\u6218\u6108\u52c7\u80fd\u529b\u964d\u4f4e1\u7ea7" ];
        this.Select_2 = [ "\u83b7\u5f972\u7ea7\u3010\u751f\u547d\u6c34\u6676\u3011\uff08\u6bcf\u901a\u8fc7\u4e00\u91cd\u52ab\u6062\u590d5%\u7684\u751f\u547d\u503c\uff09\n\u4f46\u4e0b\u4e00\u91cd\u52ab\u9700\u8981\u5728150\u79d2\u5185\u5b8c\u6210\u6218\u6597\uff0c\u5426\u5219\u4f60\u5c06\u53d7\u5230\u4f24\u5bb3\u4e3a\u751f\u547d\u503c\u4e0a\u965099%\u7684\u96f7\u51fb", "\u83b7\u5f972\u7ea7\u968f\u673a\u6108\u6218\u6108\u52c7\u80fd\u529b" ];
      }
    });
    cc._RF.pop();
  }, {} ],
  God_Menu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "58df8MoShRKh43pJrK+YgdV", "God_Menu");
    "use strict";
    var God_Information = require("God_Information");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        God_Information: God_Information,
        God_ID: 0,
        God_Picture: cc.Sprite,
        God_Menu_Animation: cc.Animation,
        Dialogue_Label: cc.Label,
        Select_1_Label: cc.Label,
        Select_2_Label: cc.Label,
        Select_1_Button: cc.Node,
        Select_2_Button: cc.Node,
        Select_3_Button: cc.Node,
        Can_Click: 1,
        Next_Xiaoguanqia_Animation: cc.Animation
      },
      Set: function Set() {
        this.God_ID = Math.floor(Math.random() * this.God_Information.Name.length);
        this.God_Picture.spriteFrame = this.God_Information.Picture[this.God_ID];
        this.Dialogue_Label.string = this.God_Information.Dialogue[this.God_ID];
        this.Select_1_Label.string = this.God_Information.Select_1[this.God_ID];
        this.Select_2_Label.string = this.God_Information.Select_2[this.God_ID];
        this.Select_1_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          1 == this.Can_Click && this.Select_1_Result();
        }, this);
        this.Select_2_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          1 == this.Can_Click && this.Select_2_Result();
        }, this);
        this.Select_3_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          1 == this.Can_Click && this.Select_3_Result();
        }, this);
      },
      Select_1_Result: function Select_1_Result() {
        switch (this.God_ID) {
         case 0:
         case 1:
          this.God_Menu_Animation.play("God_Menu_Out");
          this.Next_Xiaoguanqia_Animation.node.active = true;
          this.Next_Xiaoguanqia_Animation.play("Next_Xiaoguanqia_Menu_In");
          break;

         default:
          console.log("error");
        }
      },
      Select_2_Result: function Select_2_Result() {
        switch (this.God_ID) {
         case 0:
         case 1:
          this.God_Menu_Animation.play("God_Menu_Out");
          this.Next_Xiaoguanqia_Animation.node.active = true;
          this.Next_Xiaoguanqia_Animation.play("Next_Xiaoguanqia_Menu_In");
          break;

         default:
          console.log("error");
        }
      },
      Select_3_Result: function Select_3_Result() {
        switch (this.God_ID) {
         case 0:
         case 1:
          this.God_Menu_Animation.play("God_Menu_Out");
          this.Next_Xiaoguanqia_Animation.node.active = true;
          this.Next_Xiaoguanqia_Animation.play("Next_Xiaoguanqia_Menu_In");
          break;

         default:
          console.log("error");
        }
      },
      Out: function Out() {
        this.Can_Click = 1;
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    God_Information: "God_Information"
  } ],
  Green_Coin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bfdb5hiwmdD9q3c95k/DGNF", "Green_Coin");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().to(2 * Math.random() + 1, {
          position: cc.v2(-2074.344, this.node.y)
        }).call(function() {
          _this.node.scaleX = (Math.random() + 4) / 15;
          _this.node.scaleY = (Math.random() + 6) / 15;
          _this.node.opacity = 200 * Math.random() + 50;
          _this.node.x = 2040.6;
          var a = Math.round(Math.random());
          _this.node.y = 1 == a ? 750 * Math.random() : -750 * Math.random();
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Hero_Be_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0945fiip11DJIgk5sGPV/Uk", "Hero_Be_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Be_Hit_Extra_Check_Script: [ cc.Node ]
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Hero_Bullet_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6e2d3OlRjFJqYrqUHI16qqA", "Hero_Bullet_Common");
    "use strict";
    var Motion_Streak_Script = require("Motion_Streak_Script");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Jing_Jie: 0,
        Attack: 0,
        Crit_Rate: 0,
        Crit_Mult: 0,
        Power: 0,
        Is_Normal_Bullet: 1,
        Is_Have_Particle: 1,
        Many_Particle: [ cc.Node ],
        RigidBody: cc.RigidBody,
        Ini_Speed: 0,
        Ini_Speed_Y: 0,
        Bullet_Hp: 0,
        Motion_Streak_Script: Motion_Streak_Script,
        Can_Collider_Bound: 1
      },
      start: function start() {
        this.RigidBody = this.node.getComponent(cc.RigidBody);
        this.Bullet_Hp = this.Bullet_Hp + this.Battle_Controller.Bullet_Hp_Addition;
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        var _this = this;
        if ("Bullet_Bound" == otherCollider.node.group) {
          if (1 == this.Can_Collider_Bound) {
            if (1 == this.Is_Normal_Bullet) {
              if (null != this.Many_Particle) for (var i = 0; i < this.Many_Particle.length; i++) {
                var Particle = this.Many_Particle[i];
                if (null != Particle) {
                  Particle.parent = this.Battle_Controller.Particle_Parent;
                  var ParticleSystem = Particle.getComponent(cc.ParticleSystem);
                  null != ParticleSystem && (Particle.getComponent(cc.ParticleSystem).duration = .01);
                }
              }
              1 == this.Is_Have_Particle && this.node.getComponent(this.node.name).Destroy_Particle();
            }
            if (null != this.Motion_Streak_Script) {
              this.Motion_Streak_Script.node.parent = this.Battle_Controller.Particle_Parent;
              this.Motion_Streak_Script.node.setPosition(this.node.x, this.node.y);
              this.Motion_Streak_Script.Wait_Destroy();
            }
            this.node.destroy();
          }
        } else if ("Enemy" == otherCollider.node.group) if (1 == this.Is_Normal_Bullet) {
          var Particle = cc.instantiate(this.Battle_Controller.Gold_Shoot_Fire);
          Particle.parent = this.Battle_Controller.Particle_Parent;
          Particle.x = this.node.x;
          Particle.y = this.node.y;
          Particle.scaleX = .5;
          Particle.scaleY = .5;
          var Particle = cc.instantiate(this.Battle_Controller.Enemy_Bullet_Destroy_Particle);
          Particle.parent = this.Battle_Controller.Particle_Parent;
          Particle.x = this.node.x;
          Particle.y = this.node.y;
          this.Enemy_Injured(otherCollider);
          if (this.Bullet_Hp <= 0) {
            if (null != this.Many_Particle) for (var i = 0; i < this.Many_Particle.length; i++) {
              var Particle = this.Many_Particle[i];
              if (null != Particle) {
                Particle.parent = this.Battle_Controller.Particle_Parent;
                var ParticleSystem = Particle.getComponent(cc.ParticleSystem);
                null != ParticleSystem && (Particle.getComponent(cc.ParticleSystem).duration = .01);
              }
            }
            1 == this.Is_Have_Particle && this.node.getComponent(this.node.name).Destroy_Particle();
            if (null != this.Motion_Streak_Script) {
              this.Motion_Streak_Script.node.parent = this.Battle_Controller.Particle_Parent;
              this.Motion_Streak_Script.node.setPosition(this.node.x, this.node.y);
              this.Motion_Streak_Script.Wait_Destroy();
            }
            this.node.destroy();
          } else {
            this.Bullet_Hp--;
            this.Battle_Controller.Camera_Shake_Small();
            if (null != this.RigidBody) {
              this.RigidBody.linearVelocity = cc.v2(0, 0);
              cc.tween(this.node).delay(.1).call(function() {
                _this.Set_Speed();
              }).start();
            }
          }
        } else this.node.getComponent(this.node.name).Special_Bullet_Hit(contact, selfCollider, otherCollider);
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Bullet_Bound" == other.node.group) {
          if (1 == this.Can_Collider_Bound) {
            if (1 == this.Is_Normal_Bullet) {
              if (null != this.Many_Particle) for (var i = 0; i < this.Many_Particle.length; i++) {
                var Particle = this.Many_Particle[i];
                if (null != Particle) {
                  Particle.parent = this.Battle_Controller.Particle_Parent;
                  var ParticleSystem = Particle.getComponent(cc.ParticleSystem);
                  null != ParticleSystem && (Particle.getComponent(cc.ParticleSystem).duration = .01);
                }
              }
              1 == this.Is_Have_Particle && this.node.getComponent(this.node.name).Destroy_Particle();
            }
            if (null != this.Motion_Streak_Script) {
              this.Motion_Streak_Script.node.parent = this.Battle_Controller.Particle_Parent;
              this.Motion_Streak_Script.node.setPosition(this.node.x, this.node.y);
              this.Motion_Streak_Script.Wait_Destroy();
            }
            this.node.destroy();
          }
        } else if ("Enemy" == other.node.group) if (1 == this.Is_Normal_Bullet) {
          this.Enemy_Injured(other);
          if (this.Bullet_Hp <= 0) {
            if (null != this.Many_Particle) for (var i = 0; i < this.Many_Particle.length; i++) {
              var Particle = this.Many_Particle[i];
              if (null != Particle) {
                Particle.parent = this.Battle_Controller.Particle_Parent;
                var ParticleSystem = Particle.getComponent(cc.ParticleSystem);
                null != ParticleSystem && (Particle.getComponent(cc.ParticleSystem).duration = .01);
              }
            }
            1 == this.Is_Have_Particle && this.node.getComponent(this.node.name).Destroy_Particle();
            if (null != this.Motion_Streak_Script) {
              this.Motion_Streak_Script.node.parent = this.Battle_Controller.Particle_Parent;
              this.Motion_Streak_Script.node.setPosition(this.node.x, this.node.y);
              this.Motion_Streak_Script.Wait_Destroy();
            }
            this.node.destroy();
          } else this.Bullet_Hp--;
        } else this.node.getComponent(this.node.name).Special_Bullet_Hit(0, self, other);
      },
      Enemy_Injured: function Enemy_Injured(otherCollider) {
        otherCollider.node.getComponent("Enemy_Common").Injured(this.Jing_Jie, this.Attack, this.Crit_Rate, this.Crit_Mult, this.Power);
      },
      Be_Destroy: function Be_Destroy() {
        var Particle = cc.instantiate(this.Battle_Controller.Enemy_Bullet_Destroy_Particle);
        Particle.parent = this.Battle_Controller.Particle_Parent;
        Particle.setPosition(this.node.x, this.node.y);
        this.node.destroy();
      },
      Set_Speed: function Set_Speed() {
        null != this.RigidBody && (this.RigidBody.linearVelocity = cc.v2(this.Ini_Speed, this.Ini_Speed_Y));
      }
    });
    cc._RF.pop();
  }, {
    Motion_Streak_Script: "Motion_Streak_Script"
  } ],
  Hero_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9c8c2lo8MRLcapkXlBY9j7c", "Hero_Button");
    "use strict";
    var Select_Hero_Controller = require("Select_Hero_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Select_Hero_Controller: Select_Hero_Controller,
        Hero_Number: 0,
        Select_Bar: cc.Node,
        No_Have_Tips_Animation: cc.Animation
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (0 == this.Select_Hero_Controller.Stage) if (0 == this.Select_Hero_Controller.Hero_Star[this.Hero_Number]) this.No_Have_Tips_Animation.play(); else {
            cc.sys.localStorage.setItem("Selected_Hero", this.Hero_Number);
            cc.tween(this.Select_Bar).to(.2, {
              position: cc.v2(this.node.x, this.node.y - 40)
            }).start();
            this.Show_Hero_Information();
          }
        }, this);
      },
      Show_Hero_Information: function Show_Hero_Information() {
        for (var i = 0; i < 6; i++) this.Select_Hero_Controller.Hero_Information_Node[i].active = false;
        this.Select_Hero_Controller.Hero_Information_Node[this.Hero_Number].active = true;
        this.Select_Hero_Controller.Set_Hero_Information_Label(this.Hero_Number);
      }
    });
    cc._RF.pop();
  }, {
    Select_Hero_Controller: "Select_Hero_Controller"
  } ],
  Hero_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "945e4mSQ6dIAqff3ZhMIK4+", "Hero_Common");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Attack_Result: 0,
        Count_Is_Skill: 0,
        Crit_Rate_Result: 0,
        Crit_Mult_Result: 0,
        Jing_Jie_Result: 0,
        Bullet_Scale_Result: 0,
        Buff_Icon_Parent: cc.Node,
        Is_Sprint: 0,
        Hit_Number_Prefab: cc.Prefab,
        Hp_Line: cc.Node,
        Buff_Particle: cc.Node,
        Is_Xuliing: 0,
        Xuli_Progress: 0,
        Xuli_Tiao_Parent: cc.Node,
        Xuli_Tiao_Blue: cc.Node,
        Xuli_Schedule: cc.Schedule,
        Xuli_Bullet_Parent: cc.Node,
        PhysicsBoxCollider: cc.PhysicsBoxCollider,
        Aplly_Collider_Schdule: cc.Schedule,
        Aplly_Collider_Schdule_Open: 0,
        Is_Posion: 0,
        Posion_Schdule: cc.Schdule,
        Posion_Attack: 0,
        Posion_Jing_Jie: 0,
        Surround_Parent: cc.Node,
        Jiejie_Parent: cc.Node,
        Skill_Picture_Prefab: cc.Prefab,
        Shoot_Stage: 0,
        Is_Dead: 0,
        Image_Offset_X: 0,
        Image_Offset_Y: 0
      },
      start: function start() {
        this.Battle_Controller = cc.find("Canvas").getComponent("Battle_Controller");
        this.Aplly_Collider_Schdule = function() {
          this.PhysicsBoxCollider.apply();
        };
        this.Posion_Schdule = function() {
          1 == this.Battle_Controller.Hero_Script.Can_Injured && this.Normal_Injured(this.Posion_Attack, this.Posion_Jing_Jie);
        };
      },
      Aplly_Collider: function Aplly_Collider() {
        this.Aplly_Collider_Schdule_Open = 0;
        this.unschedule(this.Aplly_Collider_Schdule);
        this.PhysicsBoxCollider.apply();
      },
      Aplly_Collider_Loop: function Aplly_Collider_Loop() {
        if (0 == this.Aplly_Collider_Schdule_Open) {
          this.PhysicsBoxCollider.apply();
          this.Aplly_Collider_Schdule_Open = 1;
          this.schedule(this.Aplly_Collider_Schdule, .03);
        }
      },
      Attack_Count: function Attack_Count() {
        if (0 == this.Count_Is_Skill) {
          this.Attack_Result = Math.ceil(this.Battle_Controller.Attack * (100 + this.Battle_Controller.Normal_Attack_Addition + this.Battle_Controller.Common_Attack_Addition) / 100);
          this.Crit_Rate_Result = this.Battle_Controller.Crit_Rate + this.Battle_Controller.Normal_Crit_Rate_Addition + this.Battle_Controller.Common_Crit_Rate_Addition;
          this.Crit_Mult_Result = Math.ceil(this.Battle_Controller.Crit_Mult * (100 + this.Battle_Controller.Normal_Crit_Mult_Addition + this.Battle_Controller.Common_Crit_Mult_Addition) / 100);
        } else if (1 == this.Count_Is_Skill) {
          this.Attack_Result = Math.ceil(this.Battle_Controller.Attack * (100 + this.Battle_Controller.Skill_Attack_Addition + this.Battle_Controller.Common_Attack_Addition) / 100);
          this.Crit_Rate_Result = this.Battle_Controller.Crit_Rate + this.Battle_Controller.Skill_Crit_Rate_Addition + this.Battle_Controller.Common_Crit_Rate_Addition;
          this.Crit_Mult_Result = Math.ceil(this.Battle_Controller.Crit_Mult * (100 + this.Battle_Controller.Skill_Crit_Mult_Addition + this.Battle_Controller.Common_Crit_Mult_Addition) / 100);
        } else if (2 == this.Count_Is_Skill) {
          this.Attack_Result = Math.ceil(this.Battle_Controller.Attack * (100 + this.Battle_Controller.Fu_Attack_Addition + this.Battle_Controller.Common_Attack_Addition) / 100);
          this.Crit_Rate_Result = this.Battle_Controller.Crit_Rate + this.Battle_Controller.Common_Crit_Rate_Addition;
          this.Crit_Mult_Result = Math.ceil(this.Battle_Controller.Crit_Mult * (100 + this.Battle_Controller.Common_Crit_Mult_Addition) / 100);
        } else if (3 == this.Count_Is_Skill) {
          this.Attack_Result = Math.ceil(this.Battle_Controller.Attack * (100 + this.Battle_Controller.Pet_Attack_Addition + this.Battle_Controller.Common_Attack_Addition) / 100);
          this.Crit_Rate_Result = this.Battle_Controller.Crit_Rate + this.Battle_Controller.Common_Crit_Rate_Addition;
          this.Crit_Mult_Result = Math.ceil(this.Battle_Controller.Crit_Mult * (100 + this.Battle_Controller.Common_Crit_Mult_Addition) / 100);
        } else if (4 == this.Count_Is_Skill) {
          this.Attack_Result = Math.ceil(this.Battle_Controller.Attack * (100 + this.Battle_Controller.Surround_Attack_Addition + this.Battle_Controller.Common_Attack_Addition) / 100);
          this.Crit_Rate_Result = this.Battle_Controller.Crit_Rate + this.Battle_Controller.Common_Crit_Rate_Addition;
          this.Crit_Mult_Result = Math.ceil(this.Battle_Controller.Crit_Mult * (100 + this.Battle_Controller.Common_Crit_Mult_Addition) / 100);
        } else if (-1 == this.Count_Is_Skill) {
          this.Attack_Result = Math.ceil(this.Battle_Controller.Attack * (100 + this.Battle_Controller.Common_Attack_Addition) / 100);
          this.Crit_Rate_Result = this.Battle_Controller.Crit_Rate + this.Battle_Controller.Common_Crit_Rate_Addition;
          this.Crit_Mult_Result = Math.ceil(this.Battle_Controller.Crit_Mult * (100 + this.Battle_Controller.Common_Crit_Mult_Addition) / 100);
        }
        1 == this.Battle_Controller.Is_Surround_Common_Attack_Addition && (this.Attack_Result = this.Attack_Result + this.Surround_Parent.children.length * this.Battle_Controller.Rogue_Script.Haved_Rogue_Level[8] * 10);
        this.Jing_Jie_Result = this.Battle_Controller.Jing_Jie;
      },
      Bullet_Scale_Count: function Bullet_Scale_Count() {
        0 == this.Count_Is_Skill ? this.Bullet_Scale_Result = this.Battle_Controller.Bullet_Scale_Common_Ratio * (100 + this.Battle_Controller.Normal_Bullet_Scale_Addition + this.Battle_Controller.Common_Bullet_Scale_Addition) / 100 : 1 == this.Count_Is_Skill ? this.Bullet_Scale_Result = this.Battle_Controller.Bullet_Scale_Common_Ratio * (100 + this.Battle_Controller.Skill_Bullet_Scale_Addition + this.Battle_Controller.Common_Bullet_Scale_Addition) / 100 : this.Bullet_Scale_Result = this.Battle_Controller.Bullet_Scale_Common_Ratio * (100 + this.Battle_Controller.Common_Bullet_Scale_Addition) / 100;
      },
      Shoot: function Shoot() {
        for (var i = 0; i < this.Battle_Controller.Normal_Attack_Extra_Check.Normal_Attack_Extra_Check_Script.length; i++) this.Battle_Controller.Normal_Attack_Extra_Check.Normal_Attack_Extra_Check_Script[i].Check();
        this.Battle_Controller.Hero_Script.Hero_Shoot();
        for (var i = 0; i < this.Battle_Controller.Normal_Attack_After_Extra_Check.Normal_Attack_After_Extra_Check_Script.length; i++) this.Battle_Controller.Normal_Attack_After_Extra_Check.Normal_Attack_After_Extra_Check_Script[i].Check();
      },
      Set_Shoot_Stage: function Set_Shoot_Stage(Number) {
        this.Shoot_Stage = Number;
      },
      Normal_Injured: function Normal_Injured(Enemy_Bullet_Attack, Enemy_Jing_Jie) {
        if (1 == this.Battle_Controller.Hero_Script.Can_Injured) {
          var Last_Attack = Math.ceil((Enemy_Bullet_Attack - this.Battle_Controller.Normal_Initial_Data.Team_Level_Up_Hp_Up * (Enemy_Jing_Jie - this.Battle_Controller.Defend)) * Math.pow(this.Battle_Controller.Normal_Initial_Data.Same_Level_Kill_Hero / this.Battle_Controller.Normal_Initial_Data.Tall_One_Level_Kill_Hero, Enemy_Jing_Jie - this.Battle_Controller.Defend));
          this.Battle_Controller.Hp -= Last_Attack;
          var Hit_Number = cc.instantiate(this.Hit_Number_Prefab);
          Hit_Number.parent = this.Battle_Controller.Particle_Parent;
          Hit_Number.x = this.node.x;
          Hit_Number.y = this.node.y;
          Hit_Number.getComponent(cc.Label).string = Last_Attack;
          Hit_Number.color = cc.color(252, 86, 86);
          this.Battle_Controller.Hero_Injured_White.play();
          if (this.Battle_Controller.Hp <= 0) this.Dead(); else {
            this.Hp_Line.scaleX = this.Battle_Controller.Hp / this.Battle_Controller.Full_Hp;
            this.Battle_Controller.Hero_Script.Can_Injured--;
            this.scheduleOnce(function() {
              this.Battle_Controller.Hero_Script.Can_Injured++;
            }, .1);
          }
          if (this.Battle_Controller.Hero_Be_Hit_Extra_Check.Hero_Be_Hit_Extra_Check_Script.length > 0) for (var i = 0; i < this.Battle_Controller.Hero_Be_Hit_Extra_Check.Hero_Be_Hit_Extra_Check_Script.length; i++) this.Battle_Controller.Hero_Be_Hit_Extra_Check.Hero_Be_Hit_Extra_Check_Script[i].Check();
        }
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if (0 == this.Is_Sprint) if ("Enemy" == other.node.group) {
          if (1 == this.Battle_Controller.Hero_Script.Can_Injured && null != other.node.getComponent("Enemy_Common")) {
            var Enemy_Script = other.node.getComponent("Enemy_Common");
            Enemy_Script.Bullet_Attack_Count();
            this.Normal_Injured(Enemy_Script.Bullet_Attack, Enemy_Script.Enemy_Jing_Jie);
            cc.tween(this.node).by(.1, {
              position: cc.v2(-250, 0)
            }).start();
          }
        } else if ("Enemy_Posion" == other.node.group) {
          if (null != other.node.getComponent("Enemy_Bullet_Posion")) {
            var Enemy_Script = other.node.getComponent("Enemy_Bullet_Posion");
            this.Is_Posion++;
            if (this.Is_Posion <= 1) {
              this.Posion_Attack = Enemy_Script.Attack;
              this.Posion_Jing_Jie = Enemy_Script.Jing_Jie;
              this.schedule(this.Posion_Schdule, .5);
            }
          }
        } else if ("Enemy_Bullet" == other.node.group && 1 == this.Battle_Controller.Hero_Script.Can_Injured && null != other.node.getComponent("Enemy_Bullet_Common")) {
          var Enemy_Script = other.node.getComponent("Enemy_Bullet_Common");
          this.Normal_Injured(Enemy_Script.Attack, Enemy_Script.Jing_Jie);
          cc.tween(this.node).by(.1, {
            position: cc.v2(-250, 0)
          }).start();
        }
      },
      onCollisionExit: function onCollisionExit(other, self) {
        if ("Enemy_Posion" == other.node.group) {
          this.Is_Posion--;
          this.Is_Posion <= 0 && this.unschedule(this.Posion_Schdule);
        }
      },
      Recovery: function Recovery(Recovery_Percentage) {
        var Recovery_Hp = Math.ceil(this.Battle_Controller.Full_Hp * (Recovery_Percentage + this.Battle_Controller.Recovery_Extra_Percentage) / 100);
        var Particle = cc.instantiate(this.Battle_Controller.Recovery_Particle_Prefab);
        Particle.parent = this.Buff_Particle;
        Particle.setPosition(0, 0);
        var Number = cc.instantiate(this.Battle_Controller.Recovery_Number_Label);
        Number.getComponent(cc.Label).string = Recovery_Hp;
        Number.parent = this.Battle_Controller.Particle_Parent;
        Number.setPosition(this.node.x, this.node.y);
        this.Battle_Controller.Hp + Recovery_Hp < this.Battle_Controller.Full_Hp ? this.Battle_Controller.Hp = this.Battle_Controller.Hp + Recovery_Hp : this.Battle_Controller.Hp = this.Battle_Controller.Full_Hp;
        this.Hp_Line.scaleX = this.Battle_Controller.Hp / this.Battle_Controller.Full_Hp;
        for (var i = 0; i < this.Battle_Controller.Recovery_Extra_Check.Recovery_Extra_Check_Script.length; i++) this.Battle_Controller.Recovery_Extra_Check.Recovery_Extra_Check_Script[i].Check();
      },
      Dead: function Dead() {
        this.Battle_Controller.JoyStick.Joytick_Back();
        this.Battle_Controller.Hero_Script.Back_To_Stay();
        this.Battle_Controller.Hero_Script.Can_Injured--;
        this.Battle_Controller.Hero_Script.Can_Move--;
        this.Battle_Controller.Hero_Script.Can_Attack--;
        this.Battle_Controller.Hero_Script.Can_Skill--;
        this.Is_Dead = 1;
        this.Hp_Line.scaleX = 0;
        this.Battle_Controller.Hero_Script.Animation.play(this.node.name + "_Dead");
        this.Battle_Controller.Hero_Dead_Ghost_Parent.x = this.node.x;
        this.Battle_Controller.Hero_Dead_Ghost_Parent.y = this.node.y;
        this.Battle_Controller.Hero_Dead_Ghost_Animation.play();
      },
      Start_Xuli: function Start_Xuli(Xuli_Speed, Xuli_Script) {
        this.Xuli_Progress = 10;
        if (0 == this.Is_Xuliing) {
          this.Is_Xuliing = 1;
          this.Xuli_Tiao_Parent.active = true;
          this.Xuli_Schedule = function() {
            this.Xuli_Progress = this.Xuli_Progress + Xuli_Speed * (100 + this.Battle_Controller.Xuli_Speed_Addition) / 100;
            this.Xuli_Progress >= 100 && (this.Xuli_Progress = 100);
            Xuli_Script.Xuli_Effect(this.Xuli_Progress);
          };
          this.schedule(this.Xuli_Schedule, .05);
        }
      },
      End_Xuli: function End_Xuli() {
        this.Is_Xuliing = 0;
        this.unschedule(this.Xuli_Schedule);
        this.Xuli_Progress = 0;
        this.Xuli_Tiao_Blue.scaleX = 0;
        this.Xuli_Tiao_Parent.active = false;
      },
      Skill_Picture: function Skill_Picture() {
        this.Battle_Controller.Battle_Audio_Controller.Other(2, 1);
        this.Battle_Controller.Hero_Script.Can_Injured--;
        var Skill_Picture = cc.instantiate(this.Skill_Picture_Prefab);
        Skill_Picture.parent = this.Battle_Controller.Hero_Skill_Picture_Parent;
        Skill_Picture.setPosition(0, 0);
        Skill_Picture.getComponent("Hero_Skill_Picture_Common").Hero_Script = this;
      },
      Skill_Picture_End: function Skill_Picture_End() {
        this.Battle_Controller.Hero_Script.Can_Injured++;
        this.Battle_Controller.Hero_Script.Skill_Shoot();
      }
    });
    cc._RF.pop();
  }, {} ],
  Hero_Initial_Data: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cfb1dB6Wf9HpZ8K9biDB+e0", "Hero_Initial_Data");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        HP: [ cc.Float ],
        Attack: [ cc.Float ],
        Crit_Rate: [ cc.Float ],
        Crit_Mult: [ cc.Float ],
        Talent_Describe: [ cc.String ],
        Characteristi_Describe: [ cc.String ],
        Skill_Cold_Time: [ cc.Float ]
      },
      onLoad: function onLoad() {
        this.HP = [ 500, 5e4, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500 ];
        this.Attack = [ 150, 10, 100, 100, 150, 120, 100, 100, 100, 100, 200, 100, 100, 100, 100 ];
        this.Crit_Rate = [ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ];
        this.Crit_Mult = [ 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5 ];
        this.Talent_Describe = [ "\u6bcf\u6b21\u653b\u51fb\u670910%\u7684\u51e0\u7387\u53d1\u5c04\u4e00\u9897\u653b\u51fb\u529b\u4e3a\u3010\u89d2\u8272\u653b\u51fb\u529b x 100%\u3011\u7684\u5bfc\u5f39\uff0c\u5bfc\u5f39\u4f1a\u7784\u51c6\u968f\u673a\u654c\u4eba\uff0c\u51fb\u4e2d\u654c\u4eba\u540e\u7206\u70b8\u9020\u6210\u7fa4\u4f53\u4f24\u5bb3", "\u62e5\u6709\u4e00\u4e2a\u989d\u5916\u6280\u80fd\uff0c\u53ef\u91ca\u653e\u3010\u5b66\u9738\u9886\u57df\u3011\uff0c5\u79d2\u5185\u654c\u4eba\u5b50\u5f39\u901f\u5ea6\u51cf\u6162\uff0c\u6bcf\u6b21\u51fb\u4e2d\u654c\u4eba\u53ef\u6062\u590d5%\u751f\u547d\u503c", "\u6bcf\u6b21\u51fb\u4e2d\u654c\u4eba\uff0c\u670910%\u7684\u7684\u51e0\u7387\u4f7f\u654c\u4eba\u9677\u5165\u4e00\u6bb5\u65f6\u95f4\u3010\u865a\u5f31\u3011\u72b6\u6001\n\u3010\u865a\u5f31\u3011\u4e2d\u654c\u4eba\u53d7\u5230\u7684\u4f24\u5bb3\u4f1a\u63d0\u534750%", "\u98ce\u96e8\u968f\u7f18\u8d70\uff0c\u5c71\u6c34\u4efb\u900d\u9065\u3002  \u95ea\u907f\u65f6\u4f1a\u751f\u6210\u4e00\u628a\u98de\u5251\uff0c\u6700\u591a\u4e94\u628a\uff1b\u653b\u51fb\u65f6\u4f1a\u8ddf\u8e2a\u968f\u673a\u4e00\u540d\u654c\u4eba\uff0c\u6bcf\u628a\u98de\u5251\u7684\u653b\u51fb\u529b\u4e3a\u3010\u89d2\u8272\u653b\u51fb\u529b x 100%\u3011", "\u573a\u4e0a\u6bcf\u6709\u4e00\u4e2a\u5206\u8eab\u3001\u5c0f\u5ba0\u7269\u7b49\u53ec\u5524\u7269\uff0c\u81ea\u5df1\u7684\u653b\u51fb\u529b\u63d0\u53475%", "\u5f53\u524d\u751f\u547d\u503c\u6bcf\u6bd4\u751f\u547d\u503c\u4e0a\u9650\u5c111%\uff0c\u653b\u51fb\u529b\u63d0\u53471%", "\u9646\u96ea\u5929\u8d4b", "\u6556\u96e8\u9ed8\u5929\u8d4b", "\u674e\u82b7\u6674\u5929\u8d4b", "\u6d1b\u592b\u83b1\u65af\u5929\u8d4b", "\u7a46\u6842\u82f1\u5929\u8d4b", "\u666e\u91cc\u65af\u5929\u8d4b", "\u5c0f\u7ea2\u5e3d", "\u9b54\u7956", "\u9f50\u5929" ];
        this.Characteristi_Describe = [ "\u653b\u51fb\u901f\u5ea6\u5feb", "\u53ef\u91ca\u653e\u9886\u57df\u6062\u590d\u751f\u547d\u503c", "\u53ef\u901a\u8fc7\u84c4\u529b\u548c\u4f7f\u654c\u4eba\u9677\u5165\u865a\u5f31\u9020\u6210\u5927\u91cf\u4f24\u5bb3", "\u901a\u8fc7\u95ea\u907f\u53ef\u63d0\u5347\u6218\u6597\u529b", "\u653b\u51fb\u8303\u56f4\u8f83\u5927\uff0c\u901a\u8fc7\u589e\u52a0\u573a\u4e0a\u5206\u8eab\u6216\u5c0f\u4f19\u4f34\u7684\u6570\u91cf\u53ef\u63d0\u5347\u6218\u6597\u529b", "\u8840\u91cf\u8d8a\u4f4e\uff0c\u653b\u51fb\u529b\u8d8a\u9ad8", "\u9646\u96ea\u4ecb\u7ecd", "\u6556\u96e8\u9ed8\u9646\u96ea\u4ecb\u7ecd", "\u674e\u82b7\u6674\u4ecb\u7ecd", "\u6d1b\u592b\u83b1\u65af\u4ecb\u7ecd", "\u7a46\u6842\u82f1", "\u666e\u91cc\u65af", "\u5c0f\u7ea2\u5e3d", "\u9b54\u7956", "\u9f50\u5929" ];
        this.Skill_Cold_Time = [ 5, 3, 10, 10, 1, 1, 1, 10, 100, 1, 1, 1, 1, 1, 1 ];
      }
    });
    cc._RF.pop();
  }, {} ],
  Hero_Introduce: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "71c2bsxoANPPJvGTMDuEeBp", "Hero_Introduce");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Sprite: cc.Sprite,
        Animation: cc.Animation
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Hero_Select_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d4c55Nd/rtGgLKahRZLdjvR", "Hero_Select_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Head_Index: 0,
        Hero_Select_Box_Animation: cc.Animation,
        Image: cc.Node,
        Level_Select_Controller: cc.Node
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Level_Select_Controller.Hero_Select_Button[this.Level_Select_Controller.Select_Hero_Head_Index].Hero_Select_Box_Animation.play("Head_Select_Box_Out");
          this.Level_Select_Controller.Select_Hero_Head_Index = this.Head_Index;
          this.Hero_Select_Box_Animation.play("Head_Select_Box_In");
          cc.Tween.stopAllByTarget(this.Image);
          cc.tween(this.Image).to(.1, {
            scale: .8
          }).to(.1, {
            scale: 1.1
          }).to(.1, {
            scale: .95
          }).to(.1, {
            scale: 1.05
          }).to(.1, {
            scale: 1
          }).start();
          this.Level_Select_Controller.Now_Hero_Introduce.Animation.play("Hero_Introduce_Leave");
          this.Level_Select_Controller.Select_Hero = this.Head_Index;
          this.Level_Select_Controller.Create_Hero_Introduce();
        }, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  Hero_Select_Head: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fe8efwGZGdEJZvCPtR9Fxq8", "Hero_Select_Head");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Head_Index: 0,
        Hero_Select_Box_Animation: cc.Animation,
        Image: cc.Node,
        Ready_Controller: cc.Node
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Ready_Controller.Hero_Select_Head[this.Ready_Controller.Select_Hero_Head_Index].Hero_Select_Box_Animation.play("Head_Select_Box_Out");
          this.Ready_Controller.Select_Hero_Head_Index = this.Head_Index;
          this.Hero_Select_Box_Animation.play("Head_Select_Box_In");
          cc.Tween.stopAllByTarget(this.Image);
          cc.tween(this.Image).to(.1, {
            scale: .8
          }).to(.1, {
            scale: 1.1
          }).to(.1, {
            scale: .95
          }).to(.1, {
            scale: 1.05
          }).to(.1, {
            scale: 1
          }).start();
        }, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  Hero_Skill_Picture_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "25f00LFB6RMRZ3ZuV5Q9hq/", "Hero_Skill_Picture_Common");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Script: cc.Node
      },
      End: function End() {
        null != this.Hero_Script && this.Hero_Script.Skill_Picture_End();
      },
      Sound: function Sound() {
        this.Hero_Script.Battle_Controller.Battle_Audio_Controller.Other(4, 1);
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Hidden_Code_Rain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "33422+yGwhF8oD0ghHja/ut", "Hidden_Code_Rain");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Number: 0,
        New_Rain: cc.Prefab,
        Sprite: cc.Sprite,
        SpriteFrame: [ cc.SpriteFrame ]
      },
      start: function start() {
        this.Sprite.spriteFrame = this.SpriteFrame[Math.floor(Math.random() * this.SpriteFrame.length)];
      },
      Create_New: function Create_New() {
        if (this.Number <= 4) {
          var node = cc.instantiate(this.New_Rain);
          node.parent = this.node.parent;
          node.setPosition(this.node.x, this.node.y + 30);
          node.getComponent("Hidden_Code_Rain").Number = this.Number + 1;
        }
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  History_Card_Detail_Menu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7a44dOpG1tMoIGzS5WLufOf", "History_Card_Detail_Menu");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Rogue_Script: cc.Node
      },
      Out: function Out() {
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  History_Card_Menu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01b43vONixK05bCPeNa42NA", "History_Card_Menu");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        History_Layout: cc.Node
      },
      Out: function Out() {
        this.node.active = false;
        if (null != this.History_Layout.children) for (var i = 0; i < this.History_Layout.children.length; i++) this.History_Layout.children[i].destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  History_Card: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a0a8aNJxhNM7pfAIRazxDe7", "History_Card");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Card_ID: 0,
        Rogue_Script: cc.Node,
        Level_Label: cc.Label,
        Level: 0
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Rogue_Script.History_Card_Can_Click) {
            this.Rogue_Script.History_Card_Detail_Menu.active = true;
            this.Rogue_Script.History_Card_Detail_Animation.play("History_Card_Detail_Menu_In");
            this.Rogue_Script.History_Card_Detail_Card_Sprite.spriteFrame = this.Rogue_Script.Rogue_Information.Picture[this.Card_ID];
            this.Rogue_Script.Rogue_Information.Show_Card_Information(this.Level);
            this.Rogue_Script.History_Card_Detail_Label.string = this.Rogue_Script.Rogue_Information.Information[this.Card_ID];
            this.Rogue_Script.History_Card_Detail_Level_Label.string = "\u7b49\u7ea7" + this.Level;
            this.Rogue_Script.History_Card_Can_Click = 0;
            this.Rogue_Script.History_Card_Detail_Can_Click = 1;
            this.Rogue_Script.History_Card_Detail_Menu_Black.on(cc.Node.EventType.TOUCH_START, function(event) {
              if (1 == this.Rogue_Script.History_Card_Detail_Can_Click) {
                this.Rogue_Script.History_Card_Detail_Animation.play("History_Card_Detail_Menu_Out");
                this.Rogue_Script.History_Card_Detail_Can_Click = 0;
                this.Rogue_Script.History_Card_Can_Click = 1;
              }
            }, this);
          }
        }, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  Hit_Effect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3460R2Bt1IcYdq5ToBz8xs", "Hit_Effect");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        this.node.scaleX = Math.ceil(1 * Math.random()) + 1;
        this.node.scaleY = Math.ceil(1 * Math.random()) + 1;
        this.node.angle = Math.ceil(360 * Math.random());
        this.schedule(function() {
          this.node.destroy();
        }, .02);
      }
    });
    cc._RF.pop();
  }, {} ],
  Hit_Number_Label: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "669528YjE9A5L+2GmL/GjCR", "Hit_Number_Label");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        fly_Height: 150
      },
      start: function start() {
        this.fly_Height = 300 * Math.random() + 150;
        this.node.runAction(cc.spawn(cc.moveBy(1, 30, this.fly_Height).easing(cc.easeOut(3)), cc.sequence(cc.fadeTo(1, 1), cc.callFunc(function() {
          this.node.destroy();
        }, this))));
      }
    });
    cc._RF.pop();
  }, {} ],
  Hp_Change_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0f658F5dWNGg5InLyxJ5Po1", "Hp_Change_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hp_Change_Extra_Check_Prefab: [ cc.Prefab ],
        Hp_Change_Extra_Check_Script: [ cc.Node ]
      }
    });
    cc._RF.pop();
  }, {} ],
  HtmlParser: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02dfeRXpgdHcJRaYhbNPx6G", "HtmlParser");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.HtmlTextParser = void 0;
    var eventRegx = /^(click)(\s)*=|(param)(\s)*=/;
    var imageAttrReg = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*align(\s)*=|(\s)*offset(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
    var HtmlTextParser = function() {
      function HtmlTextParser() {
        this._specialSymbolArray = [];
        this._stack = [];
        this._resultObjectArray = [];
        this._specialSymbolArray.push([ /&lt;/g, "<" ]);
        this._specialSymbolArray.push([ /&gt;/g, ">" ]);
        this._specialSymbolArray.push([ /&amp;/g, "&" ]);
        this._specialSymbolArray.push([ /&quot;/g, '"' ]);
        this._specialSymbolArray.push([ /&apos;/g, "'" ]);
        this._specialSymbolArray.push([ /&nbsp;/g, " " ]);
      }
      HtmlTextParser.prototype.parse = function(htmlString) {
        this._resultObjectArray.length = 0;
        this._stack.length = 0;
        var startIndex = 0;
        var length = htmlString.length;
        while (startIndex < length) {
          var tagEndIndex = htmlString.indexOf(">", startIndex);
          var tagBeginIndex = -1;
          if (tagEndIndex >= 0) {
            tagBeginIndex = htmlString.lastIndexOf("<", tagEndIndex);
            var noTagBegin = tagBeginIndex < startIndex - 1;
            if (noTagBegin) {
              tagBeginIndex = htmlString.indexOf("<", tagEndIndex + 1);
              tagEndIndex = htmlString.indexOf(">", tagBeginIndex + 1);
            }
          }
          if (tagBeginIndex < 0) {
            this._stack.pop();
            this._processResult(htmlString.substring(startIndex));
            startIndex = length;
          } else {
            var newStr = htmlString.substring(startIndex, tagBeginIndex);
            var tagStr = htmlString.substring(tagBeginIndex + 1, tagEndIndex);
            "" === tagStr && (newStr = htmlString.substring(startIndex, tagEndIndex + 1));
            this._processResult(newStr);
            -1 === tagEndIndex ? tagEndIndex = tagBeginIndex : "/" === htmlString.charAt(tagBeginIndex + 1) ? this._stack.pop() : this._addToStack(tagStr);
            startIndex = tagEndIndex + 1;
          }
        }
        return this._resultObjectArray;
      };
      HtmlTextParser.prototype._attributeToObject = function(attribute) {
        attribute = attribute.trim();
        var obj = {};
        var header = /^(color|size)(\s)*=/.exec(attribute);
        var tagName = "";
        var nextSpace = 0;
        var eventHanlderString = "";
        if (header) {
          tagName = header[0];
          attribute = attribute.substring(tagName.length).trim();
          if ("" === attribute) return obj;
          nextSpace = attribute.indexOf(" ");
          switch (tagName[0]) {
           case "c":
            obj.color = nextSpace > -1 ? attribute.substring(0, nextSpace).trim() : attribute;
            break;

           case "s":
            obj.size = parseInt(attribute);
          }
          if (nextSpace > -1) {
            eventHanlderString = attribute.substring(nextSpace + 1).trim();
            obj.event = this._processEventHandler(eventHanlderString);
          }
          return obj;
        }
        header = /^(br(\s)*\/)/.exec(attribute);
        if (header && header[0].length > 0) {
          tagName = header[0].trim();
          if (tagName.startsWith("br") && "/" === tagName[tagName.length - 1]) {
            obj.isNewLine = true;
            this._resultObjectArray.push({
              text: "",
              style: {
                isNewLine: true
              }
            });
            return obj;
          }
        }
        header = /^(img(\s)*src(\s)*=[^>]+\/)/.exec(attribute);
        var remainingArgument = "";
        var rightQuot = -1;
        if (header && header[0].length > 0) {
          tagName = header[0].trim();
          if (tagName.startsWith("img") && "/" === tagName[tagName.length - 1]) {
            header = imageAttrReg.exec(attribute);
            var tagValue = void 0;
            var isValidImageTag = false;
            while (header) {
              attribute = attribute.substring(attribute.indexOf(header[0]));
              tagName = attribute.substr(0, header[0].length);
              var originTagNameLength = tagName.length;
              tagName = tagName.replace(/[^a-zA-Z]/g, "").trim();
              tagName = tagName.toLowerCase();
              remainingArgument = attribute.substring(originTagNameLength).trim();
              rightQuot = "src" === tagName ? this.getRightQuotationIndex(remainingArgument) : -1;
              nextSpace = remainingArgument.indexOf(" ", rightQuot + 1 >= remainingArgument.length ? -1 : rightQuot + 1);
              tagValue = nextSpace > -1 ? remainingArgument.substr(0, nextSpace) : remainingArgument;
              attribute = remainingArgument.substring(nextSpace).trim();
              tagValue.endsWith("/") && (tagValue = tagValue.slice(0, -1));
              if ("src" === tagName) {
                switch (tagValue.charCodeAt(0)) {
                 case 34:
                 case 39:
                  isValidImageTag = true;
                  tagValue = tagValue.slice(1, -1);
                }
                obj.isImage = true;
                obj.src = tagValue;
              } else if ("height" === tagName) obj.imageHeight = parseInt(tagValue); else if ("width" === tagName) obj.imageWidth = parseInt(tagValue); else if ("align" === tagName) {
                switch (tagValue.charCodeAt(0)) {
                 case 34:
                 case 39:
                  tagValue = tagValue.slice(1, -1);
                }
                obj.imageAlign = tagValue.toLowerCase();
              } else "offset" === tagName ? obj.imageOffset = tagValue : "click" === tagName && (obj.event = this._processEventHandler(tagName + "=" + tagValue));
              obj.event && "param" === tagName && (obj.event[tagName] = tagValue.replace(/^"|"$/g, ""));
              header = imageAttrReg.exec(attribute);
            }
            isValidImageTag && obj.isImage && this._resultObjectArray.push({
              text: "",
              style: obj
            });
            return {};
          }
        }
        header = /^(cg(\s)*[^>]*)/.exec(attribute);
        if (header) {
          attribute = header[0].substring("cg".length).trim();
          var defaultColorGradientObject = {
            lb: "#ffffff",
            rb: "#ffffff",
            lt: "#ffffff",
            rt: "#ffffff"
          };
          if (attribute) {
            var colorGradientAttrReg = /(\s)*lb(\s)*=|(\s)*rb(\s)*=|(\s)*lt(\s)*=|(\s)*rt(\s)*=/;
            header = colorGradientAttrReg.exec(attribute);
            var tagValue = void 0;
            var remainingArgument_1;
            while (header) {
              attribute = attribute.substring(attribute.indexOf(header[0]));
              tagName = attribute.substr(0, header[0].length);
              remainingArgument_1 = attribute.substring(tagName.length).trim();
              nextSpace = remainingArgument_1.indexOf(" ");
              tagValue = nextSpace > -1 ? remainingArgument_1.substr(0, nextSpace) : remainingArgument_1;
              tagName = tagName.replace(/[^a-zA-Z]/g, "").trim();
              tagName = tagName.toLocaleLowerCase();
              attribute = remainingArgument_1.substring(nextSpace).trim();
              "lb" === tagName ? defaultColorGradientObject.lb = tagValue : "rb" === tagName ? defaultColorGradientObject.rb = tagValue : "lt" === tagName ? defaultColorGradientObject.lt = tagValue : "rt" === tagName && (defaultColorGradientObject.rt = tagValue);
              header = colorGradientAttrReg.exec(attribute);
            }
          }
          obj.colorGradient = defaultColorGradientObject;
        }
        header = /^(face(\s)*[^>]*)/.exec(attribute);
        if (header) {
          attribute = header[0].substring("face".length).trim();
          var defaultFaceObject = {
            color: "#ffffff",
            dilate: .5,
            softness: .01
          };
          if (attribute) {
            var faceAttrReg = /(\s)*color(\s)*=|(\s)*dilate(\s)*=|(\s)*softness(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
            header = faceAttrReg.exec(attribute);
            var tagValue = void 0;
            var remainingArgument_2;
            while (header) {
              attribute = attribute.substring(attribute.indexOf(header[0]));
              tagName = attribute.substr(0, header[0].length);
              remainingArgument_2 = attribute.substring(tagName.length).trim();
              nextSpace = remainingArgument_2.indexOf(" ");
              tagValue = nextSpace > -1 ? remainingArgument_2.substr(0, nextSpace) : remainingArgument_2;
              tagName = tagName.replace(/[^a-zA-Z]/g, "").trim();
              tagName = tagName.toLocaleLowerCase();
              attribute = remainingArgument_2.substring(nextSpace).trim();
              "click" === tagName ? obj.event = this._processEventHandler(tagName + "=" + tagValue) : "color" === tagName ? defaultFaceObject.color = tagValue : "dilate" === tagName ? defaultFaceObject.dilate = Number(tagValue) : "softness" === tagName && (defaultFaceObject.softness = Number(tagValue));
              obj.event && "param" === tagName && (obj.event.param = tagValue.replace(/^\"|\"$/g, ""));
              header = faceAttrReg.exec(attribute);
            }
          }
          obj.face = defaultFaceObject;
        }
        header = /^(outline(\s)*[^>]*)/.exec(attribute);
        if (header) {
          attribute = header[0].substring("outline".length).trim();
          var defaultOutlineObject = {
            color: "#ffffff",
            thickness: .1
          };
          if (attribute) {
            var outlineAttrReg = /(\s)*color(\s)*=|(\s)*thickness(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
            header = outlineAttrReg.exec(attribute);
            var tagValue = void 0;
            while (header) {
              attribute = attribute.substring(attribute.indexOf(header[0]));
              tagName = attribute.substr(0, header[0].length);
              remainingArgument = attribute.substring(tagName.length).trim();
              nextSpace = remainingArgument.indexOf(" ");
              tagValue = nextSpace > -1 ? remainingArgument.substr(0, nextSpace) : remainingArgument;
              tagName = tagName.replace(/[^a-zA-Z]/g, "").trim();
              tagName = tagName.toLowerCase();
              attribute = remainingArgument.substring(nextSpace).trim();
              "click" === tagName ? obj.event = this._processEventHandler(tagName + "=" + tagValue) : "color" === tagName ? defaultOutlineObject.color = tagValue : "thickness" === tagName && (defaultOutlineObject.thickness = Number(tagValue));
              obj.event && "param" === tagName && (obj.event[tagName] = tagValue.replace(/^"|"$/g, ""));
              header = outlineAttrReg.exec(attribute);
            }
          }
          obj.outline = defaultOutlineObject;
        }
        header = /^(underlay(\s)*[^>]*)/.exec(attribute);
        if (header) {
          attribute = header[0].substring("underlay".length).trim();
          var defaultUnderlayObject = {
            color: "#ffffff",
            x: 0,
            y: 0,
            dilate: .5,
            softness: .1
          };
          if (attribute) {
            var underlayAttrReg = /(\s)*color(\s)*=|(\s)*x(\s)*=|(\s)*y(\s)*=|(\s)*dilate(\s)*=|(\s)*softness(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
            header = underlayAttrReg.exec(attribute);
            var tagValue = void 0;
            var remainingArgument_3;
            while (header) {
              attribute = attribute.substring(attribute.indexOf(header[0]));
              tagName = attribute.substr(0, header[0].length);
              remainingArgument_3 = attribute.substring(tagName.length).trim();
              nextSpace = remainingArgument_3.indexOf(" ");
              tagValue = nextSpace > -1 ? remainingArgument_3.substr(0, nextSpace) : remainingArgument_3;
              tagName = tagName.replace(/[^a-zA-Z]/g, "").trim();
              tagName = tagName.toLocaleLowerCase();
              attribute = remainingArgument_3.substring(nextSpace).trim();
              "click" === tagName ? obj.event = this._processEventHandler(tagName + "=" + tagValue) : "color" === tagName ? defaultUnderlayObject.color = tagValue : "dilate" === tagName ? defaultUnderlayObject.dilate = Number(tagValue) : "softness" === tagName ? defaultUnderlayObject.softness = Number(tagValue) : "x" === tagName ? defaultUnderlayObject.x = Number(tagValue) : "y" === tagName && (defaultUnderlayObject.y = Number(tagValue));
              obj.event && "param" === tagName && (obj.event.param = tagValue.replace(/^\"|\"$/g, ""));
              header = underlayAttrReg.exec(attribute);
            }
          }
          obj.underlay = defaultUnderlayObject;
        }
        header = /^(glow(\s)*[^>]*)/.exec(attribute);
        if (header) {
          attribute = header[0].substring("glow".length).trim();
          var defaultGlowObject = {
            color: "#000000",
            offset: .5,
            inner: .01,
            outer: .01,
            power: 1
          };
          if (attribute) {
            var glowAttrReg = /(\s)*color(\s)*=|(\s)*offset(\s)*=|(\s)*inner(\s)*=|(\s)*outer(\s)*=|(\s)*power(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
            header = glowAttrReg.exec(attribute);
            var tagValue = void 0;
            var remainingArgument_4;
            while (header) {
              attribute = attribute.substring(attribute.indexOf(header[0]));
              tagName = attribute.substr(0, header[0].length);
              remainingArgument_4 = attribute.substring(tagName.length).trim();
              nextSpace = remainingArgument_4.indexOf(" ");
              tagValue = nextSpace > -1 ? remainingArgument_4.substr(0, nextSpace) : remainingArgument_4;
              tagName = tagName.replace(/[^a-zA-Z]/g, "").trim();
              tagName = tagName.toLocaleLowerCase();
              attribute = remainingArgument_4.substring(nextSpace).trim();
              "click" === tagName ? obj.event = this._processEventHandler(tagName + "=" + tagValue) : "color" === tagName ? defaultGlowObject.color = tagValue : "offset" === tagName ? defaultGlowObject.offset = Number(tagValue) : "inner" === tagName ? defaultGlowObject.inner = Number(tagValue) : "outer" === tagName ? defaultGlowObject.outer = Number(tagValue) : "power" === tagName && (defaultGlowObject.power = Number(tagValue));
              obj.event && "param" === tagName && (obj.event.param = tagValue.replace(/^\"|\"$/g, ""));
              header = glowAttrReg.exec(attribute);
            }
          }
          obj.glow = defaultGlowObject;
        }
        header = /^(on|u|s|b|i)(\s)*/.exec(attribute);
        if (header && header[0].length > 0) {
          tagName = header[0];
          attribute = attribute.substring(tagName.length).trim();
          switch (tagName[0]) {
           case "u":
            obj.underline = true;
            obj.offset = "=" === attribute[0] ? Number(attribute.slice(1)) : 0;
            break;

           case "s":
            obj.strikethrough = true;
            obj.offset = "=" === attribute[0] ? Number(attribute.slice(1)) : 0;
            break;

           case "i":
            obj.italic = true;
            break;

           case "b":
            obj.bold = true;
          }
          if ("" === attribute) return obj;
          obj.event = this._processEventHandler(attribute);
        }
        return obj;
      };
      HtmlTextParser.prototype.getRightQuotationIndex = function(remainingArgument) {
        var leftQuot = -1;
        var rightQuot = -1;
        var leftSingleQuot = remainingArgument.indexOf("'");
        var leftDoubleQuot = remainingArgument.indexOf('"');
        var useSingleQuot = leftSingleQuot > -1 && (leftSingleQuot < leftDoubleQuot || -1 === leftDoubleQuot);
        var useDoubleQuot = leftDoubleQuot > -1 && (leftDoubleQuot < leftSingleQuot || -1 === leftSingleQuot);
        if (useSingleQuot) {
          leftQuot = leftSingleQuot;
          rightQuot = remainingArgument.indexOf("'", leftQuot + 1 >= remainingArgument.length ? -1 : leftQuot + 1);
        } else if (useDoubleQuot) {
          leftQuot = leftDoubleQuot;
          rightQuot = remainingArgument.indexOf('"', leftQuot + 1 >= remainingArgument.length ? -1 : leftQuot + 1);
        }
        return rightQuot;
      };
      HtmlTextParser.prototype._processEventHandler = function(eventString) {
        var obj = {};
        var index = 0;
        var isValidTag = false;
        var eventNames = eventRegx.exec(eventString);
        while (eventNames) {
          var eventName = eventNames[0];
          var eventValue = "";
          isValidTag = false;
          eventString = eventString.substring(eventName.length).trim();
          if ('"' === eventString.charAt(0)) {
            index = eventString.indexOf('"', 1);
            if (index > -1) {
              eventValue = eventString.substring(1, index).trim();
              isValidTag = true;
            }
            index++;
          } else if ("'" === eventString.charAt(0)) {
            index = eventString.indexOf("'", 1);
            if (index > -1) {
              eventValue = eventString.substring(1, index).trim();
              isValidTag = true;
            }
            index++;
          } else {
            var match = /(\S)+/.exec(eventString);
            eventValue = match ? match[0] : "";
            index = eventValue.length;
          }
          if (isValidTag) {
            eventName = eventName.substring(0, eventName.length - 1).trim();
            obj[eventName] = eventValue;
          }
          eventString = eventString.substring(index).trim();
          eventNames = eventRegx.exec(eventString);
        }
        return obj;
      };
      HtmlTextParser.prototype._addToStack = function(attribute) {
        var obj = this._attributeToObject(attribute);
        if (0 === this._stack.length) this._stack.push(obj); else {
          if (obj.isNewLine || obj.isImage) return;
          var previousTagObj = this._stack[this._stack.length - 1];
          for (var key in previousTagObj) obj[key] || (obj[key] = previousTagObj[key]);
          this._stack.push(obj);
        }
      };
      HtmlTextParser.prototype._processResult = function(value) {
        if (0 === value.length) return;
        value = this._escapeSpecialSymbol(value);
        this._stack.length > 0 ? this._resultObjectArray.push({
          text: value,
          style: this._stack[this._stack.length - 1]
        }) : this._resultObjectArray.push({
          text: value
        });
      };
      HtmlTextParser.prototype._escapeSpecialSymbol = function(str) {
        for (var _i = 0, _a = this._specialSymbolArray; _i < _a.length; _i++) {
          var symbolArr = _a[_i];
          var key = symbolArr[0];
          var value = symbolArr[1];
          str = str.replace(key, value);
        }
        return str;
      };
      return HtmlTextParser;
    }();
    exports.HtmlTextParser = HtmlTextParser;
    cc._RF.pop();
  }, {} ],
  IndexTest: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00d019WUS1JQKeXOddCwNt9", "IndexTest");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        a: 0
      },
      start: function start() {
        this.node.zIndex = this.a;
      }
    });
    cc._RF.pop();
  }, {} ],
  Jiejie_Meixi_Bullet_Particle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "51bfbXcuJBMHpIdw443FaFQ", "Jiejie_Meixi_Bullet_Particle");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node,
        Hero_Common: cc.Node,
        Is_Start_Follow: 0
      },
      start: function start() {
        var _this = this;
        this.Hero = cc.find("Canvas/Hero").children[0];
        this.Hero_Common = this.Hero.getComponent("Hero_Common");
        var To_X = Math.floor(1001 * Math.random() - 300);
        var To_Y = Math.floor(1001 * Math.random() - 300);
        cc.tween(this.node).to(.5, {
          position: cc.v2(this.node.x + To_X, this.node.y + this.Hero_Common.Image_Offset_Y + To_Y)
        }, {
          easing: "quadOut"
        }).call(function() {
          _this.Is_Start_Follow = 1;
        }).start();
      },
      update: function update() {
        1 == this.Is_Start_Follow && cc.tween(this.node).delay(1e-5).to(Math.abs(this.node.x - this.Hero.x + this.Hero_Common.Image_Offset_X) / 800, {
          position: cc.v2(this.Hero.x + this.Hero_Common.Image_Offset_X, this.Hero.y + this.Hero_Common.Image_Offset_Y)
        }).start();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        var _this2 = this;
        0 == this.Is_Start_Follow;
        cc.tween(this.node).to(.5, {
          scale: 5,
          opacity: 0
        }).call(function() {
          _this2.node.destroy();
        }).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Jiejie_Meixi: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cb9e3vo97JHhqACEeb9BOP/", "Jiejie_Meixi");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Jiejie_Meixi_Bullet_Particle: cc.Prefab,
        Is_Have_Addition: 0,
        Addition: 0
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Enemy_Bullet" == other.node.group) {
          this.Is_Have_Addition = 1;
          this.Addition += 2;
          this.Battle_Controller.Normal_Attack_Addition_Add(2);
          var node = cc.instantiate(this.Jiejie_Meixi_Bullet_Particle);
          node.parent = this.Battle_Controller.Particle_Parent;
          null != other.node && node.setPosition(other.node.x, other.node.y);
          this.Battle_Controller.Battle_Audio_Controller.Other(0, .8);
        }
      },
      Restore_Addition: function Restore_Addition() {
        if (1 == this.Is_Have_Addition) {
          this.Is_Have_Addition = 0;
          this.Battle_Controller.Normal_Attack_Addition_Reduce(this.Addition);
          this.Addition = 0;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Jiejie_Pet_Bajie: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d4725gA2FDA4smZ3GTNFau", "Jiejie_Pet_Bajie");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation
      },
      start: function start() {
        this.scheduleOnce(function() {
          var _this = this;
          this.Animation.stop();
          cc.tween(this.node).to(1, {
            opacity: 0
          }).call(function() {
            _this.node.destroy();
          }).start();
        }, 5);
      },
      To_Surround: function To_Surround() {
        this.Animation.play("Jiejie_Pet_Bajie_Surround");
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        "Enemy_Bullet" == other.node.group && other.node.getComponent("Enemy_Bullet_Common").Be_Destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  JoyStick: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4983a+oUK5Btr8GdgqkJJm8", "JoyStick");
    "use strict";
    var Camera_Follow = require("Camera_Follow");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Is_Set_Finished: 0,
        Is_Mobile: 1,
        Joy_Stick: cc.Node,
        Joy_Stick_BG: cc.Node,
        Camera_Follow: Camera_Follow,
        Hero_Parent: cc.Node,
        Hero: cc.Node,
        Hero_Script: cc.Node,
        Is_Hero_Move: 0,
        Speed: 15,
        Up_Bound: 0,
        Down_Bound: 0,
        Left_Bound: 0,
        Right_Bound: 0,
        Key_Up: 0,
        Key_Down: 0,
        Key_Left: 0,
        Key_Right: 0,
        Setting_Menu_Mobile_Button: cc.Node,
        Setting_Menu_Fix_Button: cc.Node,
        Is_Checking_Extra: 0,
        Sprint_Speed_Schedule: cc.Schedule,
        Sprint_Is_Sprint_Schedule: cc.Schedule
      },
      Start_Set: function Start_Set() {
        this.Is_Mobile = cc.sys.localStorage.getItem("JoyStick_Is_Mobile");
        null == this.Is_Mobile && (this.Is_Mobile = 1);
        if (1 == this.Is_Mobile) {
          this.Setting_Menu_Mobile_Button.opacity = 255;
          this.Setting_Menu_Fix_Button.opacity = 100;
        } else {
          this.Setting_Menu_Mobile_Button.opacity = 100;
          this.Setting_Menu_Fix_Button.opacity = 255;
        }
        this.Camera_Follow.Start_Set();
        this.Get_Hero();
        this.node.on(cc.Node.EventType.TOUCH_START, function(t) {
          this.Is_Hero_Move = 1;
          this.Hero_Script.Is_Moveing = 1;
          this.Joy_Stick.x = t.getLocationX() - 1600;
          this.Joy_Stick.y = t.getLocationY() - 720;
          if (1 == this.Is_Mobile) {
            this.Joy_Stick_BG.x = t.getLocationX() - 1600;
            this.Joy_Stick_BG.y = t.getLocationY() - 720;
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(t) {
          this.Joy_Stick.x = t.getLocationX() - 1600;
          this.Joy_Stick.y = t.getLocationY() - 720;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Joytick_Back();
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Joytick_Back();
        }, this);
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
        this.Is_Set_Finished = 1;
        this.Sprint_Speed_Schedule = function() {
          this.Speed = 15;
        };
        this.Sprint_Is_Sprint_Schedule = function() {
          this.Hero_Script.Hero_Common.Is_Sprint = 0;
          this.Battle_Controller.Sprint.unschedule(this.Battle_Controller.Sprint.Ghost_Schedule);
        };
      },
      Get_Hero: function Get_Hero() {
        this.Hero = this.Hero_Parent.children[0];
        this.Hero_Script = this.Hero.getComponent(this.Hero.name);
      },
      Joytick_Back: function Joytick_Back() {
        this.Is_Hero_Move = 0;
        this.Hero_Script.Is_Moveing = 0;
        this.Joy_Stick.x = -1041.245;
        this.Joy_Stick.y = -397.899;
        this.Joy_Stick_BG.x = -1041.245;
        this.Joy_Stick_BG.y = -397.899;
      },
      update: function update(dt) {
        if (1 == this.Is_Set_Finished) {
          1 == this.Battle_Controller.Camera_Can_Follow && this.Camera_Follow.Follow_Start();
          if (1 == this.Is_Hero_Move && 1 == this.Hero_Script.Can_Move) {
            var a = this.Joy_Stick.y - this.Joy_Stick_BG.y;
            var b = Math.pow(a, 2);
            var c = this.Joy_Stick.x - this.Joy_Stick_BG.x;
            var d = Math.pow(c, 2);
            var e = Math.sqrt(b + d);
            this.Hero.y < this.Down_Bound ? this.Hero.y = this.Down_Bound + 2 : this.Hero.y > this.Up_Bound ? this.Hero.y = this.Up_Bound - 2 : 0 != e && (this.Hero.y = this.Hero.y + a / e * this.Speed);
            this.Hero.x < this.Left_Bound ? this.Hero.x = this.Left_Bound + 2 : this.Hero.x > this.Right_Bound ? this.Hero.x = this.Right_Bound - 2 : 0 != e && (this.Hero.x = this.Hero.x + c / e * this.Speed);
          }
          if (1 == this.Hero_Script.Can_Move) {
            this.Hero.y < this.Down_Bound ? this.Hero.y = this.Down_Bound : this.Hero.y > this.Up_Bound ? this.Hero.y = this.Up_Bound - 1 : 1 == this.Key_Up ? this.Hero.y = this.Hero.y + this.Speed : 1 == this.Key_Down && (this.Hero.y = this.Hero.y - this.Speed);
            this.Hero.x < this.Left_Bound ? this.Hero.x = this.Left_Bound : this.Hero.x > this.Right_Bound ? this.Hero.x = this.Right_Bound - 1 : 1 == this.Key_Left ? this.Hero.x = this.Hero.x - this.Speed : 1 == this.Key_Right && (this.Hero.x = this.Hero.x + this.Speed);
          }
          if (0 == this.Is_Hero_Move && 0 == this.Key_Up && 0 == this.Key_Down && 0 == this.Key_Left && 0 == this.Key_Right) {
            if (0 == this.Is_Checking_Extra) {
              this.Is_Checking_Extra = 1;
              for (var i = 0; i < this.Battle_Controller.Stop_Move_Extra_Check.Stop_Move_Extra_Check_Script.length; i++) this.Battle_Controller.Stop_Move_Extra_Check.Stop_Move_Extra_Check_Script[i].Check();
            }
          } else if (1 == this.Is_Checking_Extra) {
            this.Is_Checking_Extra = 0;
            for (var i = 0; i < this.Battle_Controller.Start_Move_Extra_Check.Start_Move_Extra_Check_Script.length; i++) this.Battle_Controller.Start_Move_Extra_Check.Start_Move_Extra_Check_Script[i].Check();
          }
        }
      },
      onKeyDown: function onKeyDown(event) {
        event.keyCode == cc.macro.KEY.w && (this.Key_Up = 1);
        event.keyCode == cc.macro.KEY.s && (this.Key_Down = 1);
        event.keyCode == cc.macro.KEY.a && (this.Key_Left = 1);
        event.keyCode == cc.macro.KEY.d && (this.Key_Right = 1);
      },
      onKeyUp: function onKeyUp(event) {
        event.keyCode == cc.macro.KEY.w && (this.Key_Up = 0);
        event.keyCode == cc.macro.KEY.s && (this.Key_Down = 0);
        event.keyCode == cc.macro.KEY.a && (this.Key_Left = 0);
        event.keyCode == cc.macro.KEY.d && (this.Key_Right = 0);
      },
      Sprint: function Sprint() {
        this.Speed = 50;
        this.Hero_Script.Hero_Common.Is_Sprint = 1;
        this.unschedule(this.Sprint_Speed_Schedule);
        this.unschedule(this.Sprint_Is_Sprint_Schedule);
        this.scheduleOnce(this.Sprint_Speed_Schedule, .1);
        this.scheduleOnce(this.Sprint_Is_Sprint_Schedule, this.Battle_Controller.Sprint_Time);
      }
    });
    cc._RF.pop();
  }, {
    Camera_Follow: "Camera_Follow"
  } ],
  Left_Up_Buff_Icon_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0841dUO8lhL775dWloDrq6Z", "Left_Up_Buff_Icon_Common");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Label: cc.Label
      }
    });
    cc._RF.pop();
  }, {} ],
  Level_Select_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "488f9F43SNIq5tQV1oJzMCa", "Level_Select_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Level_Select_Controller: cc.Node,
        Number: 0,
        Image: cc.Node,
        White_Bar: cc.Node
      },
      onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onClick, this);
        this.node.on(cc.Node.EventType.TOUCH_START, this.startClick, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.cancelClick, this);
      },
      startClick: function startClick() {
        cc.Tween.stopAllByTarget(this.Image);
        cc.tween(this.Image).to(.5, {
          y: -32.337
        }, {
          easing: "quadOut"
        }).start();
      },
      cancelClick: function cancelClick() {
        cc.Tween.stopAllByTarget(this.Image);
        cc.tween(this.Image).to(.5, {
          y: 0
        }, {
          easing: "backOut"
        }).start();
      },
      onClick: function onClick() {
        this.Level_Select_Controller.selectButton(this);
      },
      Up: function Up() {
        cc.Tween.stopAllByTarget(this.White_Bar);
        cc.Tween.stopAllByTarget(this.Image);
        cc.tween(this.White_Bar).to(.5, {
          scaleX: 1.5
        }, {
          easing: "backInOut"
        }).start();
        cc.tween(this.Image).to(.5, {
          y: 32.337
        }, {
          easing: "backInOut"
        }).start();
      },
      Down: function Down() {
        cc.Tween.stopAllByTarget(this.White_Bar);
        cc.Tween.stopAllByTarget(this.Image);
        cc.tween(this.White_Bar).to(.5, {
          scaleX: 0
        }, {
          easing: "backInOut"
        }).start();
        cc.tween(this.Image).to(.5, {
          y: 0
        }, {
          easing: "backInOut"
        }).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Level_Select_Controller: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b774f4fNyFMx7WanUnz9X16", "Level_Select_Controller");
    "use strict";
    var Level_Select_Button = require("Level_Select_Button");
    var Hero_Select_Button = require("Hero_Select_Button");
    cc.Class({
      extends: cc.Component,
      properties: {
        Main_Controller: cc.Node,
        Level_Select_Button: [ Level_Select_Button ],
        Level_Select_Background: [ cc.Node ],
        currentSelectedButton: null,
        currentSelectedBg: null,
        Stage: 0,
        Back_Button: cc.Node,
        Next_Button: cc.Node,
        Rank_Bar: cc.Node,
        Rank_Label: cc.Node,
        Select_Hero: 0,
        Hero_Select_BG: cc.Node,
        Hero_Select_Button: [ Hero_Select_Button ],
        Select_Hero_Head_Index: 0,
        Hero_Introduce_Parent: cc.Node,
        Hero_Introduce_Prefab: cc.Prefab,
        Now_Hero_Introduce: cc.Node,
        Hero_Introduce_Image: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {
        null == cc.sys.localStorage.getItem("Select_Hero") && cc.sys.localStorage.setItem("Select_Hero", 0);
        this.Select_Hero = cc.sys.localStorage.getItem("Select_Hero");
      },
      start: function start() {
        for (var i = 0; i < this.Level_Select_Button.length; i++) this.Level_Select_Button[i].Level_Select_Controller = this;
        this.Rank_Label = this.Rank_Label.getComponent("TextMeshPro");
        for (var _i = 0; _i < this.Hero_Select_Button.length; _i++) this.Hero_Select_Button[_i].Level_Select_Controller = this;
        null == cc.sys.localStorage.getItem("Now_Boss") && cc.sys.localStorage.setItem("Now_Boss", 0);
        var Now_Boss = cc.sys.localStorage.getItem("Now_Boss");
        this.currentSelectedBg = this.Level_Select_Background[Now_Boss];
        this.currentSelectedButton = this.Level_Select_Button[Now_Boss];
        this.currentSelectedBg.opacity = 255;
        this.currentSelectedButton.White_Bar.scaleX = 1.5;
        this.currentSelectedButton.Image.y = 32.337;
        this.node.active = false;
        this.Set_Back_Button();
        this.Set_Next_Button();
      },
      selectButton: function selectButton(button) {
        var index = button.Number - 1;
        if (this.currentSelectedButton && this.currentSelectedButton !== button) {
          this.currentSelectedButton.Down();
          if (this.currentSelectedBg) {
            cc.Tween.stopAllByTarget(this.currentSelectedBg);
            cc.tween(this.currentSelectedBg).to(.5, {
              opacity: 0
            }).start();
          }
        }
        this.currentSelectedButton = button;
        this.currentSelectedBg = this.Level_Select_Background[index];
        button.Up();
        if (this.currentSelectedBg) {
          cc.Tween.stopAllByTarget(this.currentSelectedBg);
          cc.tween(this.currentSelectedBg).to(.5, {
            opacity: 255
          }).start();
        }
      },
      Set_Back_Button: function Set_Back_Button() {
        var _this = this;
        this.Back_Button.on(cc.Node.EventType.TOUCH_START, function() {
          cc.Tween.stopAllByTarget(_this.Back_Button);
          cc.tween(_this.Back_Button).to(.3, {
            scale: 1.7
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 1.8
          }, {
            easing: "quadOut"
          }).start();
        }, this);
        this.Back_Button.on(cc.Node.EventType.TOUCH_END, function() {
          if (0 == _this.Stage) {
            cc.Tween.stopAllByTarget(_this.Main_Controller.Ready_Bg);
            cc.tween(_this.Main_Controller.Ready_Bg).to(.5, {
              scale: .8
            }, {
              easing: "quadInOut"
            }).call(function() {
              cc.tween(_this.Main_Controller.Main_UI).to(1, {
                opacity: 255,
                scale: 1.1
              }, {
                easing: "quadInOut"
              }).to(.5, {
                scale: 1
              }, {
                easing: "quadInOut"
              }).call(function() {
                _this.Main_Controller.Main_Stage = 2;
                _this.node.active = false;
              }).start();
            }).to(.5, {
              opacity: 0,
              scale: 1.5
            }, {
              easing: "quadInOut"
            }).start();
          } else if (1 == _this.Stage) {
            _this.Stage = 0;
            _this.Select_Hero_Leave();
            setTimeout(function() {
              _this.All_Button_Enter();
              if (_this.currentSelectedBg) {
                cc.Tween.stopAllByTarget(_this.currentSelectedBg);
                cc.tween(_this.currentSelectedBg).to(.5, {
                  opacity: 255
                }).delay(.1).call(function() {
                  cc.Tween.stopAllByTarget(_this.Rank_Bar);
                  cc.tween(_this.Rank_Bar).to(.2, {
                    scaleX: .66667
                  }, {
                    easing: "backOut"
                  }).start();
                  cc.Tween.stopAllByTarget(_this.Rank_Label.node);
                  cc.tween(_this.Rank_Label.node).to(.2, {
                    scaleX: .66667
                  }, {
                    easing: "backOut"
                  }).start();
                  cc.Tween.stopAllByTarget(_this.currentSelectedButton.White_Bar);
                  cc.tween(_this.currentSelectedButton.White_Bar).to(.2, {
                    scaleX: 1.5
                  }, {
                    easing: "backOut"
                  }).start();
                }).start();
              }
            }, 500);
          }
          cc.Tween.stopAllByTarget(_this.Back_Button);
          cc.tween(_this.Back_Button).to(.3, {
            scale: 2.1
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 1.9
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 2
          }, {
            easing: "quadOut"
          }).start();
        }, this);
        this.Back_Button.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          cc.Tween.stopAllByTarget(_this.Back_Button);
          cc.tween(_this.Back_Button).to(.3, {
            scale: 2.1
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 1.9
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 2
          }, {
            easing: "quadOut"
          }).start();
        }, this);
      },
      Set_Next_Button: function Set_Next_Button() {
        var _this2 = this;
        this.Next_Button.on(cc.Node.EventType.TOUCH_START, function() {
          cc.Tween.stopAllByTarget(_this2.Next_Button);
          cc.tween(_this2.Next_Button).to(.3, {
            scale: 1.7
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 1.8
          }, {
            easing: "quadOut"
          }).start();
        }, this);
        this.Next_Button.on(cc.Node.EventType.TOUCH_END, function() {
          if (0 == _this2.Stage) {
            _this2.Stage = 1;
            if (_this2.currentSelectedBg) {
              cc.Tween.stopAllByTarget(_this2.currentSelectedBg);
              cc.tween(_this2.currentSelectedBg).to(.5, {
                opacity: 0
              }).start();
            }
            cc.Tween.stopAllByTarget(_this2.Rank_Bar);
            cc.tween(_this2.Rank_Bar).to(.2, {
              scaleX: 0
            }).start();
            cc.Tween.stopAllByTarget(_this2.Rank_Label.node);
            cc.tween(_this2.Rank_Label.node).to(.2, {
              scaleX: 0
            }).start();
            cc.Tween.stopAllByTarget(_this2.currentSelectedButton.White_Bar);
            cc.tween(_this2.currentSelectedButton.White_Bar).to(.2, {
              scaleX: 0
            }).delay(.5).call(function() {
              _this2.Select_Hero_Enter();
            }).start();
            _this2.All_Button_Leave();
          } else 1 == _this2.Stage && cc.director.loadScene("Test_Set");
          cc.Tween.stopAllByTarget(_this2.Next_Button);
          cc.tween(_this2.Next_Button).to(.3, {
            scale: 2.1
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 1.9
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 2
          }, {
            easing: "quadOut"
          }).start();
        }, this);
        this.Next_Button.on(cc.Node.EventType.TOUCH_CANCEL, function() {
          cc.Tween.stopAllByTarget(_this2.Next_Button);
          cc.tween(_this2.Next_Button).to(.3, {
            scale: 2.1
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 1.9
          }, {
            easing: "quadOut"
          }).to(.3, {
            scale: 2
          }, {
            easing: "quadOut"
          }).start();
        }, this);
      },
      All_Button_Leave: function All_Button_Leave() {
        this.Level_Select_Button.forEach(function(button, index) {
          cc.Tween.stopAllByTarget(button.node);
          var direction = index % 2 === 0 ? 1 : -1;
          cc.tween(button.node).delay(.05 * index).by(.5, {
            y: 900 * direction
          }, {
            easing: "backIn"
          }).start();
        });
      },
      All_Button_Enter: function All_Button_Enter() {
        this.Level_Select_Button.forEach(function(button, index) {
          cc.Tween.stopAllByTarget(button.node);
          var direction = index % 2 === 0 ? 1 : -1;
          cc.tween(button.node).delay(.05 * index).by(.5, {
            y: -900 * direction
          }, {
            easing: "backOut"
          }).start();
        });
      },
      Select_Hero_Enter: function Select_Hero_Enter() {
        this.Hero_Select_BG.parent.parent.active = true;
        null == this.Now_Hero_Introduce && this.Create_Hero_Introduce();
        cc.Tween.stopAllByTarget(this.Hero_Select_BG);
        cc.tween(this.Hero_Select_BG).to(.5, {
          x: -864.264
        }, {
          easing: "backOut"
        }).start();
        cc.Tween.stopAllByTarget(this.Hero_Introduce_Parent);
        cc.tween(this.Hero_Introduce_Parent).to(.5, {
          x: 0
        }, {
          easing: "backOut"
        }).start();
      },
      Select_Hero_Leave: function Select_Hero_Leave() {
        var _this3 = this;
        this.Hero_Select_BG.parent.parent.active = true;
        cc.Tween.stopAllByTarget(this.Hero_Select_BG);
        cc.tween(this.Hero_Select_BG).to(.5, {
          x: -1864.264
        }, {
          easing: "backIn"
        }).call(function() {
          _this3.Hero_Select_BG.parent.parent.active = false;
        }).start();
        cc.tween(this.Hero_Introduce_Parent).to(.5, {
          x: 1864.264
        }, {
          easing: "backIn"
        }).call(function() {
          _this3.Hero_Select_BG.parent.parent.active = false;
        }).start();
      },
      Create_Hero_Introduce: function Create_Hero_Introduce() {
        var Node = cc.instantiate(this.Hero_Introduce_Prefab);
        this.Hero_Introduce_Parent.addChild(Node);
        this.Now_Hero_Introduce = Node.getComponent("Hero_Introduce");
        this.Now_Hero_Introduce.Sprite.spriteFrame = this.Hero_Introduce_Image[this.Select_Hero];
      }
    });
    cc._RF.pop();
  }, {
    Hero_Select_Button: "Hero_Select_Button",
    Level_Select_Button: "Level_Select_Button"
  } ],
  Lovelace_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3af46vWlNVKMLY0Mp0T0GHA", "Lovelace_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Lovelace").getComponent("Lovelace");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Lovelace_Code_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f15b6754bpCOJwota2k87pJ", "Lovelace_Code_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Touch_State: cc.Node,
        Label: cc.Label,
        Button: cc.Prefab
      },
      start: function start() {
        this.String = [ "q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "[", "]", "{", "}", "|", "a", "s", "d", "f", "g", "h", "j", "k", "l", ";", "z", "x", "c", "v", "b", "n", "m", ",", "@", "#", "$", "%", "&", "*", "+", "=", "A", "Q", "W", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "A", "S", "D", "F", "G", "H", "J", "K", "L", "Z", "X", "X", "C", "V", "B", "N", "M", "!", "?", "<", ">", "~" ];
        this.Label.string = this.String[Math.floor(Math.random() * this.String.length)];
        this.Touch_State.on(cc.Node.EventType.TOUCH_START, function(event) {
          this.Battle_Controller.Hero_Script.Skill_Button_Number++;
          var Button = cc.instantiate(this.Button);
          Button.parent = this.node.parent;
          Button.setPosition(2401 * Math.random() - 1200, 736 * Math.random() - 555);
          Button.getComponent("Lovelace_Code_Button").Battle_Controller = this.Battle_Controller;
          this.node.destroy();
        }, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  Lovelace_Hidden_Collider: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c6a1dzCm3dMmo2ZwUw87VnQ", "Lovelace_Hidden_Collider");
    "use strict";
    var Lovelace = require("Lovelace");
    cc.Class({
      extends: cc.Component,
      properties: {
        Lovelace: Lovelace
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if (this.Lovelace.Battle_Controller.Hero_Star >= 2 && 1 == this.Lovelace.Is_Hidden && "Enemy_Bullet" == other.node.group) {
          other.node.getComponent("Enemy_Bullet_Common").Be_Destroy();
          this.Lovelace.Shoot_Skill_Bullet();
        }
      }
    });
    cc._RF.pop();
  }, {
    Lovelace: "Lovelace"
  } ],
  Lovelace_Skill_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "358d25Njx1BIoHVXekTmwBn", "Lovelace_Skill_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Code_Rain: cc.Prefab,
        Can_Weak: 0
      },
      start: function start() {
        this.schedule(function() {
          var node = cc.instantiate(this.Code_Rain);
          node.parent = this.Battle_Controller.Particle_Parent;
          node.setPosition(this.node.x, this.node.y);
        }, .1);
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if (1 == this.Can_Weak && null != otherCollider.node && "Enemy" == otherCollider.node.group) {
          var Enemy_Common = otherCollider.node.getComponent("Enemy_Common");
          null != Enemy_Common && Enemy_Common.To_Weak();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Lovelace_Skill_Menu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "44646JpY3pE+LS4WUw4QsX9", "Lovelace_Skill_Menu");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Button: cc.Prefab,
        Time_Number: 80,
        Time_Number_Label: cc.Label,
        Time_Line: cc.Node,
        Schedule: cc.Schedule,
        Code_Button_Parent: cc.Node,
        Animation: cc.Animation
      },
      start: function start() {
        this.Schedule = function() {
          if (this.Time_Number > 0) {
            this.Time_Number--;
            this.Time_Number_Label.string = "\u5012\u8ba1\u65f6 " + this.Time_Number / 10;
            this.Time_Line.scaleX = this.Time_Number / 80;
          } else {
            this.Animation.play("Lovelace_Skill_Menu_Out");
            this.unschedule(this.Schedule);
          }
        };
        this.Lovelace_Skill_Menu_Start();
      },
      Lovelace_Skill_Menu_Start: function Lovelace_Skill_Menu_Start() {
        this.Time_Number = 80;
        this.Time_Number_Label.string = "\u5012\u8ba1\u65f6 " + this.Time_Number;
        this.Time_Line.scaleX = 1;
        this.Animation.play("Lovelace_Skill_Menu_Born");
      },
      To_Stay: function To_Stay() {
        this.unschedule(this.Schedule);
        this.schedule(this.Schedule, .1);
        var Button = cc.instantiate(this.Button);
        Button.parent = this.Code_Button_Parent;
        Button.setPosition(2401 * Math.random() - 1200, 736 * Math.random() - 555);
        Button.getComponent("Lovelace_Code_Button").Battle_Controller = this.Battle_Controller;
      },
      End: function End() {
        if (null != this.Code_Button_Parent.children) for (var i = 0; i < this.Code_Button_Parent.children.length; i++) this.Code_Button_Parent.children[i].destroy();
        this.Battle_Controller.Battle_Show();
        this.Battle_Controller.Hero_Script.Skill_Shoot_Bullet();
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  Lovelace_Skill_Picture: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ba20e4MVexFiJmmOaBjzDih", "Lovelace_Skill_Picture");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Code_Rain: cc.Prefab
      },
      start: function start() {
        this.schedule(function() {
          for (var i = 0; i < 3; i++) {
            var node = cc.instantiate(this.Code_Rain);
            node.parent = this.node;
            node.setPosition(5174.214 * Math.random() - 2586.607, 2343.234 * Math.random() - 1171.117);
          }
        }, .2);
      }
    });
    cc._RF.pop();
  }, {} ],
  Lovelace: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0dbc0qRQiRBmL0m/QOkLZae", "Lovelace");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Skill_Button_Number: 0,
        Skill_Bullet: cc.Prefab,
        Skill_Bullet_Shoot_Schedule: cc.Schedule,
        Hidden_Particle_Parent: cc.Node,
        Hidden_Particle: cc.ParticleSystem,
        Hidden_Code_Rain: cc.Prefab,
        Hidden_Code_Rain_Schedule: cc.Schedule,
        Code_Rain_Particle_Parent: cc.Node,
        Hidden_Wait_Schedule: cc.Schedule,
        Hidden_Stay_Schedule: cc.Schedule,
        Code_Rain_Schedule: cc.Schedule,
        Hidden_Label: cc.Node,
        Is_Hidden: 0,
        Hidden_Time: 8
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Battle_Controller.Hero_Star >= 3 && (this.Hidden_Time = 12);
        this.Skill_Bullet_Shoot_Schedule = function() {
          if (this.Skill_Button_Number <= 0) this.unschedule(this.Skill_Bullet_Shoot_Schedule); else {
            this.Skill_Button_Number--;
            this.Battle_Controller.Camera_Shake_Shoot();
            var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
            var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
            Attack_Smoke.parent = this.Particle_Parent;
            Attack_Fire_particle.parent = this.Particle_Parent;
            Attack_Smoke.x = this.node.x + 80;
            Attack_Fire_particle.x = this.node.x + 30;
            Attack_Smoke.y = this.node.y;
            Attack_Fire_particle.y = this.node.y;
            var Bullet = cc.instantiate(this.Skill_Bullet);
            Bullet.parent = this.Bullet_Parent;
            Bullet.x = this.node.x;
            Bullet.y = this.node.y;
            Bullet.angle = 181 * Math.random() + 90;
            this.Hero_Common.Count_Is_Skill = 1;
            this.Hero_Common.Attack_Count();
            this.Hero_Common.Bullet_Scale_Count();
            Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
            Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
            var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
            Bullet_Script.Battle_Controller = this.Battle_Controller;
            Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
            Bullet_Script.Attack = this.Hero_Common.Attack_Result;
            Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
            Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
            var Lovelace_Skill_Bullet = Bullet.getComponent("Lovelace_Skill_Bullet");
            Lovelace_Skill_Bullet.Battle_Controller = this.Battle_Controller;
            this.Battle_Controller.Hero_Star >= 4 && (Lovelace_Skill_Bullet.Can_Weak = 1);
            if (this.Battle_Controller.Hero_Star >= 5) {
              var Bullet = cc.instantiate(this.Skill_Bullet);
              Bullet.parent = this.Bullet_Parent;
              Bullet.x = this.node.x;
              Bullet.y = this.node.y;
              Bullet.angle = 181 * Math.random() + 90;
              this.Hero_Common.Count_Is_Skill = 1;
              this.Hero_Common.Attack_Count();
              this.Hero_Common.Bullet_Scale_Count();
              Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
              Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
              var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
              Bullet_Script.Battle_Controller = this.Battle_Controller;
              Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
              Bullet_Script.Attack = this.Hero_Common.Attack_Result;
              Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
              Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
              var Lovelace_Skill_Bullet = Bullet.getComponent("Lovelace_Skill_Bullet");
              Lovelace_Skill_Bullet.Battle_Controller = this.Battle_Controller;
              Lovelace_Skill_Bullet.Can_Weak = 1;
            }
          }
        };
        this.Hidden_Wait_Schedule = function() {
          this.Is_Hidden = 1;
          this.Can_Injured--;
          this.Hidden_Particle.emissionRate = 999;
          this.schedule(this.Hidden_Code_Rain_Schedule, .5);
          this.scheduleOnce(this.Hidden_Stay_Schedule, this.Hidden_Time);
          cc.tween(this.Hidden_Label).to(.2, {
            opacity: 255
          }).start();
        };
        this.Hidden_Code_Rain_Schedule = function() {
          var node = cc.instantiate(this.Hidden_Code_Rain);
          node.parent = this.Code_Rain_Particle_Parent;
          node.setPosition(100 * Math.random() - 50, -34.893);
        };
        this.Hidden_Stay_Schedule = function() {
          this.Is_Hidden = 0;
          this.Can_Injured++;
          this.Hidden_Particle.emissionRate = 0;
          this.unschedule(this.Hidden_Code_Rain_Schedule);
          this.scheduleOnce(this.Hidden_Wait_Schedule, 10);
          cc.tween(this.Hidden_Label).to(.2, {
            opacity: 0
          }).start();
        };
        this.scheduleOnce(this.Hidden_Wait_Schedule, 10);
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Battle_Audio_Controller.Attack(0, .1);
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Script.Set_Speed();
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 30;
        Attack_Smoke.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Hero_Common.Skill_Picture();
      },
      Skill_Shoot: function Skill_Shoot() {
        this.Battle_Controller.JoyStick.Joytick_Back();
        1 == this.Is_Attacking && this.Back_To_Stay();
        this.Battle_Controller.Battle_Hide();
        this.Battle_Controller.Lovelace_Skill_Menu.active = true;
        this.Battle_Controller.Lovelace_Skill_Menu_Script.Lovelace_Skill_Menu_Start();
      },
      Skill_Shoot_Bullet: function Skill_Shoot_Bullet() {
        if (this.Skill_Button_Number > 0) {
          this.unschedule(this.Skill_Bullet_Shoot_Schedule);
          this.schedule(this.Skill_Bullet_Shoot_Schedule, .3);
        }
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        this.Battle_Controller.Hero_Star >= 2 && 1 == this.Is_Hidden && "Enemy_Bullet" == otherCollider.node.group && this.Shoot_Skill_Bullet();
      },
      Shoot_Skill_Bullet: function Shoot_Skill_Bullet() {
        this.Battle_Controller.Camera_Shake_Shoot();
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 30;
        Attack_Smoke.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
        var Bullet = cc.instantiate(this.Skill_Bullet);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        Bullet.angle = 181 * Math.random() + 90;
        this.Hero_Common.Count_Is_Skill = -1;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Lovelace_Skill_Bullet = Bullet.getComponent("Lovelace_Skill_Bullet");
        Lovelace_Skill_Bullet.Battle_Controller = this.Battle_Controller;
        this.Battle_Controller.Hero_Star >= 4 && (Lovelace_Skill_Bullet.Can_Weak = 1);
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Luxue_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2976cdh1qdEb7PIZ91ugQtB", "Luxue_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Luxue_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "36a23g/M1dK+7EkMWJ3g3mI", "Luxue_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Luxue").getComponent("Luxue");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Luxue_Bagua_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "06635VDe+hEY5BWUiT/GPHj", "Luxue_Bagua_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Is_4_Star: 0
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy" == otherCollider.node.group && 1 == this.Is_4_Star) {
          this.Hero_Bullet_Common.Battle_Controller.Probability_Result_Create();
          if (this.Hero_Bullet_Common.Battle_Controller.Probability_Result < 50) {
            var a = Math.floor(3 * Math.random());
            switch (a) {
             case 0:
              otherCollider.node.getComponent("Enemy_Common").Start_Fire();
              break;

             case 1:
              otherCollider.node.getComponent("Enemy_Common").Start_Ice();
              break;

             case 2:
              otherCollider.node.getComponent("Enemy_Common").To_Weak();
            }
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Luxue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "178d3yeL0NNWJhRWBJwrssF", "Luxue");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        To_Bagua_Number: 0,
        Attack_Bagua: cc.Prefab,
        Bagua_Bullet_Black: cc.Prefab,
        Bagua_Bullet_White: cc.Prefab,
        Ink_Black: cc.Prefab,
        Ink_White: cc.Prefab,
        Fu: [ cc.Prefab ],
        Fu_Bagua: cc.Prefab,
        Is_4_Star: 0
      },
      Start_Set: function Start_Set() {
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.schedule(function() {
          var Fu = cc.instantiate(this.Fu[0]);
          Fu.parent = this.Battle_Controller.Fu_Parent;
          Fu.setPosition(Math.floor(1001 * Math.random() - 1500), Math.floor(1200 * Math.random() - 600));
          var Script = Fu.getComponent("Fu_Common");
          Script.Battle_Controller = this.Battle_Controller;
        }, 5);
        this.Battle_Controller.Hero_Star >= 2 && (this.Battle_Controller.Fu_Attack_Addition += 50);
        this.Battle_Controller.Hero_Star >= 3 && this.schedule(function() {
          var Fu = cc.instantiate(this.Fu[4]);
          Fu.parent = this.Battle_Controller.Fu_Parent;
          Fu.setPosition(Math.floor(1001 * Math.random() - 1500), Math.floor(1200 * Math.random() - 600));
          var Script = Fu.getComponent("Fu_Common");
          Script.Battle_Controller = this.Battle_Controller;
        }, 5);
        this.Battle_Controller.Hero_Star >= 5 && this.schedule(function() {
          var Fu = cc.instantiate(this.Fu_Bagua);
          Fu.parent = this.Battle_Controller.Fu_Parent;
          Fu.setPosition(Math.floor(1001 * Math.random() - 1500), Math.floor(1200 * Math.random() - 600));
          var Script = Fu.getComponent("Fu_Common");
          Script.Battle_Controller = this.Battle_Controller;
        }, 5);
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y - 10;
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
        this.To_Bagua_Number++;
        if (this.To_Bagua_Number >= 4) {
          this.Battle_Controller.Camera_Shake_Medium();
          this.To_Bagua_Number = 0;
          var Bullet = cc.instantiate(this.Attack_Bagua);
          Bullet.parent = this.Battle_Controller.Particle_Parent_Back;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet = cc.instantiate(this.Ink_White);
          Bullet.parent = this.Battle_Controller.Particle_Parent_Back;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y + 100;
          var Bullet = cc.instantiate(this.Ink_Black);
          Bullet.parent = this.Battle_Controller.Particle_Parent_Back;
          Bullet.x = this.node.x + 50;
          Bullet.y = this.node.y - 100;
          var Bullet = cc.instantiate(this.Ink_White);
          Bullet.parent = this.Battle_Controller.Particle_Parent_Back;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y + 100;
          var Bullet = cc.instantiate(this.Ink_Black);
          Bullet.parent = this.Battle_Controller.Particle_Parent_Back;
          Bullet.x = this.node.x + 50;
          Bullet.y = this.node.y - 100;
          var Bullet = cc.instantiate(this.Bagua_Bullet_White);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y + 100;
          Bullet.angle = 90;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          if (this.Battle_Controller.Hero_Star >= 4) {
            var Luxue_Yinyang_Bullet = Bullet.getComponent("Luxue_Bagua_Bullet");
            null != Luxue_Yinyang_Bullet && (Luxue_Yinyang_Bullet.Is_4_Star = 1);
          }
          var Bullet = cc.instantiate(this.Bagua_Bullet_Black);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y - 100;
          Bullet.angle = -90;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          if (this.Battle_Controller.Hero_Star >= 4) {
            var Luxue_Yinyang_Bullet = Bullet.getComponent("Luxue_Bagua_Bullet");
            null != Luxue_Yinyang_Bullet && (Luxue_Yinyang_Bullet.Is_4_Star = 1);
          }
        }
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Hero_Common.Skill_Picture();
      },
      Skill_Shoot: function Skill_Shoot() {
        for (var i = 0; i < this.Fu.length; i++) {
          var Fu = cc.instantiate(this.Fu[i]);
          Fu.parent = this.Battle_Controller.Fu_Parent;
          Fu.setPosition(Math.floor(1001 * Math.random() - 1500), Math.floor(1200 * Math.random() - 600));
          var Script = Fu.getComponent("Fu_Common");
          Script.Battle_Controller = this.Battle_Controller;
        }
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Main_Controller: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e2c3ax7gidEzY5YN1w/CnXL", "Main_Controller");
    "use strict";
    window.From_Where_To_Main = 0;
    var Level_Select_Controller = require("Level_Select_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Main_Stage: 0,
        Will_Go: 0,
        Main_UI: cc.Node,
        Ready_Parent: cc.Node,
        Ready_Bg: cc.Node,
        Level_Select_Controller: Level_Select_Controller
      },
      onLoad: function onLoad() {
        cc.sp.autoSwitchMaterial = false;
      },
      start: function start() {
        this.Level_Select_Controller.Main_Controller = this;
      },
      Show_Ready_UI: function Show_Ready_UI() {
        this.Ready_Parent.active = true;
        cc.Tween.stopAllByTarget(this.Ready_Bg);
        cc.tween(this.Ready_Bg).to(1, {
          opacity: 255,
          scale: .9
        }, {
          easing: "quadInOut"
        }).to(.5, {
          scale: 1
        }, {
          easing: "quadInOut"
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Level_Select_Controller: "Level_Select_Controller"
  } ],
  Main_UI_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ddbafSoS2hB4pmyC2gpeQHT", "Main_UI_Button");
    "use strict";
    var Main_Controller = require("Main_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Main_Controller: Main_Controller,
        All_Black: cc.Node,
        Load_Progress_Label: cc.Label,
        Load_Bar: cc.Node,
        Main_Parent: cc.Node,
        Main_Particle: cc.Node,
        Scene_Name: [ cc.String ],
        Battle_Button: cc.Node,
        Battle_Button_Image: cc.Node,
        Athletics_Button: cc.Node,
        Athletics_Button_Image: cc.Node,
        Shop_Button: cc.Node,
        Shop_Button_Image: cc.Node,
        Rank_Button: cc.Node,
        Rank_Button_Image: cc.Node,
        Achievement_Button: cc.Node,
        Achievement_Button_Image: cc.Node
      },
      start: function start() {
        this.Battle_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Battle_Button_Image);
            cc.tween(this.Battle_Button_Image).to(.3, {
              scale: .7
            }).to(.2, {
              scale: .8
            }).start();
          }
        }, this);
        this.Battle_Button.on(cc.Node.EventType.TOUCH_END, function(event) {
          var _this = this;
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Battle_Button_Image);
            cc.tween(this.Battle_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: .95
            }).call(function() {
              _this.Main_Controller.Show_Ready_UI();
            }).to(.1, {
              scale: 1
            }).start();
            cc.Tween.stopAllByTarget(this.Main_Controller.Main_UI);
            cc.tween(this.Main_Controller.Main_UI).to(.3, {
              scale: 1.1
            }, {
              easing: "quadInOut"
            }).to(1, {
              scale: .3,
              opacity: 0
            }, {
              easing: "quadInOut"
            }).start();
            this.Main_Controller.Main_Stage = 3;
          }
        }, this);
        this.Battle_Button.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Battle_Button_Image);
            cc.tween(this.Battle_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
        this.Athletics_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Athletics_Button_Image);
            cc.tween(this.Athletics_Button_Image).to(.3, {
              scale: .7
            }).to(.2, {
              scale: .8
            }).start();
          }
        }, this);
        this.Athletics_Button.on(cc.Node.EventType.TOUCH_END, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Athletics_Button_Image);
            cc.tween(this.Athletics_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: .95
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
        this.Athletics_Button.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Athletics_Button_Image);
            cc.tween(this.Athletics_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
        this.Shop_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Shop_Button_Image);
            cc.tween(this.Shop_Button_Image).to(.3, {
              scale: .7
            }).to(.2, {
              scale: .8
            }).start();
          }
        }, this);
        this.Shop_Button.on(cc.Node.EventType.TOUCH_END, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Shop_Button_Image);
            cc.tween(this.Shop_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: .95
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
        this.Shop_Button.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Shop_Button_Image);
            cc.tween(this.Shop_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
        this.Rank_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Rank_Button_Image);
            cc.tween(this.Rank_Button_Image).to(.3, {
              scale: .7
            }).to(.2, {
              scale: .8
            }).start();
          }
        }, this);
        this.Rank_Button.on(cc.Node.EventType.TOUCH_END, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Rank_Button_Image);
            cc.tween(this.Rank_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
        this.Rank_Button.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Rank_Button_Image);
            cc.tween(this.Rank_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
        this.Achievement_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Achievement_Button_Image);
            cc.tween(this.Achievement_Button_Image).to(.3, {
              scale: .7
            }).to(.2, {
              scale: .8
            }).start();
          }
        }, this);
        this.Achievement_Button.on(cc.Node.EventType.TOUCH_END, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Achievement_Button_Image);
            cc.tween(this.Achievement_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
        this.Achievement_Button.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          if (2 == this.Main_Controller.Main_Stage) {
            cc.Tween.stopAllByTarget(this.Achievement_Button_Image);
            cc.tween(this.Achievement_Button_Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
      },
      Go_Other_Scene: function Go_Other_Scene() {
        cc.tween(this.Load_Progress_Label.node).to(1, {
          opacity: 255
        }).start();
        var Progress = 0;
        var Load_Progress_Label = this.Load_Progress_Label;
        var Will_Go_Scene = this.Scene_Name[this.Main_Controller.Will_Go];
        var Load_Bar = this.Load_Bar;
        cc.director.preloadScene(Will_Go_Scene, function(completedCount, totalCount) {
          Load_Bar.scaleX = completedCount / totalCount;
          Progress = completedCount / totalCount * 100;
          Load_Progress_Label.string = Math.floor(Progress) + "%";
        }, function() {
          cc.director.loadScene(Will_Go_Scene);
        });
      }
    });
    cc._RF.pop();
  }, {
    Main_Controller: "Main_Controller"
  } ],
  Mario: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "314c68ZhixFvKZJMLeE8bXQ", "Mario");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Attack: 0,
        Jingjie: 0,
        BoxCollider: cc.BoxCollider,
        Animation: cc.Animation,
        Image: cc.Node,
        Small_Cube: cc.Prefab,
        Is_Big: 0,
        Is_Flower: 0,
        Flower_Shoot_Schedule: cc.Schedule,
        Flower_Bullet: cc.Prefab
      },
      start: function start() {
        this.Flower_Shoot_Schedule = function() {
          var Bullet = cc.instantiate(this.Flower_Bullet);
          Bullet.parent = this.Battle_Controller.Enemy_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y + 100;
          var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
          Bullet_Common_Script.Attack = this.Attack;
          Bullet_Common_Script.Jing_Jie = this.Jingjie;
          Bullet_Common_Script.Battle_Controller = this.Battle_Controller;
          this.Battle_Controller.Hero.x > this.node.x ? Bullet_Common_Script.Ini_Speed = 1e3 : Bullet_Common_Script.Ini_Speed = -1e3;
          Bullet_Common_Script.Ini_Speed_Y = 500;
          Bullet_Common_Script.Set_Speed();
        };
      },
      Born_Finish: function Born_Finish() {
        this.BoxCollider.enabled = true;
        this.Animation.play(this.node.name + "_Stay");
      },
      Jump: function Jump() {
        var _this = this;
        this.Animation.play(this.node.name + "_Jump");
        var Target_X = 2068 * Math.random() - 1034;
        var Target_Y = 650 * Math.random() + 100;
        var Dis_X = Target_X - this.node.x;
        var Time = Math.sqrt(Math.pow(Dis_X, 2) + Math.pow(Target_Y, 2)) / 2e3;
        cc.tween(this.node).by(Time, {
          x: Dis_X / 2,
          y: {
            value: Target_Y,
            easing: "quadOut"
          }
        }).by(Time, {
          x: Dis_X / 2,
          y: {
            value: -1 * Target_Y,
            easing: "quadIn"
          }
        }).call(function() {
          _this.Battle_Controller.Camera_Shake_Small();
          var Smoke = cc.instantiate(_this.Battle_Controller.Enemy_Born_Smoke_White_Coin);
          Smoke.parent = _this.Battle_Controller.Particle_Parent;
          Smoke.x = _this.node.x;
          Smoke.y = _this.node.y - 50;
          var Smoke = cc.instantiate(_this.Battle_Controller.Enemy_Create.Enemy_Create_Smoke_White_Prefab);
          Smoke.parent = _this.Battle_Controller.Particle_Parent;
          Smoke.x = _this.node.x;
          Smoke.y = _this.node.y - 50;
          _this.Animation.play(_this.node.name + "_Stay");
        }).start();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Hero" == other.node.group) {
          var Hero_Script = other.node.getComponent("Hero_Common");
          null != Hero_Script && Hero_Script.Normal_Injured(this.Attack, this.Jingjie);
        } else if ("Enemy" == other.node.group) {
          var Enemy_Script = other.node.getComponent("Enemy_Common");
          if (null != Enemy_Script && 1 == Enemy_Script.Is_Mario_Cube) {
            var Cube = other.node.getComponent("Enemy_Mario_Cube");
            if (null != Cube) {
              this.Battle_Controller.Camera_Shake_Small();
              var Smoke = cc.instantiate(this.Battle_Controller.Enemy_Born_Smoke_White_Coin);
              Smoke.parent = this.Battle_Controller.Particle_Parent;
              Smoke.x = other.node.x;
              Smoke.y = other.node.y;
              var Smoke = cc.instantiate(this.Battle_Controller.Enemy_Create.Enemy_Create_Smoke_White_Prefab);
              Smoke.parent = this.Battle_Controller.Particle_Parent;
              Smoke.x = other.node.x;
              Smoke.y = other.node.y;
              for (var i = 0; i < 4; i++) {
                var Bullet = cc.instantiate(this.Small_Cube);
                Bullet.parent = this.Battle_Controller.Enemy_Bullet_Parent;
                Bullet.x = other.node.x;
                Bullet.y = other.node.y;
                Bullet.angle = Math.floor(360 * Math.random());
                var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
                Bullet_Common_Script.Attack = this.Attack;
                Bullet_Common_Script.Jing_Jie = this.Jingjie;
                Bullet_Common_Script.Battle_Controller = this.Battle_Controller;
                Bullet_Common_Script.Ini_Speed = Math.floor(1500 * Math.random() - 500);
                Bullet_Common_Script.Ini_Speed_Y = Math.floor(2e3 * Math.random() - 1e3);
                Bullet_Common_Script.Set_Speed();
                var RigidBody = Bullet.getComponent(cc.RigidBody);
                RigidBody.angularVelocity = Math.floor(720 * Math.random() - 360);
                var Bullet = cc.instantiate(this.Small_Cube);
                Bullet.parent = this.Battle_Controller.Enemy_Bullet_Parent;
                Bullet.x = other.node.x;
                Bullet.y = other.node.y;
                Bullet.angle = Math.floor(360 * Math.random());
                var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
                Bullet_Common_Script.Attack = this.Attack;
                Bullet_Common_Script.Jing_Jie = this.Jingjie;
                Bullet_Common_Script.Battle_Controller = this.Battle_Controller;
                Bullet_Common_Script.Ini_Speed = Math.floor(-1500 * Math.random() + 500);
                Bullet_Common_Script.Ini_Speed_Y = Math.floor(2e3 * Math.random() - 1e3);
                Bullet_Common_Script.Set_Speed();
                var RigidBody = Bullet.getComponent(cc.RigidBody);
                RigidBody.angularVelocity = Math.floor(720 * Math.random() - 360);
              }
              1 == Enemy_Script.Mario_Cube_Type ? 0 == this.Is_Big && this.To_Big() : 2 == Enemy_Script.Mario_Cube_Type && 0 == this.Is_Flower && this.To_Flower();
              other.node.destroy();
            }
          }
        }
      },
      To_Big: function To_Big() {
        var _this2 = this;
        this.Is_Big = 1;
        cc.tween(this.node).delay(.05).call(function() {
          _this2.node.scale = cc.v2(1, 1);
        }).delay(.05).call(function() {
          _this2.node.scale = cc.v2(.3, .3);
        }).delay(.1).call(function() {
          _this2.node.scale = cc.v2(1, 1);
        }).delay(.1).call(function() {
          _this2.node.scale = cc.v2(.3, .3);
        }).delay(.1).call(function() {
          _this2.node.scale = cc.v2(1, 1);
        }).delay(.2).call(function() {
          _this2.node.scale = cc.v2(.3, .3);
        }).delay(.2).call(function() {
          _this2.node.scale = cc.v2(1, 1);
        }).start();
        this.scheduleOnce(function() {
          var _this3 = this;
          cc.tween(this.node).to(1, {
            scale: .3
          }).call(function() {
            _this3.Is_Big = 0;
          }).start();
        }, 10);
      },
      To_Flower: function To_Flower() {
        this.Is_Flower = 1;
        this.schedule(this.Flower_Shoot_Schedule, .5);
        cc.tween(this.Image).to(1, {
          color: cc.color(255, 221, 141)
        }).start();
        this.scheduleOnce(function() {
          var _this4 = this;
          cc.tween(this.Image).to(1, {
            color: cc.color(255, 255, 255)
          }).call(function() {
            _this4.unschedule(_this4.Flower_Shoot_Schedule);
            _this4.Is_Flower = 0;
          }).start();
        }, 10);
      }
    });
    cc._RF.pop();
  }, {} ],
  Meixi_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6c7efA1QgZADbUe58Qe/SJO", "Meixi_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Bo: cc.Prefab,
        Is_Xuliing: 1,
        Wait_X: 0
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      update: function update() {
        if (1 == this.Is_Xuliing) {
          this.node.x = this.Wait_X;
          this.node.y = 0;
        }
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy" == otherCollider.node.group) {
          var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
          Hit_Efffect.parent = this.Particle_Parent;
          Hit_Efffect.x = this.node.x + 20;
          Hit_Efffect.y = this.node.y;
          var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
          Hit_Particle.parent = this.Particle_Parent;
          Hit_Particle.x = this.node.x + 20;
          Hit_Particle.y = this.node.y;
          var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
          Hit_Smoke.parent = this.Particle_Parent;
          Hit_Smoke.x = this.node.x + 20;
          Hit_Smoke.y = this.node.y;
          var Hit_Smoke = cc.instantiate(this.Bo);
          Hit_Smoke.parent = this.Particle_Parent;
          Hit_Smoke.x = this.node.x + 20;
          Hit_Smoke.y = this.node.y;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Meixi_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b8ea231qv5O1JcNfSruPbgH", "Meixi_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node,
        Hero_Common: cc.Node,
        Meixi_Animation: cc.Animation,
        Xuli_Speed: 5,
        Is_Playing_Xuli: 0
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Meixi").getComponent("Meixi");
        this.Meixi_Animation = this.Hero.node.getComponent(cc.Animation);
        this.Hero_Common = cc.find("Canvas/Hero/Meixi").getComponent("Hero_Common");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          1 == this.Hero.Can_Attack && this.Hero.Start_Xuli_Check(this.Xuli_Speed, this);
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Cancle_Touch();
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Cancle_Touch();
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        if (1 == this.Hero_Common.Is_Xuliing) {
          this.Hero.Hero_Common.Attack_Count();
          this.Hero.Xuli_Bullet_Common.Attack = Math.ceil(this.Hero.Hero_Common.Attack_Result * (1 + 4 * this.Hero_Common.Xuli_Progress / 100));
          this.Hero_Common.End_Xuli();
          this.Is_Playing_Xuli = 0;
          this.Meixi_Animation.play("Meixi_Attack");
        }
      },
      Xuli_Effect: function Xuli_Effect(Xuli_Progress) {
        if (0 == this.Is_Playing_Xuli) {
          this.Meixi_Animation.play("Meixi_Xuli");
          this.Is_Playing_Xuli = 1;
        }
        if (null != this.Hero.Xuliing_Bullet && "" != this.Hero.Xuliing_Bullet.name) {
          this.Hero.Xuliing_Bullet.scaleX = (100 * this.Hero_Common.Bullet_Scale_Result + 10 * Xuli_Progress) / 100;
          this.Hero.Xuliing_Bullet.scaleY = (100 * this.Hero_Common.Bullet_Scale_Result + 10 * Xuli_Progress) / 100;
        }
        null != this.Hero.Meixi_Attack_Bullet_Script && "" != this.Hero.Meixi_Attack_Bullet_Script.name && (this.Hero.Meixi_Attack_Bullet_Script.Wait_X = 2 * Xuli_Progress);
        this.Hero_Common.Xuli_Tiao_Blue.scaleX = Xuli_Progress / 100;
      }
    });
    cc._RF.pop();
  }, {} ],
  "Meixi_Next_Xiaoguanqia_Extra_Check - 001": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "608eaqVfDxMFZsvgGyS3R7z", "Meixi_Next_Xiaoguanqia_Extra_Check - 001");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Jiejie_Meixi: cc.Node
      },
      start: function start() {},
      Check: function Check() {
        this.Jiejie_Meixi.Restore_Addition();
      }
    });
    cc._RF.pop();
  }, {} ],
  Meixi_Next_Xiaoguanqia_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5c303lh1pEl7bo3rgzU9iL", "Meixi_Next_Xiaoguanqia_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Jiejie_Meixi: cc.Node
      },
      start: function start() {},
      Check: function Check() {
        this.Jiejie_Meixi.Restore_Addition();
      }
    });
    cc._RF.pop();
  }, {} ],
  Meixi_Normal_Attack_After_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1ce5JGVyZBGIccQoi+1hsH", "Meixi_Normal_Attack_After_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Jiejie_Meixi: cc.Node
      },
      start: function start() {},
      Check: function Check() {
        this.Jiejie_Meixi.Restore_Addition();
      }
    });
    cc._RF.pop();
  }, {} ],
  Meixi_Skill_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "03761+tOBxHiIJ0d5l9X5Fr", "Meixi_Skill_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Bo_Prefab: cc.Prefab,
        Hero_Bullet_Common: Hero_Bullet_Common
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        cc.tween(this.node).to(.01, {
          scaleX: 4 * this.node.scaleX,
          scaleY: 4 * this.node.scaleY
        }).start();
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Bo_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy_Bullet" == otherCollider.node.group) otherCollider.node.getComponent("Enemy_Bullet_Common").Be_Destroy(); else if ("Enemy" == otherCollider.node.group) {
          this.Hero_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
          Hit_Efffect.parent = this.Particle_Parent;
          Hit_Efffect.x = this.node.x + 700;
          Hit_Efffect.y = this.node.y;
          var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
          Hit_Particle.parent = this.Particle_Parent;
          Hit_Particle.x = this.node.x + 700;
          Hit_Particle.y = this.node.y;
          var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
          Hit_Smoke.parent = this.Particle_Parent;
          Hit_Smoke.x = this.node.x + 700;
          Hit_Smoke.y = this.node.y;
          var Hit_Smoke = cc.instantiate(this.Bo_Prefab);
          Hit_Smoke.parent = this.Particle_Parent;
          Hit_Smoke.x = this.node.x + 700;
          Hit_Smoke.y = this.node.y;
        }
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Meixi_Weak_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "76968qJv4tHB7FI67pV/9Yk", "Meixi_Weak_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Probability: 10
      },
      Check: function Check(Enemy) {
        this.Battle_Controller.Probability_Result_Create();
        var a = this.Battle_Controller.Probability_Result;
        a <= this.Probability && Enemy.To_Weak();
      }
    });
    cc._RF.pop();
  }, {} ],
  Meixi: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "22c4992PaFOHozAHVqP0LYr", "Meixi");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Skill_Bullet_Prefab: cc.Prefab,
        Xuliing_Bullet: cc.Node,
        Xuli_Bullet_Common: cc.Node,
        Meixi_Attack_Bullet_Script: cc.Node,
        Meixi_Weak_Hit_Extra_Check_Prefab: cc.Prefab,
        Old_Camera_X: 0,
        Old_Camera_Y: 0,
        Skill_Follow_Particle: cc.Prefab,
        Skill_Follow_Champion: cc.Prefab,
        Skill_Follow_Football: cc.Prefab,
        Skill_Follow_Smoke: cc.Prefab,
        Bo_Absorb: cc.Prefab,
        Jiejie_Meixi: cc.Prefab,
        Meixi_Normal_Attack_After_Extra_Check: cc.Prefab,
        Meixi_Next_Xiaoguanqia_Extra_Check: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Create_Hit_Extra_Check();
        this.Battle_Controller.Hero_Star >= 2 && (this.Battle_Controller.Xuli_Speed_Addition += 100);
        this.Battle_Controller.Hero_Star >= 3 && (this.Battle_Controller.Common_Bullet_Scale_Addition += 100);
        this.Battle_Controller.Hero_Star >= 4 && (this.Battle_Controller.Bullet_Hp_Addition += 3);
        if (this.Battle_Controller.Hero_Star >= 5) {
          var Jiejie = cc.instantiate(this.Jiejie_Meixi);
          Jiejie.parent = this.Hero_Common.Jiejie_Parent;
          Jiejie.setPosition(0, 0);
          var Jiejie_Crript = Jiejie.getComponent("Jiejie_Meixi");
          Jiejie_Crript.Battle_Controller = this.Battle_Controller;
          var Meixi_Next_Xiaoguanqia_Extra_Check = cc.instantiate(this.Meixi_Next_Xiaoguanqia_Extra_Check);
          Meixi_Next_Xiaoguanqia_Extra_Check.parent = this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.node;
          var Meixi_Next_Xiaoguanqia_Extra_Check_Script = Meixi_Next_Xiaoguanqia_Extra_Check.getComponent("Meixi_Next_Xiaoguanqia_Extra_Check");
          this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.Next_Xiaoguanqia_Extra_Check_Script.push(Meixi_Next_Xiaoguanqia_Extra_Check_Script);
          Meixi_Next_Xiaoguanqia_Extra_Check_Script.Jiejie_Meixi = Jiejie_Crript;
          var Meixi_Normal_Attack_After_Extra_Check = cc.instantiate(this.Meixi_Normal_Attack_After_Extra_Check);
          Meixi_Normal_Attack_After_Extra_Check.parent = this.Battle_Controller.Normal_Attack_After_Extra_Check.node;
          var Meixi_Normal_Attack_After_Extra_Check_Script = Meixi_Normal_Attack_After_Extra_Check.getComponent("Meixi_Normal_Attack_After_Extra_Check");
          this.Battle_Controller.Normal_Attack_After_Extra_Check.Normal_Attack_After_Extra_Check_Script.push(Meixi_Normal_Attack_After_Extra_Check_Script);
          Meixi_Normal_Attack_After_Extra_Check_Script.Jiejie_Meixi = Jiejie_Crript;
        }
      },
      Start_Xuli_Check: function Start_Xuli_Check(Xuli_Speed, Xuli_Script) {
        if (0 == this.Is_Doing_Something) {
          this.Battle_Controller.Camera_Shake_Medium();
          this.Is_Doing_Something++;
          this.Xuliing_Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          this.Xuliing_Bullet.parent = this.Hero_Common.Xuli_Bullet_Parent;
          this.Xuliing_Bullet.setPosition(0, 0);
          this.Hero_Common.Start_Xuli(Xuli_Speed, Xuli_Script);
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Xuli_Bullet_Common = this.Xuliing_Bullet.getComponent("Hero_Bullet_Common");
          this.Xuli_Bullet_Common.Battle_Controller = this.Battle_Controller;
          this.Xuli_Bullet_Common.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          this.Xuli_Bullet_Common.Attack = this.Hero_Common.Attack_Result;
          this.Xuli_Bullet_Common.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          this.Xuli_Bullet_Common.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          this.Hero_Common.Bullet_Scale_Count();
          this.Xuliing_Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          this.Xuliing_Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          this.Meixi_Attack_Bullet_Script = this.Xuliing_Bullet.getComponent("Meixi_Attack_Bullet");
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Camera_Shake_Medium();
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
        if (null != this.Xuliing_Bullet && "" != this.Xuliing_Bullet.name) {
          this.Xuliing_Bullet.parent = this.Bullet_Parent;
          var RigidBody = this.Xuliing_Bullet.getComponent(cc.RigidBody);
          var Bullet_Common = this.Xuliing_Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Common.Ini_Speed = 5e4;
          Bullet_Common.Set_Speed();
          RigidBody.enabledContactListener = true;
          var PhysicsBoxCollider = this.Xuliing_Bullet.getComponent(cc.PhysicsBoxCollider);
          PhysicsBoxCollider.enabled = true;
          this.Xuliing_Bullet.getComponent("Meixi_Attack_Bullet").Is_Xuliing = 0;
        }
        for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Is_Doing_Something++;
        this.Can_Move--;
        this.Hero_Common.Skill_Picture();
        this.Battle_Controller.Stop_Enemy_Bullet();
        this.Battle_Controller.Stop_Enemy_Move();
      },
      Create_Skill_Particle: function Create_Skill_Particle() {
        this.Old_Camera_X = this.Battle_Controller.Camera.node.x;
        this.Old_Camera_Y = this.Battle_Controller.Camera.node.y;
        cc.Tween.stopAllByTarget(this.Battle_Controller.Camera.node);
        cc.tween(this.Battle_Controller.Camera.node).to(.5, {
          position: cc.v2(this.node.x, this.node.y)
        }, {
          easing: "quadOut"
        }).start();
        cc.Tween.stopAllByTarget(this.Battle_Controller.Camera);
        cc.tween(this.Battle_Controller.Camera).to(.5, {
          zoomRatio: 2
        }, {
          easing: "quadOut"
        }).start();
        this.schedule(function() {
          var Particle = cc.instantiate(this.Hero_Common.Battle_Controller.Skill_Follow_Particle);
          Particle.parent = this.Hero_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("Skill_Follow_Particle");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 100;
          Particle_Script.Target_Shifting_Y = 51.622;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Skill_Follow_Champion);
          Particle.parent = this.Hero_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("Boss_Absorb_Item");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 100;
          Particle_Script.Target_Shifting_Y = 51.622;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Skill_Follow_Football);
          Particle.parent = this.Hero_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("Boss_Absorb_Item");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 100;
          Particle_Script.Target_Shifting_Y = 51.622;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Skill_Follow_Smoke);
          Particle.parent = this.Hero_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("Skill_Follow_Smoke");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 100;
          Particle_Script.Target_Shifting_Y = 51.622;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Hero_Common.Battle_Controller.Skill_Follow_Particle);
          Particle.parent = this.Hero_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("Skill_Follow_Particle");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 100;
          Particle_Script.Target_Shifting_Y = 51.622;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Skill_Follow_Champion);
          Particle.parent = this.Hero_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("Boss_Absorb_Item");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 100;
          Particle_Script.Target_Shifting_Y = 51.622;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Skill_Follow_Football);
          Particle.parent = this.Hero_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("Boss_Absorb_Item");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 100;
          Particle_Script.Target_Shifting_Y = 51.622;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Skill_Follow_Smoke);
          Particle.parent = this.Hero_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(4001 * Math.random() - 2e3), this.node.y + Math.floor(4001 * Math.random() - 2e3));
          var Particle_Script = Particle.getComponent("Skill_Follow_Smoke");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 100;
          Particle_Script.Target_Shifting_Y = 51.622;
          Particle_Script.Start_Set();
        }, .025, 20, 0);
        this.schedule(function() {
          var Particle = cc.instantiate(this.Bo_Absorb);
          Particle.parent = this.Hero_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + 100, this.node.y + 51.622);
        }, .05, 3, 0);
      },
      Skill_Shoot: function Skill_Shoot() {
        this.Animation.play("Meixi_Skill");
        this.Battle_Controller.Camera_Shake_Shoot();
        this.Can_Injured--;
        this.Battle_Controller.Camera_Can_Follow = 0;
        this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
        this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 200));
      },
      Skill_Shoot_Ball: function Skill_Shoot_Ball() {
        this.Battle_Controller.Camera_Shake_Medium();
        this.Hero_Common.Count_Is_Skill = 1;
        this.Hero_Common.Attack_Count();
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
        var Bullet = cc.instantiate(this.Skill_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 294.291;
        Bullet.y = this.node.y + 34.869;
        this.Hero_Common.Count_Is_Skill = 1;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        cc.Tween.stopAllByTarget(this.Battle_Controller.Camera);
        cc.tween(this.Battle_Controller.Camera).to(.05, {
          zoomRatio: .5
        }, {
          easing: "quadOut"
        }).to(.1, {
          zoomRatio: 1.3
        }, {
          easing: "quadOut"
        }).to(.2, {
          zoomRatio: .8
        }, {
          easing: "quadOut"
        }).to(1, {
          zoomRatio: 1
        }, {
          easing: "quadOut"
        }).start();
        this.Battle_Controller.Camera_Follow.Follow_Start();
        this.Battle_Controller.Camera_Can_Follow = 1;
        cc.Tween.stopAllByTarget(this.Battle_Controller.Camera.node);
        cc.tween(this.Battle_Controller.Camera.node).to(.2, {
          position: cc.v2(this.Old_Camera_X, this.Old_Camera_Y)
        }, {
          easing: "quadOut"
        }).start();
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      },
      Skill_End: function Skill_End() {
        this.Back_To_Stay();
        this.Battle_Controller.Restore_Enemy_Bullet();
        this.Battle_Controller.Restore_Enemy_Move();
        this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
        this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 0));
        this.Can_Move++;
        this.Can_Injured++;
      },
      Create_Hit_Extra_Check: function Create_Hit_Extra_Check() {
        var Extra_Item = cc.instantiate(this.Meixi_Weak_Hit_Extra_Check_Prefab);
        Extra_Item.parent = this.Battle_Controller.Bullet_Hit_Extra_Check.node;
        var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script.push(Extra_Item_Script);
        Extra_Item_Script.Battle_Controller = this.Battle_Controller;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Motion_Streak_Script: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e13a8Ar8lJBBZhmA5N4zgCN", "Motion_Streak_Script");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Destroy_Time: 1.2
      },
      Wait_Destroy: function Wait_Destroy() {
        this.schedule(function() {
          this.node.destroy();
        }, this.Destroy_Time);
      }
    });
    cc._RF.pop();
  }, {} ],
  Mountain_1: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a716ci+b3ZJG5ETsbxhn3qi", "Mountain_1");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      update: function update(dt) {
        this.node.x -= .5;
        this.node.x <= -1607.988 && (this.node.x = 1565.584);
      }
    });
    cc._RF.pop();
  }, {} ],
  Mountain_2: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e0bf1utBLdMP5+0zLPOXpnb", "Mountain_2");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      update: function update(dt) {
        this.node.x -= .2;
        this.node.x <= -2563.106 && (this.node.x = 2557.151);
      }
    });
    cc._RF.pop();
  }, {} ],
  Move_Item: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96b35UUlklFhYdG+sDlAWYA", "Move_Item");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().to(15 * Math.random() + 15, {
          position: cc.v2(-8e3, this.node.y)
        }).call(function() {
          _this.node.x = 8e3;
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Mozu_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e055aUW7H1B/pYTyUhgkSHV", "Mozu_Attack_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Shoot_Particle: cc.Prefab,
        RigidBody: cc.RigidBody,
        PhysicsBoxCollider: cc.PhysicsBoxCollider,
        Sprite: cc.Sprite,
        Sprite_Frame: [ cc.SpriteFrame ]
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Hero_Bullet_Common.Battle_Controller.Battle_Audio_Controller.Attack(4, .5);
        this.Sprite.spriteFrame = this.Sprite_Frame[Math.floor(3 * Math.random())];
      },
      Go: function Go() {
        this.Hero_Bullet_Common.Battle_Controller.Battle_Audio_Controller.Other(3, 1);
        this.RigidBody.linearVelocity = cc.v2(3e4, 0);
        this.PhysicsBoxCollider.enabled = true;
        this.Hero_Bullet_Common.Battle_Controller.Camera_Shake_Shoot();
        var Hit_Smoke = cc.instantiate(this.Shoot_Particle);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x - 60;
        Hit_Smoke.y = this.node.y;
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Mozu_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "86ceakYUOJHIaLlLepXd+WR", "Mozu_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Mozu").getComponent("Mozu");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Mozu_Blackhole_Star: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5b7a0X6FAlETKlbW5wHMs4e", "Mozu_Blackhole_Star");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Ini_X: 0,
        Ini_Y: 0,
        Target_X: 0,
        Target_Y: 0
      },
      start: function start() {
        this.Ini_X = this.node.x;
        this.Ini_Y = this.node.y;
        this.schedule(function() {
          this.Target_X = 4 * Math.random() - 2;
          this.Target_Y = 4 * Math.random() - 2;
          this.node.x = this.Ini_X + this.Target_X;
          this.node.y = this.Ini_Y + this.Target_Y;
        }, .01);
      }
    });
    cc._RF.pop();
  }, {} ],
  Mozu_Blackhole_Time_Circle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8b022Kvev5POIjsU5ySlM2A", "Mozu_Blackhole_Time_Circle");
    "use strict";
    var Mozu_Blackhole = require("Mozu_Blackhole");
    cc.Class({
      extends: cc.Component,
      properties: {
        Mozu_Blackhole: Mozu_Blackhole
      },
      End: function End() {
        this.Mozu_Blackhole.Time_End();
      }
    });
    cc._RF.pop();
  }, {
    Mozu_Blackhole: "Mozu_Blackhole"
  } ],
  Mozu_Blackhole: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c79afMrykBIgrXp2VL2E1eW", "Mozu_Blackhole");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Blackhole_X: 0,
        Blackhole_Y: 0,
        Blackhole: cc.Node,
        Animation: cc.Animation,
        Can_Collider: 0,
        Time_Animation: cc.Animation,
        Wind: cc.Node,
        Hero_Target: cc.Node,
        Follow_Schedule: cc.Schedule,
        Follow_Hero_Tween: cc.Tween,
        Label_Animation: cc.Animation,
        Label: cc.Label
      },
      Start_Set: function Start_Set() {
        this.schedule(function() {
          this.Blackhole_X = 6 * Math.random() - 3;
          this.Blackhole_Y = 6 * Math.random() - 3;
          this.Blackhole.x = this.Blackhole_X;
          this.Blackhole.y = this.Blackhole_Y;
        }, .01);
        this.Hero_Target = this.Battle_Controller.Hero;
        this.Follow_Schedule = function() {
          var _this = this;
          this.Follow_Hero_Tween = cc.tween(this.node).call(function() {
            null == _this.Hero_Target && (_this.Hero_Target = _this.Battle_Controller.Hero);
          }).to(.1, {
            position: cc.v2(this.Hero_Target.x + 350, this.Hero_Target.y)
          }, {
            easing: "quadOut"
          }).start();
        };
      },
      Start_Follow: function Start_Follow() {
        this.schedule(this.Follow_Schedule, 1e-4);
      },
      Close: function Close() {
        this.Can_Collider = 0;
        this.unschedule(this.Follow_Schedule);
        this.node.active = false;
      },
      Time_End: function Time_End() {
        this.Can_Collider = 0;
        cc.Tween.stopAllByTarget(this.Wind);
        cc.tween(this.Wind).to(.2, {
          scale: 0
        }).start();
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy_Bullet" == otherCollider.node.group && 1 == this.Can_Collider) {
          var Enemy_Bullet_Common = otherCollider.node.getComponent("Enemy_Bullet_Common");
          if (null != Enemy_Bullet_Common && 0 == Enemy_Bullet_Common.Is_Mozu_Blackhole_Absorbing && 1 == Enemy_Bullet_Common.Can_Be_Mozu_Blackhole_Absorb) {
            Enemy_Bullet_Common.Be_Mozu_Blackhole_Absorb(this.node.x, this.node.y);
            this.Battle_Controller.Hero_Script.Absorb_Number += 1;
            this.Label.string = this.Battle_Controller.Hero_Script.Absorb_Number;
            this.Label_Animation.play();
          }
        }
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Enemy_Bullet" == other.node.group && 1 == this.Can_Collider) {
          var Enemy_Bullet_Common = other.node.getComponent("Enemy_Bullet_Common");
          if (null != Enemy_Bullet_Common && 0 == Enemy_Bullet_Common.Is_Mozu_Blackhole_Absorbing && 1 == Enemy_Bullet_Common.Can_Be_Mozu_Blackhole_Absorb) {
            Enemy_Bullet_Common.Be_Mozu_Blackhole_Absorb(this.node.x, this.node.y);
            this.Battle_Controller.Hero_Script.Absorb_Number += 1;
            this.Label.string = this.Battle_Controller.Hero_Script.Absorb_Number;
            this.Label_Animation.play();
          }
        }
      },
      Shoot: function Shoot() {
        this.Battle_Controller.Hero_Script.Shoot_Dragon_Bullet();
      },
      Shoot_End_Check: function Shoot_End_Check() {
        this.Battle_Controller.Hero_Script.Shoot_Daragon_Number == this.Battle_Controller.Hero_Script.Absorb_Number && this.Battle_Controller.Hero_Script.Blackhole_Shoot_End_Check();
      }
    });
    cc._RF.pop();
  }, {} ],
  Mozu_Move_Start_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19a162ruPxC9bSxH9kWwKe+", "Mozu_Move_Start_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Hero_Script.Is_Moving = 1;
        this.Battle_Controller.Hero_Script.Blackhole_Shoot_Or_Close_Check();
      }
    });
    cc._RF.pop();
  }, {} ],
  Mozu_Skill_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "52496bpDDhExbtyOp6Jk3Y0", "Mozu_Skill_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Particle_Parent: cc.Node,
        Shoot_Particle: cc.Prefab,
        Sprite: cc.Sprite,
        Sprite_Frame: [ cc.SpriteFrame ]
      },
      start: function start() {
        this.Particle_Parent = this.node.parent;
        this.Battle_Controller.Battle_Audio_Controller.Attack(4, .5);
        this.Sprite.spriteFrame = this.Sprite_Frame[Math.floor(3 * Math.random())];
      },
      Go: function Go() {
        var _this = this;
        this.Battle_Controller.Battle_Audio_Controller.Other(3, 1);
        cc.tween(this.node).by(1, {
          position: cc.v2(0, 5e3)
        }).call(function() {
          _this.node.destroy();
        }).start();
        this.Battle_Controller.Camera_Shake_Shoot();
        var Hit_Smoke = cc.instantiate(this.Shoot_Particle);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x;
        Hit_Smoke.y = this.node.y - 60;
      }
    });
    cc._RF.pop();
  }, {} ],
  Mozu_Skill_Light_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ba659f5vXxB7I8TyDxpj/xi", "Mozu_Skill_Light_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Collider: cc.BoxCollider,
        Sprite: cc.Sprite,
        Sprite_Frame: [ cc.SpriteFrame ],
        Animation: cc.Animation,
        Animation_Clip: [ cc.AnimationClip ]
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Hero_Bullet_Common.Battle_Controller.Battle_Audio_Controller.Attack(4, .5);
        this.Hero_Bullet_Common.Battle_Controller.Battle_Audio_Controller.Other(2, 1);
        var a = Math.floor(3 * Math.random());
        this.Sprite.spriteFrame = this.Sprite_Frame[a];
        this.Animation.play(this.Animation_Clip[a]);
      },
      Special_Bullet_Hit: function Special_Bullet_Hit(contact, selfCollider, otherCollider) {
        if ("Enemy" == otherCollider.node.group) {
          var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
          Hit_Efffect.parent = this.Particle_Parent;
          Hit_Efffect.x = otherCollider.node.x;
          Hit_Efffect.y = otherCollider.node.y;
          var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
          Hit_Particle.parent = this.Particle_Parent;
          Hit_Particle.x = otherCollider.node.x;
          Hit_Particle.y = otherCollider.node.y;
          var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
          Hit_Smoke.parent = this.Particle_Parent;
          Hit_Smoke.x = otherCollider.node.x;
          Hit_Smoke.y = otherCollider.node.y;
          this.Hero_Bullet_Common.Enemy_Injured(otherCollider);
        }
      },
      Close_Collider: function Close_Collider() {
        this.Collider.enabled = false;
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Mozu_Start_Attack_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "075c7RCX6lNDo3ZF92D1D+9", "Mozu_Start_Attack_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Hero_Script.Blackhole_Shoot_Or_Close_Check();
      }
    });
    cc._RF.pop();
  }, {} ],
  Mozu_Stop_Attack_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1aaf5MyteFPDZMqiOCKdXjt", "Mozu_Stop_Attack_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Hero_Script.Blackhole_Born_Check();
      }
    });
    cc._RF.pop();
  }, {} ],
  Mozu_Stop_Move_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1788dg6SoxHEL5oKKCI0X3F", "Mozu_Stop_Move_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Hero_Script.Is_Moving = 0;
        this.Battle_Controller.Hero_Script.Blackhole_Born_Check();
      }
    });
    cc._RF.pop();
  }, {} ],
  Mozu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eea2bskvdhHerYs7PTocKpk", "Mozu");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Skill_Bullet: cc.Prefab,
        Skill_Light_Bullet: cc.Prefab,
        Purple_Smoke_Shoot: cc.Prefab,
        Up_Smoke_Shake_Schedule: cc.Schedule,
        Red_Blood_Beam: cc.Prefab,
        Start_Attack_Extra_Check: cc.Prefab,
        Start_Move_Extra_Check: cc.Prefab,
        Stop_Attack_Extra_Check: cc.Prefab,
        Stop_Move_Extra_Check: cc.Prefab,
        Is_Shooting_Dragon_Bullet: 0,
        Is_Moving: 0,
        Is_Absorbing: 0,
        Absorb_Number: 0,
        Shoot_Daragon_Number: 0,
        Dragon_Bullet_Shoot_Schedule: cc.Schedule,
        Dragon_Bullet: cc.Prefab,
        Big_Particle: [ cc.Prefab ]
      },
      Start_Set: function Start_Set() {
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Up_Smoke_Shake_Schedule = function() {
          this.Battle_Controller.Camera_Shake_Medium();
        };
        var Extra_Item = cc.instantiate(this.Start_Move_Extra_Check);
        Extra_Item.parent = this.Battle_Controller.Start_Move_Extra_Check.node;
        var Extra_Item_Script_Move = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Start_Move_Extra_Check.Start_Move_Extra_Check_Script.push(Extra_Item_Script_Move);
        Extra_Item_Script_Move.Battle_Controller = this.Battle_Controller;
        var Extra_Item = cc.instantiate(this.Stop_Move_Extra_Check);
        Extra_Item.parent = this.Battle_Controller.Stop_Move_Extra_Check.node;
        var Extra_Item_Script_Stop = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Stop_Move_Extra_Check.Stop_Move_Extra_Check_Script.push(Extra_Item_Script_Stop);
        Extra_Item_Script_Stop.Battle_Controller = this.Battle_Controller;
        var Extra_Item = cc.instantiate(this.Start_Attack_Extra_Check);
        Extra_Item.parent = this.Battle_Controller.Normal_Attack_Extra_Check.node;
        var Extra_Item_Script_Move = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Normal_Attack_Extra_Check.Normal_Attack_Extra_Check_Script.push(Extra_Item_Script_Move);
        Extra_Item_Script_Move.Battle_Controller = this.Battle_Controller;
        var Extra_Item = cc.instantiate(this.Stop_Attack_Extra_Check);
        Extra_Item.parent = this.Battle_Controller.Stop_Attack_Extra_Check.node;
        var Extra_Item_Script_Move = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Stop_Attack_Extra_Check.Script.push(Extra_Item_Script_Move);
        Extra_Item_Script_Move.Battle_Controller = this.Battle_Controller;
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 173.639;
        var y = 201 * Math.random() - 100;
        Bullet.y = this.node.y + y;
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 173.639;
        Attack_Fire_particle.x = this.node.x + 173.639;
        Attack_Smoke.y = this.node.y + y;
        Attack_Fire_particle.y = this.node.y + y;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Hero_Common.Skill_Picture();
      },
      Skill_Shoot: function Skill_Shoot() {
        var _this = this;
        this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
        this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 200));
        cc.tween(this.node).call(function() {
          _this.Create_Skill_Sword();
        }).delay(1.5).call(function() {
          _this.Battle_Controller.Camera_Shake_Shoot();
          var Bullet = cc.instantiate(_this.Skill_Light_Bullet);
          Bullet.parent = _this.Bullet_Parent;
          var Target_Number = _this.Battle_Controller.Enemy_Parent.children.length;
          if (Target_Number > 0) {
            var Target = Math.round(Math.random() * (Target_Number - 1));
            if (null != _this.Battle_Controller.Enemy_Parent.children[Target]) {
              Bullet.x = _this.Battle_Controller.Enemy_Parent.children[Target].x;
              Bullet.y = _this.Battle_Controller.Enemy_Parent.children[Target].y;
            } else {
              Bullet.x = 0;
              Bullet.y = 0;
            }
          }
          Bullet.angle = 360 * Math.random();
          _this.Hero_Common.Count_Is_Skill = 1;
          _this.Hero_Common.Attack_Count();
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = _this.Battle_Controller;
          Bullet_Script.Jing_Jie = _this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = _this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = _this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = _this.Hero_Common.Crit_Mult_Result;
        }).delay(.5).call(function() {
          _this.Battle_Controller.Camera_Shake_Shoot();
          var Bullet = cc.instantiate(_this.Skill_Light_Bullet);
          Bullet.parent = _this.Bullet_Parent;
          var Target_Number = _this.Battle_Controller.Enemy_Parent.children.length;
          if (Target_Number > 0) {
            var Target = Math.round(Math.random() * (Target_Number - 1));
            if (null != _this.Battle_Controller.Enemy_Parent.children[Target]) {
              Bullet.x = _this.Battle_Controller.Enemy_Parent.children[Target].x;
              Bullet.y = _this.Battle_Controller.Enemy_Parent.children[Target].y;
            } else {
              Bullet.x = 0;
              Bullet.y = 0;
            }
          }
          Bullet.angle = 360 * Math.random();
          _this.Hero_Common.Count_Is_Skill = 0;
          _this.Hero_Common.Attack_Count();
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = _this.Battle_Controller;
          Bullet_Script.Jing_Jie = _this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = _this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = _this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = _this.Hero_Common.Crit_Mult_Result;
        }).delay(.5).call(function() {
          _this.Create_Light_Sword();
        }).delay(2.5).call(function() {
          _this.Back_To_Stay();
          _this.Is_Doing_Something++;
          _this.Can_Injured--;
          _this.schedule(_this.Up_Smoke_Shake_Schedule, .1);
          _this.Animation.play("Mozu_Skill");
          _this.Battle_Controller.Battle_Audio_Controller.Other(4, 2);
          _this.Can_Move--;
          _this.Battle_Controller.Camera_Can_Follow = 0;
          _this.Old_Camera_X = _this.Battle_Controller.Camera.node.x;
          _this.Old_Camera_Y = _this.Battle_Controller.Camera.node.y;
          cc.Tween.stopAllByTarget(_this.Battle_Controller.Camera.node);
          cc.tween(_this.Battle_Controller.Camera.node).to(.2, {
            position: cc.v2(_this.node.x, _this.node.y)
          }, {
            easing: "quadOut"
          }).start();
          cc.Tween.stopAllByTarget(_this.Battle_Controller.Camera);
          cc.tween(_this.Battle_Controller.Camera).to(.2, {
            zoomRatio: 2
          }, {
            easing: "quadOut"
          }).start();
        }).start();
      },
      Create_Light_Sword: function Create_Light_Sword() {
        this.schedule(function() {
          this.Battle_Controller.Camera_Shake_Shoot();
          var Bullet = cc.instantiate(this.Skill_Light_Bullet);
          Bullet.parent = this.Bullet_Parent;
          var Target_Number = this.Battle_Controller.Enemy_Parent.children.length;
          if (Target_Number > 0) {
            var Target = Math.round(Math.random() * (Target_Number - 1));
            if (null != this.Battle_Controller.Enemy_Parent.children[Target]) {
              Bullet.x = this.Battle_Controller.Enemy_Parent.children[Target].x;
              Bullet.y = this.Battle_Controller.Enemy_Parent.children[Target].y;
            } else {
              Bullet.x = 0;
              Bullet.y = 0;
            }
          }
          Bullet.angle = 360 * Math.random();
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        }, .1, 18, 0);
      },
      Create_Skill_Sword: function Create_Skill_Sword() {
        this.schedule(function() {
          this.Battle_Controller.Camera_Shake_Shoot();
          var Bullet = cc.instantiate(this.Skill_Bullet);
          Bullet.parent = this.Particle_Parent;
          var x = 451 * Math.random() - 150;
          Bullet.x = this.node.x + x;
          Bullet.y = this.node.y - 53.257;
          Bullet.getComponent("Mozu_Skill_Bullet").Battle_Controller = this.Battle_Controller;
        }, .1, 5, 0);
      },
      Skill_Big_Swrod_Open: function Skill_Big_Swrod_Open() {
        cc.Tween.stopAllByTarget(this.Battle_Controller.Camera);
        cc.tween(this.Battle_Controller.Camera).to(.05, {
          zoomRatio: .5
        }, {
          easing: "quadOut"
        }).to(.1, {
          zoomRatio: 1.3
        }, {
          easing: "quadOut"
        }).to(.1, {
          zoomRatio: .8
        }, {
          easing: "quadOut"
        }).to(.5, {
          zoomRatio: 1
        }, {
          easing: "quadOut"
        }).start();
        this.Battle_Controller.Camera_Follow.Follow_Start();
        var Particle = cc.instantiate(this.Purple_Smoke_Shoot);
        Particle.parent = this.Particle_Parent;
        Particle.x = this.node.x + 83.287;
        Particle.y = this.node.y + 233.21;
        Particle.angle = 90;
        Particle.scaleX = 5;
        Particle.scaleY = 5;
        this.Battle_Controller.Camera_Shake_Big();
        this.Battle_Controller.Battle_Audio_Controller.Attack(1, 1);
        this.Battle_Controller.Battle_Audio_Controller.Other(5, 3);
      },
      Skill_Xuli_Sound: function Skill_Xuli_Sound() {
        this.Battle_Controller.Battle_Audio_Controller.Other(6, 1);
      },
      Skill_Big_Sword_Shoot: function Skill_Big_Sword_Shoot() {
        this.unschedule(this.Up_Smoke_Shake_Schedule);
        this.Battle_Controller.Battle_Audio_Controller.Other(7, 1);
        this.Battle_Controller.Battle_Audio_Controller.Other(8, 2);
        var Particle = cc.instantiate(this.Big_Particle[0]);
        Particle.parent = this.Particle_Parent;
        Particle.x = this.node.x + 13.076;
        Particle.y = this.node.y;
        var Particle = cc.instantiate(this.Big_Particle[1]);
        Particle.parent = this.Particle_Parent;
        Particle.x = this.node.x + 13.076;
        Particle.y = this.node.y;
        var Particle = cc.instantiate(this.Big_Particle[2]);
        Particle.parent = this.Particle_Parent;
        Particle.x = this.node.x + 13.076;
        Particle.y = -924.061;
        this.schedule(function() {
          if (this.Battle_Controller.Enemy_Bullet_Parent.children.length > 0) for (var i = 0; i < this.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) if (null != this.Battle_Controller.Enemy_Bullet_Parent.children[i]) {
            var Enemy_Bullet_Common = this.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common");
            null != Enemy_Bullet_Common && Enemy_Bullet_Common.Be_Destroy();
          }
          if (this.Battle_Controller.Enemy_Parent.children.length > 0) for (var i = 0; i < this.Battle_Controller.Enemy_Parent.children.length; i++) if (null != this.Battle_Controller.Enemy_Parent.children[i]) {
            var Enemy_Common = this.Battle_Controller.Enemy_Parent.children[i].getComponent("Enemy_Common");
            if (null != Enemy_Common) {
              this.Hero_Common.Count_Is_Skill = 1;
              this.Hero_Common.Attack_Count();
              Enemy_Common.Injured(this.Hero_Common.Jing_Jie_Result, this.Hero_Common.Attack_Result, this.Hero_Common.Crit_Rate_Result, this.Hero_Common.Crit_Mult_Result, 10);
              var Hit_Efffect = cc.instantiate(this.Attack_Smoke);
              Hit_Efffect.parent = this.Particle_Parent;
              Hit_Efffect.x = this.Battle_Controller.Enemy_Parent.children[i].x + Enemy_Common.Image_Offset_X;
              Hit_Efffect.y = this.Battle_Controller.Enemy_Parent.children[i].y + Enemy_Common.Image_Offset_Y;
              var Hit_Particle = cc.instantiate(this.Attack_Fire_particle);
              Hit_Particle.parent = this.Particle_Parent;
              Hit_Particle.x = this.Battle_Controller.Enemy_Parent.children[i].x + Enemy_Common.Image_Offset_X;
              Hit_Particle.y = this.Battle_Controller.Enemy_Parent.children[i].y + Enemy_Common.Image_Offset_Y;
            }
          }
          this.Battle_Controller.Camera_Shake_Big();
        }, .15, 12, 0);
        var Particle = cc.instantiate(this.Red_Blood_Beam);
        Particle.parent = this.Particle_Parent;
        Particle.x = this.node.x;
        Particle.y = this.node.y - 586.859;
      },
      Skill_End: function Skill_End() {
        this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
        this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 0));
        this.Can_Move++;
        this.Can_Injured++;
        this.Back_To_Stay();
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      },
      Blackhole_Born_Check: function Blackhole_Born_Check() {
        if (0 == this.Is_Attacking && 0 == this.Is_Moving && 0 == this.Is_Absorbing && 0 == this.Is_Shooting_Dragon_Bullet) {
          this.Is_Absorbing = 1;
          this.Battle_Controller.Mozu_Blackhole.node.active = true;
          this.Battle_Controller.Mozu_Blackhole.node.x = this.node.x + 350;
          this.Battle_Controller.Mozu_Blackhole.node.y = this.node.y;
          console.log(this.node.y);
          console.log(this.Battle_Controller.Mozu_Blackhole.node.y);
          this.Battle_Controller.Mozu_Blackhole.Animation.play("Mozu_Blackhole_Born");
          this.Battle_Controller.Mozu_Blackhole.Can_Collider = 1;
          this.Battle_Controller.Mozu_Blackhole.Wind.scale = 5;
          this.Battle_Controller.Mozu_Blackhole.Time_Animation.play("Mozu_Blackhole_Time");
        }
      },
      Blackhole_Shoot_Or_Close_Check: function Blackhole_Shoot_Or_Close_Check() {
        if (0 == this.Is_Shooting_Dragon_Bullet && 1 == this.Is_Absorbing) if (0 == this.Absorb_Number) {
          this.Is_Absorbing = 0;
          this.Battle_Controller.Mozu_Blackhole.Animation.play("Mozu_Blackhole_Close");
          this.Battle_Controller.Mozu_Blackhole.Time_Animation.stop("Mozu_Blackhole_Time");
        } else {
          this.Is_Absorbing = 0;
          this.Is_Shooting_Dragon_Bullet = 1;
          this.Battle_Controller.Mozu_Blackhole.Animation.play("Mozu_Blackhole_Shoot");
          this.Battle_Controller.Mozu_Blackhole.Time_Animation.stop("Mozu_Blackhole_Time");
          this.Battle_Controller.Mozu_Blackhole.unschedule(this.Battle_Controller.Mozu_Blackhole.Follow_Schedule);
          this.Battle_Controller.Mozu_Blackhole.Start_Follow();
          this.Battle_Controller.Mozu_Blackhole.Can_Collider = 0;
          cc.Tween.stopAllByTarget(this.Battle_Controller.Mozu_Blackhole.Wind);
          cc.tween(this.Battle_Controller.Mozu_Blackhole.Wind).to(.2, {
            scale: 0
          }).start();
        }
      },
      Blackhole_Shoot_End_Check: function Blackhole_Shoot_End_Check() {
        this.Shoot_Daragon_Number = 0;
        this.Absorb_Number = 0;
        this.Is_Shooting_Dragon_Bullet = 0;
        this.Battle_Controller.Mozu_Blackhole.Label.string = "";
        this.Battle_Controller.Mozu_Blackhole.unschedule(this.Battle_Controller.Mozu_Blackhole.Follow_Schedule);
        if (0 == this.Is_Attacking && 0 == this.Is_Moving && 0 == this.Is_Absorbing) {
          this.Is_Absorbing = 1;
          this.Battle_Controller.Mozu_Blackhole.node.active = true;
          this.Battle_Controller.Mozu_Blackhole.node.x = this.node.x + 350;
          this.Battle_Controller.Mozu_Blackhole.node.y = this.node.y;
          this.Battle_Controller.Mozu_Blackhole.Animation.play("Mozu_Blackhole_Born");
          this.Battle_Controller.Mozu_Blackhole.Can_Collider = 1;
          this.Battle_Controller.Mozu_Blackhole.Wind.scale = 5;
          this.Battle_Controller.Mozu_Blackhole.Time_Animation.play("Mozu_Blackhole_Time");
        } else if (1 == this.Is_Attacking || 1 == this.Is_Moving) {
          this.Is_Absorbing = 0;
          this.Battle_Controller.Mozu_Blackhole.Animation.play("Mozu_Blackhole_Close");
          this.Battle_Controller.Mozu_Blackhole.Time_Animation.stop("Mozu_Blackhole_Time");
        }
      },
      Shoot_Dragon_Bullet: function Shoot_Dragon_Bullet() {
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Dragon_Bullet);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.Battle_Controller.Mozu_Blackhole.node.x;
        Bullet.y = this.Battle_Controller.Mozu_Blackhole.node.y;
        Bullet.angle = 180 * Math.random() - 90;
        this.Hero_Common.Count_Is_Skill = -1;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.Battle_Controller.Mozu_Blackhole.node.x;
        Attack_Fire_particle.x = this.Battle_Controller.Mozu_Blackhole.node.x;
        Attack_Smoke.y = this.Battle_Controller.Mozu_Blackhole.node.y;
        Attack_Fire_particle.y = this.Battle_Controller.Mozu_Blackhole.node.y;
        this.Shoot_Daragon_Number++;
        this.Battle_Controller.Mozu_Blackhole.Label.string = this.Absorb_Number - this.Shoot_Daragon_Number;
        this.Battle_Controller.Mozu_Blackhole.Label_Animation.play();
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Muguiying_4_Star_Knife_Surround: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "25ee1d2GH9KJ7xlxGiPKcDJ", "Muguiying_4_Star_Knife_Surround");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Particle_Prefab: cc.Prefab,
        Animation: cc.Animation,
        Hero_Common: cc.Node,
        Can_Collider: 1,
        Reborn_Schedule: cc.Schedule
      },
      start: function start() {
        this.Reborn_Schedule = function() {
          this.Can_Collider = 1;
          this.Animation.play("Surround_Zhiqing_Shield_Born");
        };
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if (1 == this.Can_Collider && "Enemy" == other.node.group) {
          this.Hero_Common.Count_Is_Skill = 4;
          this.Hero_Common.Attack_Count();
          var Enemy_Common = other.node.getComponent("Enemy_Common");
          null != Enemy_Common && Enemy_Common.Injured(this.Hero_Common.Jing_Jie_Result, 2 * this.Hero_Common.Attack_Result, this.Hero_Common.Crit_Rate_Result, this.Hero_Common.Crit_Mult_Result, 100);
          var Hit_Efffect = cc.instantiate(this.Particle_Prefab);
          Hit_Efffect.parent = this.Battle_Controller.Particle_Parent;
          Hit_Efffect.x = other.node.x;
          Hit_Efffect.y = other.node.y;
          this.Battle_Controller.Camera_Shake_Small();
          this.node.opacity = 0;
          this.Can_Collider = 0;
          this.unschedule(this.Reborn_Schedule);
          this.scheduleOnce(this.Reborn_Schedule, 3);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Muguiying_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "111aezhbf9DQ6mZYMofUu0v", "Muguiying_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Muguiying_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "569cee9wCBIWpBPPqyEOhqN", "Muguiying_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Muguiying").getComponent("Muguiying");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Muguiying_Attack_Surround_Kinfe: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "77249NSEyxJ/ZtHGB9VuB+r", "Muguiying_Attack_Surround_Kinfe");
    "use strict";
    var Muguiying_Knife_Surround_Parent = require("Muguiying_Knife_Surround_Parent");
    cc.Class({
      extends: cc.Component,
      properties: {
        Muguiying_Knife_Surround_Parent: Muguiying_Knife_Surround_Parent,
        Hero_Common: cc.Node,
        Particle_Prefab: cc.Prefab
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Enemy" == other.node.group) {
          console.log("aaaaa");
          if (null != this.Muguiying_Knife_Surround_Parent.Hero_Common) {
            this.Hero_Common = this.Muguiying_Knife_Surround_Parent.Hero_Common;
            this.Hero_Common.Count_Is_Skill = 4;
            this.Hero_Common.Attack_Count();
            var Enemy_Common = other.node.getComponent("Enemy_Common");
            null != Enemy_Common && Enemy_Common.Injured(this.Hero_Common.Jing_Jie_Result, this.Hero_Common.Attack_Result, this.Hero_Common.Crit_Rate_Result, this.Hero_Common.Crit_Mult_Result, 100);
            var Hit_Efffect = cc.instantiate(this.Particle_Prefab);
            Hit_Efffect.parent = this.Muguiying_Knife_Surround_Parent.Battle_Controller.Particle_Parent;
            Hit_Efffect.x = other.node.x;
            Hit_Efffect.y = other.node.y;
            this.Muguiying_Knife_Surround_Parent.Battle_Controller.Camera_Shake_Small();
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    Muguiying_Knife_Surround_Parent: "Muguiying_Knife_Surround_Parent"
  } ],
  Muguiying_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2775aAqothBIrDLOc5gAE+O", "Muguiying_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check(Enemy_Common) {
        1 == Enemy_Common.Is_In_Muguiying_Jiejie && this.Battle_Controller.Hero_Script.Hero_Common.Recovery(2);
      }
    });
    cc._RF.pop();
  }, {} ],
  Muguiying_Jiejie: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9a67tKAi9BTaIWkbkFleia", "Muguiying_Jiejie");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Enemy" == other.node.group) {
          var Enemy_Common = other.node.getComponent("Enemy_Common");
          if (null != Enemy_Common) {
            Enemy_Common.Be_Hit_Attack_Addition += 100;
            Enemy_Common.Is_In_Muguiying_Jiejie = 1;
          }
        }
      },
      onCollisionExit: function onCollisionExit(other, self) {
        if ("Enemy" == other.node.group) {
          var Enemy_Common = other.node.getComponent("Enemy_Common");
          if (null != Enemy_Common) {
            Enemy_Common.Be_Hit_Attack_Addition -= 100;
            Enemy_Common.Is_In_Muguiying_Jiejie = 0;
          }
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Muguiying_Knife_Surround_Parent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92409kidDFIF5rDaYalKxsg", "Muguiying_Knife_Surround_Parent");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Common: cc.Node,
        Battle_Controller: cc.Node
      },
      Destroy_Self: function Destroy_Self() {
        this.node.parent.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Muguiying_Skill_Jian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d8e5diuyENOxaVaGzNPayuQ", "Muguiying_Skill_Jian");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Speed: 1500,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Particle_Parent: cc.Node,
        Enemy_Parent: cc.Node,
        Target: cc.Node,
        Follow_Enemy_Schedule: cc.Schedule,
        RigidBody: cc.RigidBody,
        PhysicsBoxCollider: cc.PhysicsBoxCollider,
        Time_Too_Long: 0
      },
      start: function start() {
        this.Particle_Parent = this.Hero_Bullet_Common.Battle_Controller.Particle_Parent;
        this.Enemy_Parent = this.Hero_Bullet_Common.Battle_Controller.Enemy_Parent;
        this.Follow_Enemy_Schedule = function() {
          if (null == this.Target || "" == this.Target.name) if (this.Enemy_Parent.children.length > 0) this.Target = this.Enemy_Parent.children[Math.floor(Math.random() * this.Enemy_Parent.children.length)]; else {
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
            cc.tween(this.node).delay(1e-5).to(Math.abs(0 - this.node.angle) / 150, {
              angle: 0
            }, {
              easing: "quadOut"
            }).start();
          } else {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.node.angle = radian / Math.PI * 180 - 180;
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
          }
        };
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      },
      Shoot: function Shoot() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
        this.PhysicsBoxCollider.enabled = true;
        this.schedule(this.Follow_Enemy_Schedule, .01);
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Muguiying: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8f78442aU5DdY1BucjcjbHC", "Muguiying");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Particle_Single: cc.Prefab,
        Attack_Knife_Surround_Grand: cc.Node,
        To_Knife_Number: 0,
        Attack_Knife_Surround_Prefab: cc.Prefab,
        Muguiying_Jiejie: cc.Prefab,
        Muguiying_Skill_Gong: cc.Prefab,
        Muguiying_Skill_Jian: cc.Prefab,
        Skill_Schedule: cc.Schedule,
        Gong_X: 0,
        Gong_Y: 0,
        Muguiying_Hit_Extar_Check: cc.Prefab,
        Muguiying_4_Star_Knife_Surround_Prefab: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        if (this.Battle_Controller.Hero_Star >= 2) {
          var Jiejie = cc.instantiate(this.Muguiying_Jiejie);
          Jiejie.parent = this.Hero_Common.Jiejie_Parent;
          Jiejie.x = 0;
          Jiejie.y = 0;
        }
        if (this.Battle_Controller.Hero_Star >= 3) {
          this.Extra_Check_Item = cc.instantiate(this.Muguiying_Hit_Extar_Check);
          this.Extra_Check_Item.parent = this.Battle_Controller.Bullet_Hit_Extra_Check.node;
          this.Extra_Check_Item_Script = this.Extra_Check_Item.getComponent(this.Extra_Check_Item.name);
          this.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script.push(this.Extra_Check_Item_Script);
          this.Extra_Check_Item_Script.Battle_Controller = this.Battle_Controller;
        }
        if (this.Battle_Controller.Hero_Star >= 4) {
          var Item = cc.instantiate(this.Muguiying_4_Star_Knife_Surround_Prefab);
          Item.parent = this.Hero_Common.Surround_Parent;
          this.Battle_Controller.Set_Surround_Position();
          Item.x = this.Battle_Controller.Surround_X;
          Item.y = this.Battle_Controller.Surround_Y;
          Item.angle = this.Battle_Controller.Surround_Angle - 90;
          var Script = Item.getComponent("Muguiying_4_Star_Knife_Surround");
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Common = this.Hero_Common;
          var Item = cc.instantiate(this.Muguiying_4_Star_Knife_Surround_Prefab);
          Item.parent = this.Hero_Common.Surround_Parent;
          this.Battle_Controller.Set_Surround_Position();
          Item.x = this.Battle_Controller.Surround_X;
          Item.y = this.Battle_Controller.Surround_Y;
          Item.angle = this.Battle_Controller.Surround_Angle - 90;
          var Script = Item.getComponent("Muguiying_4_Star_Knife_Surround");
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Common = this.Hero_Common;
          var Item = cc.instantiate(this.Muguiying_4_Star_Knife_Surround_Prefab);
          Item.parent = this.Hero_Common.Surround_Parent;
          this.Battle_Controller.Set_Surround_Position();
          Item.x = this.Battle_Controller.Surround_X;
          Item.y = this.Battle_Controller.Surround_Y;
          Item.angle = this.Battle_Controller.Surround_Angle - 90;
          var Script = Item.getComponent("Muguiying_4_Star_Knife_Surround");
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Common = this.Hero_Common;
          var Item = cc.instantiate(this.Muguiying_4_Star_Knife_Surround_Prefab);
          Item.parent = this.Hero_Common.Surround_Parent;
          this.Battle_Controller.Set_Surround_Position();
          Item.x = this.Battle_Controller.Surround_X;
          Item.y = this.Battle_Controller.Surround_Y;
          Item.angle = this.Battle_Controller.Surround_Angle - 90;
          var Script = Item.getComponent("Muguiying_4_Star_Knife_Surround");
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Common = this.Hero_Common;
        }
        this.Battle_Controller.Hero_Star >= 5 && (this.Battle_Controller.Surround_Attack_Addition += 100);
        this.Skill_Schedule = function() {
          var Bullet = cc.instantiate(this.Muguiying_Skill_Jian);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.Gong_X + 90;
          Bullet.y = this.Gong_Y + 200;
          Bullet.angle = 10;
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = 5 * this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Bullet = cc.instantiate(this.Muguiying_Skill_Jian);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.Gong_X + 90;
          Bullet.y = this.Gong_Y + 150;
          Bullet.angle = 0;
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = 5 * this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Bullet = cc.instantiate(this.Muguiying_Skill_Jian);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.Gong_X + 90;
          Bullet.y = this.Gong_Y + 100;
          Bullet.angle = -10;
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = 5 * this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        };
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y - 10;
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
        this.To_Knife_Number++;
        if (this.To_Knife_Number >= 5) {
          this.Battle_Controller.Camera_Shake_Medium();
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          Attack_Smoke.parent = this.Particle_Parent;
          Attack_Smoke.x = this.node.x;
          Attack_Smoke.y = this.node.y;
          for (var i = 0; i < 20; i++) {
            var Particle = cc.instantiate(this.Particle_Single);
            Particle.parent = this.Particle_Parent;
            Particle.setPosition(this.node.x, this.node.y);
            Particle.angle = 360 * Math.random();
          }
          var Bullet = cc.instantiate(this.Attack_Knife_Surround_Prefab);
          Bullet.parent = this.Attack_Knife_Surround_Grand;
          Bullet.x = 0;
          Bullet.y = 0;
          var Script = Bullet.children[0].getComponent("Muguiying_Knife_Surround_Parent");
          Script.Hero_Common = this.Hero_Common;
          Script.Battle_Controller = this.Battle_Controller;
          this.To_Knife_Number = 0;
        }
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Hero_Common.Skill_Picture();
      },
      Skill_Shoot: function Skill_Shoot() {
        var Bullet = cc.instantiate(this.Muguiying_Skill_Gong);
        Bullet.parent = this.Particle_Parent;
        Bullet.x = this.node.x + 100;
        Bullet.y = this.node.y - 150;
        this.Gong_X = Bullet.x;
        this.Gong_Y = Bullet.y;
        this.schedule(this.Skill_Schedule, .4, 3, 0);
      },
      To_Next_Attack: function To_Next_Attack() {
        this.Animation.play("Muguiying_Attack", .66);
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  "NewScript - 001": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc14fRxZXJLC4Y0znbwmKNx", "NewScript - 001");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  NewScript: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6bccMp/F9GQp+Oc5jhtsKR", "NewScript");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  New_White_Particle_Long_Single: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0624atanEROPJ1S+4LgkGWT", "New_White_Particle_Long_Single");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Max_X: 0,
        Time: 0,
        Distant: 0
      },
      start: function start() {
        var _this = this;
        this.Max_X = Math.random() + .5;
        this.Time = .25 * Math.random() + .25;
        this.Distant = 500 * Math.random() + 200;
        cc.tween(this.node).to(this.Time, {
          scaleX: this.Max_X,
          position: cc.v2(this.node.x + this.Distant * Math.cos(this.node.angle * Math.PI / 180), this.node.y + this.Distant * Math.sin(this.node.angle * Math.PI / 180))
        }, {
          easing: "quadIn"
        }).to(this.Time, {
          scaleX: 0,
          position: cc.v2(this.node.x + this.Distant * Math.cos(this.node.angle * Math.PI / 180) * 2, this.node.y + this.Distant * Math.sin(this.node.angle * Math.PI / 180) * 2)
        }, {
          easing: "quadOut"
        }).call(function() {
          _this.node.destroy();
        }).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Next_Xiaoguanqia_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "493b4mkufJEvoc7joVlYo8a", "Next_Xiaoguanqia_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Next_Xiaoguanqia_Extra_Check_Prefab: [ cc.Prefab ],
        Next_Xiaoguanqia_Extra_Check_Script: [ cc.Node ]
      }
    });
    cc._RF.pop();
  }, {} ],
  Next_Xiaoguanqia_Menu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b46dbOT7RZFu4BGTaYbhjuO", "Next_Xiaoguanqia_Menu");
    "use strict";
    var Battle_Controller = require("Battle_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Position_X: [ cc.Float ],
        Position_Y: [ cc.Float ],
        Battle_Controller: Battle_Controller,
        People: cc.Node,
        Animation: cc.Animation
      },
      onLoad: function onLoad() {
        this.Position_X = [ -1025.181, -764.551, -514.21, -304.649, -50.91, 179.041, 327.433, 581.172, 822.451, 1022.95 ];
        this.Position_Y = [ 145.426, 145.426, 216.791, 77.461, 77.461, -17.691, 186.207, 186.207, 280.227, 120.507 ];
      },
      People_Move: function People_Move() {
        var _this = this;
        for (var i = 0; i < this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.Next_Xiaoguanqia_Extra_Check_Script.length; i++) this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.Next_Xiaoguanqia_Extra_Check_Script[i].Check();
        cc.tween(this.People).to(.5, {
          position: cc.v2(this.Position_X[this.Battle_Controller.Now_Xiaoguanqia - 1], this.Position_Y[this.Battle_Controller.Now_Xiaoguanqia - 1])
        }).delay(1).call(function() {
          _this.Animation.play("Next_Xiaoguanqia_Menu_Out");
        }).start();
      },
      Out: function Out() {
        this.Battle_Controller.Battle_Show();
        this.Battle_Controller.Set_Boci_Tips_Label();
        this.Battle_Controller.New_Xiaoguanqia_Boci_Tips();
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    Battle_Controller: "Battle_Controller"
  } ],
  Normal_Attack_After_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "903e6U+yYxM/bkvtP4zDYi7", "Normal_Attack_After_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Normal_Attack_After_Extra_Check_Prefab: [ cc.Prefab ],
        Normal_Attack_After_Extra_Check_Script: [ cc.Node ]
      }
    });
    cc._RF.pop();
  }, {} ],
  Normal_Attack_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "68bffihsxxGEJZfM7FtX2Wb", "Normal_Attack_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Normal_Attack_Extra_Check_Prefab: [ cc.Prefab ],
        Normal_Attack_Extra_Check_Script: [ cc.Node ]
      }
    });
    cc._RF.pop();
  }, {} ],
  Normal_Initial_Data: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dd275iFPRBJ5ptIRlRzhRa7", "Normal_Initial_Data");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Now_Guanqia: 0,
        Hero_Initial_Attack: 100,
        Hero_Initial_Hp: 500,
        Same_Level_Kill_Enemy: 5,
        Same_Level_Kill_Hero: 10,
        Tall_One_Level_Kill_Enemy: 2,
        Tall_One_Level_Kill_Hero: 5,
        Every_Guanqia_Exp: 20,
        Every_Guanqia_Gacha: 10,
        Standard_Team_Level: 0,
        Standard_Hero_Attack: 0,
        Standard_Hero_Hp: 0,
        Standard_Enemy_Hp: 0,
        Standard_Enemy_Attack: 0,
        Team_Level_Up_Attack_Up: 10,
        Team_Level_Up_Hp_Up: 10,
        One_Guanqia_All_Enemy: 340,
        One_Guanqia_Have_Xiaoguangqia: 10,
        Every_Xiaoguangqia_Have_Boci: [ cc.Integer ],
        Every_Boci_Have_Enemy: [ cc.Integer ],
        Guanqia_Name: [ cc.String ],
        Xiaoguanqia_Name: [ cc.String ],
        Initial_Rogue_Level_Up_Need: 4,
        Every_Enemy_Rogue_Energy: 1,
        Every_Rogue_Level_Up_Need_Up: 5,
        Standard_Every_Xiaoguanqia_Enemy_Hp_Mult: [ cc.Integer ],
        Standard_Every_Xiaoguanqia_Enemy_Attack_Mult: [ cc.Integer ],
        One_Guanqia_Exp: 2e3,
        One_Eenemy_Exp: 0
      },
      Start_Set: function Start_Set() {
        this.Now_Guanqia = JSON.parse(cc.sys.localStorage.getItem("Now_Guanqia"));
        null == this.Now_Guanqia && (this.Now_Guanqia = 1);
        this.Standard_Team_Level = 1 + Math.floor(this.Every_Guanqia_Exp * (this.Now_Guanqia - 1) / 100);
        this.Standard_Hero_Attack = this.Hero_Initial_Attack * (100 + (this.Standard_Team_Level - 1) * this.Team_Level_Up_Attack_Up) / 100;
        this.Standard_Enemy_Hp = this.Same_Level_Kill_Enemy * this.Standard_Hero_Attack;
        this.Standard_Hero_Hp = this.Hero_Initial_Hp * (100 + (this.Standard_Team_Level - 1) * this.Team_Level_Up_Hp_Up) / 100;
        this.Standard_Enemy_Attack = Math.ceil(this.Standard_Hero_Hp / this.Same_Level_Kill_Hero);
        this.One_Eenemy_Exp = this.One_Guanqia_Exp / this.One_Guanqia_All_Enemy;
        this.Every_Xiaoguangqia_Have_Boci = [ 2, 2, 2, 2, 2, 2, 2, 4, 4, 4 ];
        this.Every_Boci_Have_Enemy = [ 5, 10, 10, 10, 10, 10, 15, 2, 15, 15, 15, 15, 15, 15, 10, 15, 15, 10, 10, 15, 15, 10, 10, 15, 15, 10 ];
        this.Standard_Every_Xiaoguanqia_Enemy_Hp_Mult = [ .2, 1.4, 1.275, 2.024, 2.25, 3.64, 3.5712, 3.531, 3.478, 3.44 ];
        this.Standard_Every_Xiaoguanqia_Enemy_Attack_Mult = [ 1, 1.4, 1.275, 2.024, 2.25, 3.64, 3.5712, 3.531, 3.478, 3.44 ];
        this.Guanqia_Name = [ "\u7ec3\u6c14\u8bd5\u70bc", "\u7b51\u57fa\u8bd5\u70bc", "\u7ed3\u4e39\u8bd5\u70bc", "\u5143\u5a74\u8bd5\u70bc", "\u5316\u795e\u8bd5\u70bc", "\u7ec3\u865a\u8bd5\u70bc", "\u5408\u4f53\u8bd5\u70bc", "\u5927\u4e58\u8bd5\u70bc", "\u4ed9\u4e4b\u8bd5\u70bc" ];
        this.Xiaoguanqia_Name = [ "\u4e00\u91cd\u52ab", "\u4e8c\u91cd\u52ab", "\u4e09\u91cd\u52ab", "\u56db\u91cd\u52ab", "\u4e94\u91cd\u52ab", "\u516d\u91cd\u52ab", "\u4e03\u91cd\u52ab", "\u516b\u91cd\u52ab", "\u4e5d\u91cd\u52ab", "\u5341\u91cd\u52ab" ];
      }
    });
    cc._RF.pop();
  }, {} ],
  Open_PhysicsManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e128dtVUjtITK9cpnVtQUng", "Open_PhysicsManager");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {
        cc.director.getPhysicsManager().enabled = true;
        cc.director.getCollisionManager().enabled = true;
      }
    });
    cc._RF.pop();
  }, {} ],
  Pause_History_Card: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b4b7f/g7jVJIoe1kcduz6Si", "Pause_History_Card");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Card_ID: 0,
        Pause_Menu_Script: cc.Node,
        Rogue_Script: cc.Node,
        Level_Label: cc.Label,
        Level: 0
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (0 == this.Pause_Menu_Script.Stage) {
            this.Pause_Menu_Script.History_Card_Detail_Menu.active = true;
            this.Pause_Menu_Script.History_Card_Detail_Animation.play("History_Card_Detail_Menu_In");
            this.Pause_Menu_Script.History_Card_Detail_Card_Sprite.spriteFrame = this.Rogue_Script.Rogue_Information.Picture[this.Card_ID];
            this.Rogue_Script.Rogue_Information.Show_Card_Information(this.Level);
            this.Pause_Menu_Script.History_Card_Detail_Label.string = this.Rogue_Script.Rogue_Information.Information[this.Card_ID];
            this.Pause_Menu_Script.History_Card_Detail_Level_Label.string = "\u7b49\u7ea7" + this.Level;
            this.Pause_Menu_Script.Stage = 1;
            this.Pause_Menu_Script.History_Card_Detail_Menu_Black.on(cc.Node.EventType.TOUCH_START, function(event) {
              if (1 == this.Pause_Menu_Script.Stage) {
                this.Pause_Menu_Script.History_Card_Detail_Animation.play("History_Card_Detail_Menu_Out");
                this.Pause_Menu_Script.Stage = 0;
              }
            }, this);
          }
        }, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  Pause_Menu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d8ba8/GGnpJrZcWT5XjtSLh", "Pause_Menu");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Animation: cc.Animation,
        Stage: 0,
        No_History_Card_Tips_Label: cc.Node,
        History_Card_Menu: cc.Node,
        History_Layout: cc.Node,
        History_Card_Detail_Menu: cc.Node,
        History_Card_Detail_Animation: cc.Animation,
        History_Card_Detail_Card_Sprite: cc.Sprite,
        History_Card_Detail_Menu_Black: cc.Node,
        History_Card_Detail_Label: cc.Label,
        History_Card_Detail_Level_Label: cc.Label,
        Exit_Button: cc.Node,
        Exit_Menu_Animation: cc.Animation,
        Exit_Menu_Exit_Button: cc.Node,
        Exit_Menu_Resume_Button: cc.Node,
        Setting_Button: cc.Node,
        Setting_Menu_Animation: cc.Animation,
        Music_Button: cc.Node,
        Voice_Button: cc.Node,
        JoyStick_Mobile_Button: cc.Node,
        JoyStick_Fix_Button: cc.Node,
        Setting_Back_Button: cc.Node,
        Dead_Menu: cc.Node,
        Canvas_Animation: cc.Animation,
        Resume_Button: cc.Node,
        History_Card_Prefab: cc.Prefab
      },
      start: function start() {
        this.Resume_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (0 == this.Stage) {
            this.Stage = 4;
            this.Animation.play("Pause_Menu_Out");
          }
        }, this);
        this.Exit_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (0 == this.Stage) {
            this.Stage = 3;
            console.log("this.Exit_Menu_Animation.node.active");
            this.Exit_Menu_Animation.node.active = true;
            this.Exit_Menu_Animation.play("Exit_Menu_In");
          }
        }, this);
        this.Exit_Menu_Resume_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (3 == this.Stage) {
            this.Stage = 0;
            this.Exit_Menu_Animation.play("Exit_Menu_Out");
          }
        }, this);
        this.Exit_Menu_Exit_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (3 == this.Stage) {
            this.Stage = 5;
            this.Dead_Menu.active = true;
            this.Canvas_Animation.play("Dead_Menu");
            this.Battle_Controller.Dead_Menu_Spoil_Show();
          }
        }, this);
        this.Setting_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (0 == this.Stage) {
            this.Stage = 2;
            this.Setting_Menu_Animation.node.active = true;
            this.Setting_Menu_Animation.play("Exit_Menu_In");
          }
        }, this);
        this.Music_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Stage) if (1 == this.Battle_Controller.Music_Is_Open) {
            this.Battle_Controller.Music_Is_Open = 0;
            cc.sys.localStorage.setItem("Music_Is_Open", 0);
            this.Battle_Controller.Battle_Audio_Controller.Stop_Music();
            this.Battle_Controller.Battle_Audio_Controller.Button_Voice_Play();
            this.Music_Button.opacity = 100;
          } else {
            this.Battle_Controller.Music_Is_Open = 1;
            cc.sys.localStorage.setItem("Music_Is_Open", 1);
            this.Battle_Controller.Battle_Audio_Controller.Start_Music();
            this.Battle_Controller.Battle_Audio_Controller.Button_Voice_Play();
            this.Music_Button.opacity = 255;
          }
        }, this);
        this.Voice_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Stage) if (1 == this.Battle_Controller.Voice_Is_Open) {
            this.Battle_Controller.Voice_Is_Open = 0;
            cc.sys.localStorage.setItem("Voice_Is_Open", 0);
            this.Voice_Button.opacity = 100;
          } else {
            this.Battle_Controller.Voice_Is_Open = 1;
            cc.sys.localStorage.setItem("Voice_Is_Open", 1);
            this.Battle_Controller.Battle_Audio_Controller.Button_Voice_Play();
            this.Voice_Button.opacity = 255;
          }
        }, this);
        this.JoyStick_Mobile_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Stage) {
            this.Battle_Controller.JoyStick.Is_Mobile = 1;
            cc.sys.localStorage.setItem("JoyStick_Is_Mobile", 1);
            this.JoyStick_Mobile_Button.parent.opacity = 255;
            this.JoyStick_Fix_Button.parent.opacity = 100;
            this.Battle_Controller.Battle_Audio_Controller.Button_Voice_Play();
          }
        }, this);
        this.JoyStick_Fix_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Stage) {
            this.Battle_Controller.JoyStick.Is_Mobile = 0;
            cc.sys.localStorage.setItem("JoyStick_Is_Mobile", 0);
            this.JoyStick_Mobile_Button.parent.opacity = 100;
            this.JoyStick_Fix_Button.parent.opacity = 255;
            this.Battle_Controller.Battle_Audio_Controller.Button_Voice_Play();
          }
        }, this);
        this.Setting_Back_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (2 == this.Stage) {
            this.Stage = 0;
            this.Setting_Menu_Animation.play("Exit_Menu_Out");
            this.Battle_Controller.Battle_Audio_Controller.Button_Voice_Play();
          }
        }, this);
      },
      Initialization: function Initialization() {
        this.Stage = 0;
        if (0 == this.Battle_Controller.Rogue_Script.Haved_Card.length) {
          this.No_History_Card_Tips_Label.active = true;
          this.History_Card_Menu.active = false;
        } else {
          this.No_History_Card_Tips_Label.active = false;
          this.History_Card_Menu.active = true;
          for (var i = 0; i < this.Battle_Controller.Rogue_Script.Haved_Card.length; i++) {
            var Card = cc.instantiate(this.History_Card_Prefab);
            Card.parent = this.History_Layout;
            console.log(Card);
            Card.getComponent(cc.Sprite).spriteFrame = this.Battle_Controller.Rogue_Script.Rogue_Information.Picture[this.Battle_Controller.Rogue_Script.Haved_Card[i]];
            var Card_Script = Card.getComponent("Pause_History_Card");
            Card_Script.Card_ID = this.Battle_Controller.Rogue_Script.Haved_Card[i];
            Card_Script.Rogue_Script = this.Battle_Controller.Rogue_Script;
            Card_Script.Level_Label.string = "\u7b49\u7ea7" + this.Battle_Controller.Rogue_Script.Haved_Rogue_Level[this.Battle_Controller.Rogue_Script.Haved_Card[i]];
            Card_Script.Level = this.Battle_Controller.Rogue_Script.Haved_Rogue_Level[this.Battle_Controller.Rogue_Script.Haved_Card[i]];
            Card_Script.Pause_Menu_Script = this;
          }
        }
      },
      Out: function Out() {
        if (null != this.History_Layout.children) for (var i = 0; i < this.History_Layout.children.length; i++) this.History_Layout.children[i].destroy();
        this.Battle_Controller.Battle_Show();
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  Pet_Bajie: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5cd0BN5mZMqY/Zan9IQol6", "Pet_Bajie");
    "use strict";
    var Pet_Common = require("Pet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Pet_Common: Pet_Common,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Left_Bound: 0,
        Up_Bound: 0,
        Down_Bound: 0,
        Speed: 500,
        Think_Stage: 0,
        Skill_Follow_Particle: cc.Prefab,
        Xuli_Particle_Schedule: cc.Schedule,
        Bo_White: cc.Prefab,
        Bomb_Particle: cc.Prefab,
        Jiejie_Pet_Bajie: cc.Prefab
      },
      start: function start() {
        this.Bullet_Parent = this.Pet_Common.Battle_Controller.Hero_Bullet_Parent;
        this.Particle_Parent = this.Pet_Common.Battle_Controller.Particle_Parent;
        this.Xuli_Particle_Schedule = function() {
          var Particle = cc.instantiate(this.Pet_Common.Battle_Controller.Skill_Follow_Particle);
          Particle.parent = this.Pet_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(1001 * Math.random() - 500), this.node.y + Math.floor(1001 * Math.random() - 500));
          var Particle_Script = Particle.getComponent("Skill_Follow_Particle");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 0;
          Particle_Script.Target_Shifting_Y = 0;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Pet_Common.Battle_Controller.Skill_Follow_Particle);
          Particle.parent = this.Pet_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(1001 * Math.random() - 500), this.node.y + Math.floor(1001 * Math.random() - 500));
          var Particle_Script = Particle.getComponent("Skill_Follow_Particle");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 0;
          Particle_Script.Target_Shifting_Y = 0;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Pet_Common.Battle_Controller.Skill_Follow_Particle);
          Particle.parent = this.Pet_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(1001 * Math.random() - 500), this.node.y + Math.floor(1001 * Math.random() - 500));
          var Particle_Script = Particle.getComponent("Skill_Follow_Particle");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 0;
          Particle_Script.Target_Shifting_Y = 0;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Pet_Common.Battle_Controller.Skill_Follow_Particle);
          Particle.parent = this.Pet_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(1001 * Math.random() - 500), this.node.y + Math.floor(1001 * Math.random() - 500));
          var Particle_Script = Particle.getComponent("Skill_Follow_Particle");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 0;
          Particle_Script.Target_Shifting_Y = 0;
          Particle_Script.Start_Set();
          var Particle = cc.instantiate(this.Pet_Common.Battle_Controller.Skill_Follow_Particle);
          Particle.parent = this.Pet_Common.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(1001 * Math.random() - 500), this.node.y + Math.floor(1001 * Math.random() - 500));
          var Particle_Script = Particle.getComponent("Skill_Follow_Particle");
          Particle_Script.Target = this.node;
          Particle_Script.Target_Shifting_X = 0;
          Particle_Script.Target_Shifting_Y = 0;
          Particle_Script.Start_Set();
        };
        this.Pet_Common.Move();
      },
      Pet_Move: function Pet_Move() {
        var _this = this;
        this.Animation.play("Pet_Bajie_Stay");
        var Dis_X = Math.floor(Math.random() * this.Left_Bound - 1);
        var Dis_Y = Math.floor(Math.random() * (this.Up_Bound - this.Down_Bound + 1) + this.Down_Bound);
        var Dis = Math.sqrt(Math.pow(Dis_X - this.node.x, 2) + Math.pow(Dis_Y - this.node.y, 2));
        var time = Dis / this.Speed;
        cc.tween(this.node).to(1 * time, {
          position: cc.v2(Dis_X, Dis_Y)
        }, {
          easing: "quintInOut"
        }).call(function() {
          _this.Think();
        }).start();
      },
      Think: function Think() {
        if (this.Think_Stage <= 4) {
          this.Think_Stage++;
          this.Animation.play("Pet_Bajie_Attack");
        } else {
          this.Think_Stage = 0;
          this.Animation.play("Pet_Bajie_Skill");
          this.schedule(this.Xuli_Particle_Schedule, 0, 5, .2);
        }
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 160.912;
        Bullet.y = this.node.y;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 3;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Pet_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = .5 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      },
      Skill: function Skill() {
        var Particle = cc.instantiate(this.Bo_White);
        Particle.parent = this.Pet_Common.Battle_Controller.Particle_Parent;
        Particle.setPosition(this.node.x, this.node.y);
        var Particle = cc.instantiate(this.Bomb_Particle);
        Particle.parent = this.Pet_Common.Battle_Controller.Particle_Parent;
        Particle.setPosition(this.node.x, this.node.y);
        var Jiejie_Pet_Bajie = cc.instantiate(this.Jiejie_Pet_Bajie);
        Jiejie_Pet_Bajie.parent = this.Pet_Common.Battle_Controller.Enchantment_Parent;
        Jiejie_Pet_Bajie.setPosition(this.node.x, this.node.y);
        this.Pet_Common.Battle_Controller.Camera_Shake_Medium();
      }
    });
    cc._RF.pop();
  }, {
    Pet_Common: "Pet_Common"
  } ],
  Pet_Be_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dbba982dmRGfrGPsCaUna/C", "Pet_Be_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Prefab: [ cc.Prefab ],
        Script: [ cc.Node ]
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Pet_Born_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32a0cJRDNBGdIjKcR88y29n", "Pet_Born_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Pet_Born_Extra_Check_Prefab: [ cc.Prefab ],
        Pet_Born_Extra_Check_Script: [ cc.Node ]
      }
    });
    cc._RF.pop();
  }, {} ],
  Pet_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d92ffOwBYVE8qxeu/5TMs01", "Pet_Common");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Pet_Script: cc.Node,
        Hero_Common: cc.Node,
        Can_Think: 1,
        Idle_Time: 1,
        Position: 0,
        Follow_Red_Hood_Y: 0,
        Follow_Red_Hood_Schedule: cc.Schedule,
        Hero_Target: cc.Node,
        Can_Collider_Enemy_Bullet: 1,
        Follow_Hero_Tween: cc.Tween
      },
      start: function start() {
        this.Battle_Controller = cc.find("Canvas").getComponent("Battle_Controller");
        this.Pet_Script = this.node.getComponent(this.node.name);
        for (var i = 0; i < this.Battle_Controller.Pet_Born_Extra_Check.Pet_Born_Extra_Check_Script.length; i++) null != this.Battle_Controller.Pet_Born_Extra_Check.Pet_Born_Extra_Check_Script[i] && this.Battle_Controller.Pet_Born_Extra_Check.Pet_Born_Extra_Check_Script[i].Check();
        if (1 == this.Battle_Controller.Is_Red_Hood) {
          this.Position = this.node.parent.children.indexOf(this.node) + 1;
          this.Position % 2 == 0 ? this.Follow_Red_Hood_Y = 150 : this.Follow_Red_Hood_Y = -150;
          this.Hero_Target = this.Battle_Controller.Hero;
          this.Follow_Red_Hood_Schedule = function() {
            var _this = this;
            this.Follow_Hero_Tween = cc.tween(this.node).call(function() {
              null == _this.Hero_Target && (_this.Hero_Target = _this.Battle_Controller.Hero);
            }).to(.2 + .3 * this.Position, {
              position: cc.v2(this.Hero_Target.x - 80 * this.Position, this.Hero_Target.y + this.Follow_Red_Hood_Y)
            }, {
              easing: "quadOut"
            }).start();
          };
          this.schedule(this.Follow_Red_Hood_Schedule, 1e-4);
        }
      },
      Move: function Move() {
        if (0 == this.Battle_Controller.Is_Red_Hood) this.Pet_Script.Pet_Move(); else if (1 == this.Can_Think) {
          this.Pet_Script.Animation.play(this.node.name + "_Stay");
          this.scheduleOnce(function() {
            this.Pet_Script.Think();
          }, this.Idle_Time);
        }
      },
      onDestroy: function onDestroy() {
        for (var i = 0; i < this.Battle_Controller.Pet_Dead_Extra_Check.Pet_Dead_Extra_Check_Script.length; i++) null != this.Battle_Controller.Pet_Dead_Extra_Check.Pet_Dead_Extra_Check_Script[i] && this.Battle_Controller.Pet_Dead_Extra_Check.Pet_Dead_Extra_Check_Script[i].Check();
      },
      Pet_Shoot: function Pet_Shoot() {
        this.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 0;
        this.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        this.Pet_Script.Shoot();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Enemy_Bullet" == other.node.group && 1 == this.Can_Collider_Enemy_Bullet && null != other.node.getComponent("Enemy_Bullet_Common")) {
          for (var i = 0; i < this.Battle_Controller.Pet_Be_Hit_Extra_Check.Script.length; i++) this.Battle_Controller.Pet_Be_Hit_Extra_Check.Script[i].Check(this);
          other.node.getComponent("Enemy_Bullet_Common").Be_Destroy();
        }
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy_Bullet" == otherCollider.node.group && 1 == this.Can_Collider_Enemy_Bullet && null != otherCollider.node.getComponent("Enemy_Bullet_Common")) {
          for (var i = 0; i < this.Battle_Controller.Pet_Be_Hit_Extra_Check.Script.length; i++) this.Battle_Controller.Pet_Be_Hit_Extra_Check.Script[i].Check(this);
          otherCollider.node.getComponent("Enemy_Bullet_Common").Be_Destroy();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Pet_Dead_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "16763vnI5tBxolfeBazguRZ", "Pet_Dead_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Pet_Dead_Extra_Check_Prefab: [ cc.Prefab ],
        Pet_Dead_Extra_Check_Script: [ cc.Node ]
      }
    });
    cc._RF.pop();
  }, {} ],
  Pet_Shasen: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d6326bOH91OUZHHdwxgivv9", "Pet_Shasen");
    "use strict";
    var Pet_Common = require("Pet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Pet_Common: Pet_Common,
        Attack_Bullet_Prefab_Big: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Left_Bound: 0,
        Up_Bound: 0,
        Down_Bound: 0,
        Speed: 500,
        Think_Stage: 0
      },
      start: function start() {
        this.Bullet_Parent = this.Pet_Common.Battle_Controller.Hero_Bullet_Parent;
        this.Particle_Parent = this.Pet_Common.Battle_Controller.Particle_Parent;
        this.Pet_Common.Move();
      },
      Pet_Move: function Pet_Move() {
        var _this = this;
        this.Animation.play("Pet_Shasen_Stay");
        var Dis_X = Math.floor(Math.random() * this.Left_Bound - 1);
        var Dis_Y = Math.floor(Math.random() * (this.Up_Bound - this.Down_Bound + 1) + this.Down_Bound);
        var Dis = Math.sqrt(Math.pow(Dis_X - this.node.x, 2) + Math.pow(Dis_Y - this.node.y, 2));
        var time = Dis / this.Speed;
        cc.tween(this.node).to(1 * time, {
          position: cc.v2(Dis_X, Dis_Y)
        }, {
          easing: "quintInOut"
        }).call(function() {
          _this.Think();
        }).start();
      },
      Think: function Think() {
        this.Animation.play("Pet_Shasen_Attack");
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab_Big);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 94.463;
        Bullet.y = this.node.y;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 3;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = .2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = .2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Pet_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = .3 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab_Big);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 94.463;
        Bullet.y = this.node.y;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 3;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = .2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = .2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Pet_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = .3 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        var angle = Math.floor(121 * Math.random() - 60);
        Bullet.angle = angle;
        Bullet_Script.Ini_Speed = 5e3 * Math.cos(angle * Math.PI / 180);
        Bullet_Script.Ini_Speed_Y = 5e3 * Math.sin(angle * Math.PI / 180);
        Bullet_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab_Big);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 94.463;
        Bullet.y = this.node.y;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 3;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = .2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = .2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Pet_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = .3 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        var angle = Math.floor(121 * Math.random() - 60);
        Bullet.angle = angle;
        Bullet_Script.Ini_Speed = 5e3 * Math.cos(angle * Math.PI / 180);
        Bullet_Script.Ini_Speed_Y = 5e3 * Math.sin(angle * Math.PI / 180);
        Bullet_Script.Set_Speed();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab_Big);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 94.463;
        Bullet.y = this.node.y;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 3;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = .2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = .2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Pet_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = .3 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        var angle = Math.floor(121 * Math.random() - 60);
        Bullet.angle = angle;
        Bullet_Script.Ini_Speed = 5e3 * Math.cos(angle * Math.PI / 180);
        Bullet_Script.Ini_Speed_Y = 5e3 * Math.sin(angle * Math.PI / 180);
        Bullet_Script.Set_Speed();
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Pet_Common: "Pet_Common"
  } ],
  Pet_Tangsen: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11e669IGe5Eab9UiDv4gj5F", "Pet_Tangsen");
    "use strict";
    var Pet_Common = require("Pet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Pet_Common: Pet_Common,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Bo_White: cc.Prefab,
        Left_Bound: 0,
        Up_Bound: 0,
        Down_Bound: 0,
        Speed: 500,
        Think_Stage: 0
      },
      start: function start() {
        this.Bullet_Parent = this.Pet_Common.Battle_Controller.Hero_Bullet_Parent;
        this.Particle_Parent = this.Pet_Common.Battle_Controller.Particle_Parent;
        this.Pet_Common.Move();
      },
      Pet_Move: function Pet_Move() {
        var _this = this;
        this.Animation.play("Pet_Tangsen_Stay");
        var Dis_X = Math.floor(Math.random() * this.Left_Bound - 1);
        var Dis_Y = Math.floor(Math.random() * (this.Up_Bound - this.Down_Bound + 1) + this.Down_Bound);
        var Dis = Math.sqrt(Math.pow(Dis_X - this.node.x, 2) + Math.pow(Dis_Y - this.node.y, 2));
        var time = Dis / this.Speed;
        cc.tween(this.node).to(1 * time, {
          position: cc.v2(Dis_X, Dis_Y)
        }, {
          easing: "quintInOut"
        }).call(function() {
          _this.Think();
        }).start();
      },
      Think: function Think() {
        this.Animation.play("Pet_Tangsen_Attack");
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 94.463;
        Bullet.y = this.node.y;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 3;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = 2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = 2 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Pet_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = .3 * this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Pet_Common: "Pet_Common"
  } ],
  Pet_Wolf_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3812cJMvKtALLa9H/jOriud", "Pet_Wolf_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Pet_Wolf: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d58a1zs25EdroGAep8JvQ+", "Pet_Wolf");
    "use strict";
    var Pet_Common = require("Pet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        Pet_Common: Pet_Common,
        Attack_Bullet_Prefab_Big: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Left_Bound: 0,
        Up_Bound: 0,
        Down_Bound: 0,
        Speed: 500,
        Think_Stage: 0
      },
      start: function start() {
        this.Bullet_Parent = this.Pet_Common.Battle_Controller.Hero_Bullet_Parent;
        this.Particle_Parent = this.Pet_Common.Battle_Controller.Particle_Parent;
        this.Pet_Common.Move();
      },
      Pet_Move: function Pet_Move() {
        var _this = this;
        this.Animation.play("Pet_Wolf_Stay");
        var Dis_X = Math.floor(Math.random() * this.Left_Bound - 1);
        var Dis_Y = Math.floor(Math.random() * (this.Up_Bound - this.Down_Bound + 1) + this.Down_Bound);
        var Dis = Math.sqrt(Math.pow(Dis_X - this.node.x, 2) + Math.pow(Dis_Y - this.node.y, 2));
        var time = Dis / this.Speed;
        cc.tween(this.node).to(1 * time, {
          position: cc.v2(Dis_X, Dis_Y)
        }, {
          easing: "quintInOut"
        }).call(function() {
          _this.Think();
        }).start();
      },
      Think: function Think() {
        this.Animation.play("Pet_Wolf_Attack");
      },
      Shoot: function Shoot() {
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab_Big);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 3;
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Pet_Common.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Pet_Common.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x;
        Attack_Fire_particle.x = this.node.x;
        Attack_Smoke.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Pet_Common: "Pet_Common"
  } ],
  Poison_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e6fb4bHBBM6oIHOslAGfpV", "Poison_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        "Enemy" == otherCollider.node.group && otherCollider.node.getComponent("Enemy_Common").To_Weak();
      }
    });
    cc._RF.pop();
  }, {} ],
  Police_Area_Line_H: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "efc3c4Vv7lLhYCwd+5HvvP9", "Police_Area_Line_H");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        this.node.opacity = 50 * Math.random() + 30;
        cc.tween(this.node).repeatForever(cc.tween().to(10 * Math.random() + 5, {
          position: cc.v2(0, -944.831)
        }).call(function() {
          _this.node.y = 944.831;
          _this.node.opacity = 50 * Math.random() + 30;
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Police_Area_Line_V: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "73269Hy1d9PAYTFe3Wb1vR7", "Police_Area_Line_V");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        this.node.opacity = 50 * Math.random() + 30;
        cc.tween(this.node).repeatForever(cc.tween().to(10 * Math.random() + 5, {
          position: cc.v2(2127.105, 0)
        }).call(function() {
          _this.node.x = -2127.105;
          _this.node.opacity = 50 * Math.random() + 30;
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Police_Attack_Bullet_Gold: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19ec982HxNMP46F+TLYeJGV", "Police_Attack_Bullet_Gold");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy" == otherCollider.node.group) {
          var Enemy_Common = otherCollider.node.getComponent("Enemy_Common");
          null != Enemy_Common && (Enemy_Common.Is_Be_Gold_Bullet_Hit = 1);
        }
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Police_Attack_Bullet_Purple: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f29d6X8BhJM8at0g3K7C+wt", "Police_Attack_Bullet_Purple");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy" == otherCollider.node.group) {
          var Enemy_Common = otherCollider.node.getComponent("Enemy_Common");
          if (null != Enemy_Common) {
            Enemy_Common.Key_People_Attack = this.Hero_Bullet_Common.Attack;
            Enemy_Common.Be_Set_Key_People();
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Police_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c9ddelopAJJAYd+ShFcoIcL", "Police_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Police_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2626dbo6BdLXYZN6ZLPcp4l", "Police_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Police").getComponent("Police");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Police_Bullet_Icon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1474c75KK1Mq6uMnYLZWX8f", "Police_Bullet_Icon");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      To_Last: function To_Last() {
        this.node.x = -80;
      }
    });
    cc._RF.pop();
  }, {} ],
  Police_Crucial_Crosshair: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fdc51ivzlBDv79WsSLxuUWF", "Police_Crucial_Crosshair");
    "use strict";
    var Enemy_Common = require("Enemy_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Enemy_Common: Enemy_Common,
        Rigidbody: cc.RigidBody,
        End_Schedule: cc.Schedule
      },
      start: function start() {
        this.node.x = 0;
        this.node.y = 0;
        this.Rigidbody.syncPosition(true);
        this.Rigidbody.syncRotation(false);
        this.End_Schedule = function() {
          this.Enemy_Common.Police_Crucial_Crosshair_Animation.play("Police_Crucial_Crosshair_Out");
        };
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        "Hero_Bullet" == otherCollider.node.group && (this.Enemy_Common.Be_Hit_Crucial = 1);
      },
      Start_End_Schedule: function Start_End_Schedule() {
        this.scheduleOnce(this.End_Schedule, 8);
      },
      End: function End() {
        this.Enemy_Common.Be_Hit_Crucial = 0;
        this.node.active = false;
      },
      update: function update(dt) {
        this.node.x = 0;
        this.node.y = 0;
      }
    });
    cc._RF.pop();
  }, {
    Enemy_Common: "Enemy_Common"
  } ],
  Police_Extra_Skill_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f46709pzERCI5bD27EzUpBL", "Police_Extra_Skill_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        BG_Sprite: cc.Sprite,
        Is_Cooling: 0,
        Cold_Time: 1
      },
      Skill_Start: function Skill_Start() {
        this.Battle_Controller.Hero_Script.Extra_Skill_Picture_Show();
      }
    });
    cc._RF.pop();
  }, {} ],
  Police_Extra_Skill_Picture: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "89b28GdB9tCDbDGxI4DtvLO", "Police_Extra_Skill_Picture");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Script: cc.Node
      },
      End: function End() {
        null != this.Hero_Script && this.Hero_Script.Extra_Skill_Picture_End();
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Police_Key_People_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "90071sgGSBMKY30UeXc8OWu", "Police_Key_People_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        RigidBody: cc.RigidBody,
        Collider: cc.PhysicsBoxCollider
      },
      start: function start() {
        this.scheduleOnce(function() {
          this.RigidBody.enabledContactListener = true;
          this.Collider.enabled = true;
        }, .1);
      }
    });
    cc._RF.pop();
  }, {} ],
  Police_Sky_Net_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "379a9fO5XtNHLQ4ybIYBEYa", "Police_Sky_Net_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check(Enemy_Common) {
        Enemy_Common.Be_Wanted();
      }
    });
    cc._RF.pop();
  }, {} ],
  Police: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3fa79UWhR1DvKelwIVghE0J", "Police");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Is_Ex: 0,
        Ex_Particle_Parent_Animation: cc.Animation,
        Ex_Finish_Particle: cc.Prefab,
        Ex_Effect_1: cc.Node,
        Ex_Effect_2: cc.Node,
        Ex_Effect_3: cc.Node,
        Crucial_Schedule_First: cc.Schedule,
        Crucial_Schedule: cc.Schedule,
        Two_Star_Bullet_Icon: [ cc.Animation ],
        Two_Star_Bullet_Icon_Ready: cc.Animation,
        Two_Star_Bullet_Number: [ cc.Integer ],
        Two_Star_Bullet_Number_Ready: cc.Integer,
        Attack_Bullet_Purple_Prefab: cc.Prefab,
        Key_People_Bullet: cc.Prefab,
        Five_Star_Bullet_Icon: [ cc.Animation ],
        Five_Star_Bullet_Icon_Ready: cc.Animation,
        Five_Star_Bullet_Number: [ cc.Integer ],
        Five_Star_Bullet_Number_Ready: cc.Integer,
        Attack_Bullet_Gold_Prefab: cc.Prefab,
        Extra_Skill_Button: cc.Prefab,
        Special_Skill_Picture_Prefab: cc.Prefab,
        Is_Open_Area: 0,
        Police_Hit_Extra_Check: cc.Prefab,
        Area_Time: 8,
        Area_Tween: cc.Tween,
        Extra_Check_Item: cc.Node,
        Extra_Check_Item_Script: cc.Node
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Crucial_Schedule_First = function() {
          if (this.Battle_Controller.Enemy_Parent.children.length > 0) for (var i = 0; i < this.Battle_Controller.Enemy_Parent.children.length; i++) null != this.Battle_Controller.Enemy_Parent.children[i] && this.Battle_Controller.Enemy_Parent.children[i].getComponent("Enemy_Common").Show_Crucial();
          this.Start_Crucial_Schedule();
        };
        this.Crucial_Schedule = function() {
          if (this.Battle_Controller.Enemy_Parent.children.length > 0) for (var i = 0; i < this.Battle_Controller.Enemy_Parent.children.length; i++) null != this.Battle_Controller.Enemy_Parent.children[i] && this.Battle_Controller.Enemy_Parent.children[i].getComponent("Enemy_Common").Show_Crucial();
        };
        this.scheduleOnce(this.Crucial_Schedule_First, 10);
        if (this.Battle_Controller.Hero_Star >= 5) {
          this.Five_Star_Bullet_Icon[0].node.parent.active = true;
          this.Five_Star_Bullet_Number = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2 ];
        } else if (this.Battle_Controller.Hero_Star >= 2) {
          this.Two_Star_Bullet_Icon[0].node.parent.active = true;
          this.Two_Star_Bullet_Number = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ];
        }
        if (this.Battle_Controller.Hero_Star >= 3 && this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Number < this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Limit) {
          var Extra_Skill_Button = cc.instantiate(this.Extra_Skill_Button);
          var Script = Extra_Skill_Button.getComponent("Police_Extra_Skill_Button");
          Script.Battle_Controller = this.Battle_Controller;
          switch (this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Number) {
           case 0:
            this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_1.parent.active = true;
            Extra_Skill_Button.parent = this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_1;
            this.Battle_Controller.Extra_Skill_Script.U_Skill = Script;
            this.Battle_Controller.Extra_Skill_Script.Set_U_Skill();
            break;

           case 1:
            this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_2.parent.active = true;
            Extra_Skill_Button.parent = this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_2;
            this.Battle_Controller.Extra_Skill_Script.I_Skill = Script;
            this.Battle_Controller.Extra_Skill_Script.Set_I_Skill();
            break;

           case 2:
            this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_3.parent.active = true;
            Extra_Skill_Button.parent = this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_3;
            this.Battle_Controller.Extra_Skill_Script.O_Skill = Script;
            this.Battle_Controller.Extra_Skill_Script.Set_O_Skill();
            break;

           default:
            console.log("Extra_Skill_Error");
          }
          Extra_Skill_Button.setPosition(0, 0);
          this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Number++;
        }
        this.Battle_Controller.Hero_Star >= 4 && (this.Animation.getAnimationState("Police_Attack").speed = 2 * this.Animation.getAnimationState("Police_Attack").speed);
      },
      Start_Crucial_Schedule: function Start_Crucial_Schedule() {
        this.schedule(this.Crucial_Schedule, 10);
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Battle_Audio_Controller.Attack(0, .1);
        this.Battle_Controller.Camera_Shake_Shoot();
        if (this.Battle_Controller.Hero_Star >= 5) {
          this.Five_Star_Bullet_Icon[0].play("Police_Bullet_Icon_Shoot");
          this.Five_Star_Bullet_Icon_Ready = this.Five_Star_Bullet_Icon[0];
          this.Five_Star_Bullet_Icon[0] = this.Five_Star_Bullet_Icon[1];
          this.Five_Star_Bullet_Icon[1] = this.Five_Star_Bullet_Icon[2];
          this.Five_Star_Bullet_Icon[2] = this.Five_Star_Bullet_Icon[3];
          this.Five_Star_Bullet_Icon[3] = this.Five_Star_Bullet_Icon[4];
          this.Five_Star_Bullet_Icon[4] = this.Five_Star_Bullet_Icon[5];
          this.Five_Star_Bullet_Icon[5] = this.Five_Star_Bullet_Icon[6];
          this.Five_Star_Bullet_Icon[6] = this.Five_Star_Bullet_Icon[7];
          this.Five_Star_Bullet_Icon[7] = this.Five_Star_Bullet_Icon[8];
          this.Five_Star_Bullet_Icon[8] = this.Five_Star_Bullet_Icon[9];
          this.Five_Star_Bullet_Icon[9] = this.Five_Star_Bullet_Icon[10];
          this.Five_Star_Bullet_Icon[10] = this.Five_Star_Bullet_Icon[11];
          this.Five_Star_Bullet_Icon[11] = this.Five_Star_Bullet_Icon_Ready;
          for (var i = 0; i < 11; i++) {
            cc.Tween.stopAllByTarget(this.Five_Star_Bullet_Icon[i].node);
            this.Five_Star_Bullet_Icon[i].stop();
            this.Five_Star_Bullet_Icon[i].node.children[0].x = 0;
            this.Five_Star_Bullet_Icon[i].node.children[0].y = 0;
            this.Five_Star_Bullet_Icon[i].node.children[0].angle = 0;
            this.Five_Star_Bullet_Icon[i].node.children[0].opacity = 255;
            cc.tween(this.Five_Star_Bullet_Icon[i].node).to(.1, {
              position: cc.v2(120 - 20 * i, -80)
            }).start();
          }
          if (2 == this.Five_Star_Bullet_Number[0]) var Bullet = cc.instantiate(this.Attack_Bullet_Gold_Prefab); else if (1 == this.Five_Star_Bullet_Number[0]) var Bullet = cc.instantiate(this.Attack_Bullet_Purple_Prefab); else var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x - 50;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          2 == this.Five_Star_Bullet_Number[0] ? Bullet_Script.Attack = 2 * this.Hero_Common.Attack_Result : Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          1 == this.Is_Ex && (Bullet_Script.Bullet_Hp += 2);
          this.Five_Star_Bullet_Number_Ready = this.Five_Star_Bullet_Number[0];
          this.Five_Star_Bullet_Number[0] = this.Five_Star_Bullet_Number[1];
          this.Five_Star_Bullet_Number[1] = this.Five_Star_Bullet_Number[2];
          this.Five_Star_Bullet_Number[2] = this.Five_Star_Bullet_Number[3];
          this.Five_Star_Bullet_Number[3] = this.Five_Star_Bullet_Number[4];
          this.Five_Star_Bullet_Number[4] = this.Five_Star_Bullet_Number[5];
          this.Five_Star_Bullet_Number[5] = this.Five_Star_Bullet_Number[6];
          this.Five_Star_Bullet_Number[6] = this.Five_Star_Bullet_Number[7];
          this.Five_Star_Bullet_Number[7] = this.Five_Star_Bullet_Number[8];
          this.Five_Star_Bullet_Number[8] = this.Five_Star_Bullet_Number[9];
          this.Five_Star_Bullet_Number[9] = this.Five_Star_Bullet_Number[10];
          this.Five_Star_Bullet_Number[10] = this.Five_Star_Bullet_Number[11];
          this.Five_Star_Bullet_Number[11] = this.Five_Star_Bullet_Number_Ready;
        } else if (this.Battle_Controller.Hero_Star >= 2) {
          this.Two_Star_Bullet_Icon[0].play("Police_Bullet_Icon_Shoot");
          this.Two_Star_Bullet_Icon_Ready = this.Two_Star_Bullet_Icon[0];
          this.Two_Star_Bullet_Icon[0] = this.Two_Star_Bullet_Icon[1];
          this.Two_Star_Bullet_Icon[1] = this.Two_Star_Bullet_Icon[2];
          this.Two_Star_Bullet_Icon[2] = this.Two_Star_Bullet_Icon[3];
          this.Two_Star_Bullet_Icon[3] = this.Two_Star_Bullet_Icon[4];
          this.Two_Star_Bullet_Icon[4] = this.Two_Star_Bullet_Icon[5];
          this.Two_Star_Bullet_Icon[5] = this.Two_Star_Bullet_Icon[6];
          this.Two_Star_Bullet_Icon[6] = this.Two_Star_Bullet_Icon[7];
          this.Two_Star_Bullet_Icon[7] = this.Two_Star_Bullet_Icon[8];
          this.Two_Star_Bullet_Icon[8] = this.Two_Star_Bullet_Icon[9];
          this.Two_Star_Bullet_Icon[9] = this.Two_Star_Bullet_Icon_Ready;
          for (var i = 0; i < 9; i++) {
            cc.Tween.stopAllByTarget(this.Two_Star_Bullet_Icon[i].node);
            this.Two_Star_Bullet_Icon[i].stop();
            this.Two_Star_Bullet_Icon[i].node.children[0].x = 0;
            this.Two_Star_Bullet_Icon[i].node.children[0].y = 0;
            this.Two_Star_Bullet_Icon[i].node.children[0].angle = 0;
            this.Two_Star_Bullet_Icon[i].node.children[0].opacity = 255;
            cc.tween(this.Two_Star_Bullet_Icon[i].node).to(.1, {
              position: cc.v2(100 - 20 * i, -80)
            }).start();
          }
          if (1 == this.Two_Star_Bullet_Number[0]) var Bullet = cc.instantiate(this.Attack_Bullet_Purple_Prefab); else var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x - 50;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          1 == this.Is_Ex && (Bullet_Script.Bullet_Hp += 2);
          this.Two_Star_Bullet_Number_Ready = this.Two_Star_Bullet_Number[0];
          this.Two_Star_Bullet_Number[0] = this.Two_Star_Bullet_Number[1];
          this.Two_Star_Bullet_Number[1] = this.Two_Star_Bullet_Number[2];
          this.Two_Star_Bullet_Number[2] = this.Two_Star_Bullet_Number[3];
          this.Two_Star_Bullet_Number[3] = this.Two_Star_Bullet_Number[4];
          this.Two_Star_Bullet_Number[4] = this.Two_Star_Bullet_Number[5];
          this.Two_Star_Bullet_Number[5] = this.Two_Star_Bullet_Number[6];
          this.Two_Star_Bullet_Number[6] = this.Two_Star_Bullet_Number[7];
          this.Two_Star_Bullet_Number[7] = this.Two_Star_Bullet_Number[8];
          this.Two_Star_Bullet_Number[8] = this.Two_Star_Bullet_Number[9];
          this.Two_Star_Bullet_Number[9] = this.Two_Star_Bullet_Number_Ready;
        } else {
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x - 50;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          1 == this.Is_Ex && (Bullet_Script.Bullet_Hp += 2);
        }
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 30;
        Attack_Smoke.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        if (0 == this.Is_Ex) {
          this.Is_Doing_Something++;
          this.Is_Ex = 1;
          this.Can_Injured--;
          this.Hero_Common.Skill_Picture();
        }
      },
      Skill_Shoot: function Skill_Shoot() {
        this.Animation.play("Police_To_Ex");
        this.schedule(function() {
          this.Battle_Controller.Camera_Shake_Small();
        }, .05, 20, 0);
      },
      Skill_Finish: function Skill_Finish() {
        var Particle = cc.instantiate(this.Ex_Finish_Particle);
        Particle.parent = this.Particle_Parent;
        Particle.x = this.node.x + 23.867;
        Particle.y = this.node.y + 30.253;
        this.Battle_Controller.Camera_Shake_Big();
        this.Back_To_Stay();
        this.Ex_Effect_1.y = 12.138;
        this.Ex_Effect_2.y = 12.138;
        this.Ex_Effect_3.y = 1.115;
        this.Can_Injured++;
        this.Animation.getAnimationState("Police_Attack").speed = 2 * this.Animation.getAnimationState("Police_Attack").speed;
        this.Battle_Controller.Normal_Attack_Addition_Add(100);
        this.scheduleOnce(function() {
          this.Animation.getAnimationState("Police_Attack").speed = this.Animation.getAnimationState("Police_Attack").speed / 2;
          this.Battle_Controller.Normal_Attack_Addition_Reduce(100);
          this.Is_Ex = 0;
          this.Ex_Particle_Parent_Animation.play("Police_Ex_Particle_End");
        }, 10);
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      },
      Shoot_Key_People_Bullet: function Shoot_Key_People_Bullet(x, y) {
        for (var i = 0; i < 5; i++) {
          var Bullet = cc.instantiate(this.Key_People_Bullet);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = x;
          Bullet.y = y;
          Bullet.angle = 72 * i;
          this.Hero_Common.Count_Is_Skill = -1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        }
      },
      Extra_Skill_Picture_Show: function Extra_Skill_Picture_Show() {
        this.Battle_Controller.Stop_Enemy_Bullet();
        this.Battle_Controller.Stop_Enemy_Move();
        this.Can_Injured--;
        var Skill_Picture = cc.instantiate(this.Special_Skill_Picture_Prefab);
        Skill_Picture.parent = this.Battle_Controller.Hero_Skill_Picture_Parent;
        Skill_Picture.setPosition(0, 0);
        Skill_Picture.getComponent("Hero_Skill_Picture_Common").Hero_Script = this;
      },
      Skill_Picture_End: function Skill_Picture_End() {
        this.Battle_Controller.Restore_Enemy_Bullet();
        this.Battle_Controller.Restore_Enemy_Move();
        this.Can_Injured++;
        this.Special_Skill();
      },
      Special_Skill: function Special_Skill() {
        var _this = this;
        if (0 == this.Is_Open_Area) {
          this.Is_Open_Area = 1;
          this.Extra_Check_Item = cc.instantiate(this.Police_Hit_Extra_Check);
          this.Extra_Check_Item.parent = this.Battle_Controller.Bullet_Hit_Extra_Check.node;
          this.Extra_Check_Item_Script = this.Extra_Check_Item.getComponent(this.Extra_Check_Item.name);
          this.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script.push(this.Extra_Check_Item_Script);
          this.Extra_Check_Item_Script.Battle_Controller = this.Battle_Controller;
        }
        this.Battle_Controller.Area_Parent.children[1].active = true;
        this.Battle_Controller.Area_Parent.children[1].opacity = 0;
        null != this.Area_Tween && this.Area_Tween.stop();
        this.Area_Tween = cc.tween(this.Battle_Controller.Area_Parent.children[1]).to(1, {
          opacity: 255
        }).delay(this.Area_Time - 1.5).to(.5, {
          opacity: 0
        }).call(function() {
          _this.Is_Open_Area = 0;
          _this.Battle_Controller.Area_Parent.children[1].active = false;
          if (null != _this.Extra_Check_Item) {
            _this.Extra_Check_Item.destroy();
            for (var i = 0; i < _this.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script.length; i++) if (_this.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script[i] == _this.Extra_Check_Item_Script) {
              _this.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script.splice(i, 1);
              break;
            }
          }
          _this.Hero_Common.Count_Is_Skill = -1;
          _this.Hero_Common.Attack_Count();
          if (_this.Battle_Controller.Enemy_Parent.children.length > 0) for (var i = 0; i < _this.Battle_Controller.Enemy_Parent.children.length; i++) _this.Battle_Controller.Enemy_Parent.children[i].getComponent("Enemy_Common").Police_Wanted_Injured(5 * _this.Hero_Common.Attack_Result);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Property_Count: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34770+TUldOooFQpNny5kbm", "Property_Count");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Qitian_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5589mGt1hEDqMB10jaTYsD", "Qitian_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Qitian").getComponent("Qitian");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Qitian_FS_Image: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "88af9zootxCn6p/DQAJzzg6", "Qitian_FS_Image");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Bullet: cc.Prefab,
        Battle_Controller: cc.Node,
        Hero_Common: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab
      },
      Shoot: function Shoot(Stage) {
        if (0 == Stage) {
          var Bullet = cc.instantiate(this.Bullet);
          Bullet.parent = this.Battle_Controller.Hero_Bullet_Parent;
          Bullet.x = this.node.parent.x + 106.993;
          Bullet.y = this.node.parent.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
          var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
          Attack_Smoke.parent = this.Battle_Controller.Particle_Parent;
          Attack_Smoke_White.parent = this.Battle_Controller.Particle_Parent;
          Attack_Fire_particle.parent = this.Battle_Controller.Particle_Parent;
          Attack_Smoke.x = this.node.parent.x + 80;
          Attack_Smoke_White.x = this.node.parent.x + 80;
          Attack_Fire_particle.x = this.node.parent.x + 80;
          Attack_Smoke.y = this.node.parent.y;
          Attack_Smoke_White.y = this.node.parent.y;
          Attack_Fire_particle.y = this.node.parent.y;
        } else {
          var Bullet = cc.instantiate(this.Bullet);
          Bullet.parent = this.Battle_Controller.Hero_Bullet_Parent;
          Bullet.x = this.node.parent.x + 106.993;
          Bullet.y = this.node.parent.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Bullet = cc.instantiate(this.Bullet);
          Bullet.parent = this.Battle_Controller.Hero_Bullet_Parent;
          Bullet.x = this.node.parent.x + 106.993;
          Bullet.y = this.node.parent.y;
          Bullet.angle = 20;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Bullet);
          Bullet.parent = this.Battle_Controller.Hero_Bullet_Parent;
          Bullet.x = this.node.parent.x + 106.993;
          Bullet.y = this.node.parent.y;
          Bullet.angle = -20;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
          var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
          Attack_Smoke.parent = this.Battle_Controller.Particle_Parent;
          Attack_Smoke_White.parent = this.Battle_Controller.Particle_Parent;
          Attack_Fire_particle.parent = this.Battle_Controller.Particle_Parent;
          Attack_Smoke.x = this.node.parent.x + 80;
          Attack_Smoke_White.x = this.node.parent.x + 80;
          Attack_Fire_particle.x = this.node.parent.x + 80;
          Attack_Smoke.y = this.node.parent.y;
          Attack_Smoke_White.y = this.node.parent.y;
          Attack_Fire_particle.y = this.node.parent.y;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Qitian_FS: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0539bHLluhKJo227KCUtR8C", "Qitian_FS");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      Close: function Close() {
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {} ],
  Qitian_FTXD_Injured_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "295e9rQA+hCOKXI09EPWk/9", "Qitian_FTXD_Injured_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        if (0 == this.Battle_Controller.Hero_Script.Is_FTXD && this.Battle_Controller.Hp <= .8 * this.Battle_Controller.Full_Hp) {
          this.Battle_Controller.Hero_Script.Is_FTXD = 1;
          this.Battle_Controller.Hero_Script.FTXD_Picture_Show();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Qitian_FTXD_Parent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d000d6SGK9Agq6h34KszQAC", "Qitian_FTXD_Parent");
    "use strict";
    var Qitian = require("Qitian");
    cc.Class({
      extends: cc.Component,
      properties: {
        Qitian: Qitian,
        Bomb_Particle: cc.Prefab
      },
      Finish_Born: function Finish_Born() {
        this.Qitian.Battle_Controller.Camera_Shake_Big();
        var Bomb_Particle = cc.instantiate(this.Bomb_Particle);
        Bomb_Particle.parent = this.Qitian.Battle_Controller.Particle_Parent;
        Bomb_Particle.x = this.node.x + this.Qitian.node.x - 150;
        Bomb_Particle.y = this.node.y + this.Qitian.node.y;
        var Bomb_Particle = cc.instantiate(this.Bomb_Particle);
        Bomb_Particle.parent = this.Qitian.Battle_Controller.Particle_Parent;
        Bomb_Particle.x = this.node.x + this.Qitian.node.x - 150;
        Bomb_Particle.y = this.node.y + this.Qitian.node.y + 200;
        var Bomb_Particle = cc.instantiate(this.Bomb_Particle);
        Bomb_Particle.parent = this.Qitian.Battle_Controller.Particle_Parent;
        Bomb_Particle.x = this.node.x + this.Qitian.node.x - 150;
        Bomb_Particle.y = this.node.y + this.Qitian.node.y - 200;
      }
    });
    cc._RF.pop();
  }, {
    Qitian: "Qitian"
  } ],
  Qitian_FTXD_Picture: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2b7b3noTYRPdKAWNt6OuJ7W", "Qitian_FTXD_Picture");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Script: cc.Node
      },
      End: function End() {
        null != this.Hero_Script && this.Hero_Script.FTXD_Start();
      },
      Sound: function Sound() {
        this.Hero_Script.Battle_Controller.Battle_Audio_Controller.Other(4, 1);
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Qitian_Skill_Bullet_Big: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7b7b6XK1RROmL4O/VcZakKX", "Qitian_Skill_Bullet_Big");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Particle: [ cc.ParticleSystem ],
        Animation: cc.Animation
      },
      Disappear: function Disappear() {
        this.Animation.play();
        for (var i = 0; i < this.Particle.length; i++) {
          this.Particle[i].node.parent = this.Battle_Controller.Particle_Parent;
          this.Particle[i].duration = 1;
        }
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy;
      }
    });
    cc._RF.pop();
  }, {} ],
  Qitian_Skill_True_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6b79ca8jzxBxpiRfAPYcvZ6", "Qitian_Skill_True_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Jing_Jie: 0,
        Attack: 0,
        Crit_Rate: 0,
        Crit_Mult: 0,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Enemy" == other.node.group) {
          var Enemy_Common = other.node.getComponent("Enemy_Common");
          if (null != Enemy_Common) {
            Enemy_Common.Injured(this.Jing_Jie, this.Attack, this.Crit_Rate, this.Crit_Mult, 2);
            var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
            Hit_Efffect.parent = this.Battle_Controller.Particle_Parent;
            Hit_Efffect.x = other.node.x + Enemy_Common.Image_Offset_X;
            Hit_Efffect.y = other.node.y + Enemy_Common.Image_Offset_Y;
            var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
            Hit_Particle.parent = this.Battle_Controller.Particle_Parent;
            Hit_Particle.x = other.node.x + Enemy_Common.Image_Offset_X;
            Hit_Particle.y = other.node.y + Enemy_Common.Image_Offset_Y;
            var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
            Hit_Smoke.parent = this.Battle_Controller.Particle_Parent;
            Hit_Smoke.x = other.node.x + Enemy_Common.Image_Offset_X;
            Hit_Smoke.y = other.node.y + Enemy_Common.Image_Offset_Y;
          }
        }
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Qitian_Weapon_Roll: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bec25/SJVlFravhmisOSK4r", "Qitian_Weapon_Roll");
    "use strict";
    var Motion_Streak_Script = require("Motion_Streak_Script");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Script: cc.Node,
        Particle: [ cc.ParticleSystem ],
        Motion_Streak_Script: Motion_Streak_Script
      },
      update: function update() {
        null != this.Hero_Script && cc.tween(this.node).delay(1e-5).to(Math.abs(this.node.x - this.Hero_Script.node.x - this.Hero_Script.Hero_Common.Image_Offset_X) / 1500, {
          position: cc.v2(this.Hero_Script.node.x + this.Hero_Script.Hero_Common.Image_Offset_X, this.Hero_Script.node.y + this.Hero_Script.Hero_Common.Image_Offset_Y)
        }).start();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Hero" == other.node.group) {
          for (var i = 0; i < this.Particle.length; i++) {
            this.Particle[i].node.parent = this.Hero_Script.Battle_Controller.Particle_Parent;
            this.Particle[i].emissionRate = 0;
            this.Particle[i].duration = 3;
          }
          this.Motion_Streak_Script.parent = this.Hero_Script.Battle_Controller.Particle_Parent;
          this.Motion_Streak_Script.Wait_Destroy();
          this.Hero_Script.Skill_Back();
          this.node.destroy();
        }
      }
    });
    cc._RF.pop();
  }, {
    Motion_Streak_Script: "Motion_Streak_Script"
  } ],
  Qitian: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f058882GTRM1pKtLJ/1sqGE", "Qitian");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Skill_Bullet_Prefab: cc.Prefab,
        Wukong_FS_Recovery_Bullet: cc.Prefab,
        Sprite: cc.Sprite,
        Skill_SpriteFrame: [ cc.SpriteFrame ],
        Skill_Bullet_Up: cc.Prefab,
        Up_To_Down_Fire: cc.Prefab,
        Target_ID: 0,
        Target_Hp: 0,
        Target_X: 0,
        Big_Skill_Bullet: cc.Prefab,
        Skill_True_Bullet: cc.Prefab,
        Qitian_Weapon_Roll: cc.Prefab,
        Qitian_FTXD_Injured_Extra_Check: cc.Prefab,
        Is_FTXD: 0,
        Is_Finish_Born: 0,
        FTXD_Picture: cc.Prefab,
        FTXD_Parent_Animation: cc.Animation
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Battle_Controller.Qitian_FS_Image.Battle_Controller = this.Battle_Controller;
        this.Battle_Controller.Qitian_FS_Image.Hero_Common = this.Hero_Common;
        var node = cc.instantiate(this.Qitian_FTXD_Injured_Extra_Check);
        node.parent = this.Battle_Controller.Hero_Be_Hit_Extra_Check.node;
        var Script = node.getComponent(node.name);
        this.Battle_Controller.Hero_Be_Hit_Extra_Check.Hero_Be_Hit_Extra_Check_Script.push(Script);
        Script.Battle_Controller = this.Battle_Controller;
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
          this.Battle_Controller.Qitian_FS.node.active = true;
          this.Battle_Controller.Qitian_FS.node.x = this.node.x + 300;
          this.Battle_Controller.Qitian_FS.node.y = this.node.y;
          this.Battle_Controller.Qitian_FS_Parent_Animation.play("Qitian_FS_Born");
          this.Battle_Controller.Qitian_FS_Animation.play("Qitian_FS_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          this.Battle_Controller.Qitian_FS_Parent_Animation.play("Qitian_FS_Close");
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Camera_Shake_Shoot();
        if (0 == this.Hero_Common.Shoot_Stage) {
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 106.993;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
          var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
          Attack_Smoke.parent = this.Particle_Parent;
          Attack_Smoke_White.parent = this.Particle_Parent;
          Attack_Fire_particle.parent = this.Particle_Parent;
          Attack_Smoke.x = this.node.x + 80;
          Attack_Smoke_White.x = this.node.x + 80;
          Attack_Fire_particle.x = this.node.x + 80;
          Attack_Smoke.y = this.node.y;
          Attack_Smoke_White.y = this.node.y;
          Attack_Fire_particle.y = this.node.y;
        } else {
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 106.993;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 106.993;
          Bullet.y = this.node.y;
          Bullet.angle = 20;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 106.993;
          Bullet.y = this.node.y;
          Bullet.angle = -20;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
          var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
          Attack_Smoke.parent = this.Particle_Parent;
          Attack_Smoke_White.parent = this.Particle_Parent;
          Attack_Fire_particle.parent = this.Particle_Parent;
          Attack_Smoke.x = this.node.x + 80;
          Attack_Smoke_White.x = this.node.x + 80;
          Attack_Fire_particle.x = this.node.x + 80;
          Attack_Smoke.y = this.node.y;
          Attack_Smoke_White.y = this.node.y;
          Attack_Fire_particle.y = this.node.y;
        }
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Hero_Common.Skill_Picture();
        this.Can_Injured--;
        this.Is_Doing_Something++;
      },
      Skill_Shoot: function Skill_Shoot() {
        this.Animation.play("Qitian_Skill");
      },
      Skill_Show: function Skill_Show() {
        var _this = this;
        this.Battle_Controller.Camera_Shake_Shoot();
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 26.165;
        Attack_Smoke_White.x = this.node.x + 26.165;
        Attack_Fire_particle.x = this.node.x + 26.165;
        Attack_Smoke.y = this.node.y + 31.665;
        Attack_Smoke_White.y = this.node.y + 31.665;
        Attack_Fire_particle.y = this.node.y + 31.665;
        var Skill_Bullet_Up = cc.instantiate(this.Skill_Bullet_Up);
        Skill_Bullet_Up.parent = this.Particle_Parent;
        Skill_Bullet_Up.x = this.node.x + 26.165;
        Skill_Bullet_Up.y = this.node.y + 119.733;
        cc.tween(Skill_Bullet_Up).by(.5, {
          position: cc.v2(0, 2e3)
        }).call(function() {
          _this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
          _this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 200));
          var Target_Number = _this.Battle_Controller.Enemy_Parent.children.length;
          if (Target_Number > 0) {
            for (var i = 0; i < Target_Number; i++) if (null != _this.Battle_Controller.Enemy_Parent.children[i]) {
              var Hp = _this.Battle_Controller.Enemy_Parent.children[i].getComponent("Enemy_Common").Hp;
              if (Hp > _this.Target_Hp) {
                _this.Target_ID = i;
                _this.Target_Hp = Hp;
              }
            }
            null != _this.Battle_Controller.Enemy_Parent.children[_this.Target_ID] && (_this.Target_X = _this.Battle_Controller.Enemy_Parent.children[_this.Target_ID].x);
          }
          var Up_To_Down_Fire = cc.instantiate(_this.Up_To_Down_Fire);
          Up_To_Down_Fire.parent = _this.Particle_Parent;
          Up_To_Down_Fire.x = _this.Target_X;
          Up_To_Down_Fire.y = 1045;
          _this.schedule(function() {
            this.Battle_Controller.Camera_Shake_Medium();
          }, .05, 10, 0);
          _this.schedule(function() {
            this.Battle_Controller.Camera_Shake_Medium();
          }, .05, 10, 0);
        }).delay(1).call(function() {
          var Big_Skill_Bullet = cc.instantiate(_this.Big_Skill_Bullet);
          Big_Skill_Bullet.parent = _this.Particle_Parent;
          null != _this.Battle_Controller.Enemy_Parent.children[_this.Target_ID] && (_this.Target_X = _this.Battle_Controller.Enemy_Parent.children[_this.Target_ID].x);
          Big_Skill_Bullet.x = _this.Target_X;
          Big_Skill_Bullet.y = 3862.083;
          _this.Hero_Common.Count_Is_Skill = 1;
          _this.Hero_Common.Attack_Count();
          _this.Battle_Controller.Camera_Shake_Big();
          var Skill_True_Bullet = cc.instantiate(_this.Skill_True_Bullet);
          Skill_True_Bullet.parent = _this.Particle_Parent;
          Skill_True_Bullet.x = _this.Target_X;
          Skill_True_Bullet.y = 0;
          var Bullet_Script = Skill_True_Bullet.getComponent("Qitian_Skill_True_Bullet");
          Bullet_Script.Battle_Controller = _this.Battle_Controller;
          Bullet_Script.Jing_Jie = _this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = 5 * _this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = _this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = _this.Hero_Common.Crit_Mult_Result;
          cc.tween(Big_Skill_Bullet).to(.1, {
            position: cc.v2(0, 814.936)
          }).call(function() {
            _this.Hero_Common.Count_Is_Skill = 1;
            _this.Hero_Common.Attack_Count();
            _this.schedule(function() {
              this.Battle_Controller.Camera_Shake_Big();
              var Skill_True_Bullet = cc.instantiate(this.Skill_True_Bullet);
              Skill_True_Bullet.parent = this.Particle_Parent;
              Skill_True_Bullet.x = this.Target_X;
              Skill_True_Bullet.y = 0;
              var Bullet_Script = Skill_True_Bullet.getComponent("Qitian_Skill_True_Bullet");
              Bullet_Script.Battle_Controller = this.Battle_Controller;
              Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
              Bullet_Script.Attack = 5 * this.Hero_Common.Attack_Result;
              Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
              Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
            }, .2, 3, 0);
          }).delay(.8).call(function() {
            _this.Animation.play("Qitian_Skill_Wait");
            var Qitian_Skill_Bullet_Big_Script = Big_Skill_Bullet.getComponent("Qitian_Skill_Bullet_Big");
            Qitian_Skill_Bullet_Big_Script.Battle_Controller = _this.Battle_Controller;
            Qitian_Skill_Bullet_Big_Script.Disappear();
            _this.Target_Hp = 0;
            _this.Target_X = 0;
            _this.Target_ID = 0;
            var Qitian_Weapon_Roll = cc.instantiate(_this.Qitian_Weapon_Roll);
            Qitian_Weapon_Roll.parent = _this.Particle_Parent;
            Qitian_Weapon_Roll.x = _this.Target_X;
            Qitian_Weapon_Roll.y = 0;
            var Qitian_Weapon_Roll_Script = Qitian_Weapon_Roll.getComponent("Qitian_Weapon_Roll");
            Qitian_Weapon_Roll_Script.Hero_Script = _this;
            _this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
            _this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(2.5, 0));
            Skill_Bullet_Up.destroy();
          }).start();
        }).start();
      },
      Skill_Back: function Skill_Back() {
        this.Can_Injured++;
        this.Back_To_Stay();
      },
      FTXD_Picture_Show: function FTXD_Picture_Show() {
        this.Battle_Controller.Battle_Audio_Controller.Other(2, 1);
        this.Can_Injured--;
        var Skill_Picture = cc.instantiate(this.FTXD_Picture);
        Skill_Picture.parent = this.Battle_Controller.Hero_Skill_Picture_Parent;
        Skill_Picture.setPosition(0, 0);
        Skill_Picture.getComponent("Qitian_FTXD_Picture").Hero_Script = this;
      },
      FTXD_Start: function FTXD_Start() {
        this.Can_Injured++;
        this.FTXD_Parent_Animation.node.active = true;
        this.FTXD_Parent_Animation.play();
        this.schedule(function() {
          this.Battle_Controller.Camera_Shake_Big();
        }, .2, 6, 0);
      },
      FTXD_Finish_Born: function FTXD_Finish_Born() {},
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Railing: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "31cebRzM6pDZrRLyMRcfQnj", "Railing");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      update: function update(dt) {
        this.node.x -= 100;
        this.node.x <= -3955.742 && (this.node.x = 3955.742);
      }
    });
    cc._RF.pop();
  }, {} ],
  Rain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5a54EE02FMaZDlVFLsGUil", "Rain");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().by(1.5 * Math.random() + .05, {
          position: cc.v2(-1e3, -2e3)
        }).call(function() {
          _this.node.angle = 10 * Math.random() - 30;
          _this.node.scaleX = .05 * Math.random() + .01;
          _this.node.scaleY = .8 * Math.random() + .05;
          _this.node.y = 973.194;
          var a = Math.round(Math.random());
          _this.node.x = 1 == a ? 3004.721 * Math.random() : -1917.483 * Math.random();
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Ready_All_Black: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "39f6bb/PYZGPb11DgZ3dYFB", "Ready_All_Black");
    "use strict";
    var Ready_Controller = require("Ready_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Ready_Controller: Ready_Controller
      },
      start: function start() {
        var _this = this;
        cc.tween(this.node).to(1, {
          opacity: 0
        }).call(function() {
          0 == _this.Ready_Controller.Stage && (_this.Ready_Controller.Stage = 1);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Ready_Controller: "Ready_Controller"
  } ],
  Ready_Back_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3291bIbNHJAUotkGmwjxgjR", "Ready_Back_Button");
    "use strict";
    var Ready_Controller = require("Ready_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Ready_Controller: Ready_Controller,
        Image: cc.Node
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Ready_Controller.Stage || 2 == this.Ready_Controller.Stage) {
            cc.Tween.stopAllByTarget(this.Image);
            cc.tween(this.Image).to(.3, {
              scale: .7
            }).to(.2, {
              scale: .8
            }).start();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          var _this = this;
          if (1 == this.Ready_Controller.Stage) {
            cc.Tween.stopAllByTarget(this.Image);
            cc.tween(this.Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: .95
            }).to(.1, {
              scale: 1
            }).start();
            this.Ready_Controller.Stage = 3;
            cc.tween(this.Ready_Controller.All_Black).to(.5, {
              opacity: 255
            }).call(function() {
              cc.tween(_this.Ready_Controller.Load_Label.node).to(1, {
                opacity: 255
              }).start();
              var Progress = 0;
              var Load_Label = _this.Ready_Controller.Load_Label;
              var Load_Bar = _this.Ready_Controller.Load_Bar;
              cc.director.preloadScene("Main", function(completedCount, totalCount) {
                Load_Bar.scaleX = completedCount / totalCount;
                Progress = completedCount / totalCount * 100;
                Load_Label.string = Math.floor(Progress) + "%";
              }, function() {
                cc.director.loadScene("Main");
              });
            }).start();
          } else if (2 == this.Ready_Controller.Stage) {
            cc.Tween.stopAllByTarget(this.Image);
            cc.tween(this.Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: .95
            }).to(.1, {
              scale: 1
            }).start();
            this.Ready_Controller.Hero_Select_To_Enemy_Show();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          if (1 == this.Ready_Controller.Stage || 2 == this.Ready_Controller.Stage) {
            cc.Tween.stopAllByTarget(this.Image);
            cc.tween(this.Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Ready_Controller: "Ready_Controller"
  } ],
  Ready_Controller: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bd7c1uStPJPDpUas01W+KdP", "Ready_Controller");
    "use strict";
    var Hero_Select_Head = require("Hero_Select_Head");
    cc.Class({
      extends: cc.Component,
      properties: {
        Stage: 0,
        All_Black: cc.Node,
        Back_Button: cc.Node,
        Next_Button: cc.Node,
        Load_Label: cc.Label,
        Load_Bar: cc.Node,
        Enemy_Show_Title_Animation: cc.Animation,
        Now_Level_Show_Parent: cc.Node,
        Next_Level_Show_Parent: cc.Node,
        Last_Level_Show_Parent: cc.Node,
        Hero_Select_BG: cc.Node,
        Hero_Select_Head: [ Hero_Select_Head ],
        Select_Hero_Head_Index: 0
      },
      start: function start() {
        for (var i = 0; i < this.Hero_Select_Head.length; i++) this.Hero_Select_Head[i].Ready_Controller = this;
      },
      Enemy_Show_To_Hero_Select: function Enemy_Show_To_Hero_Select() {
        var _this = this;
        this.Stage = 3;
        cc.Tween.stopAllByTarget(this.Now_Level_Show_Parent);
        cc.tween(this.Now_Level_Show_Parent).to(.3, {
          scale: .5
        }, {
          easing: "cubicInOut"
        }).to(.3, {
          scale: 1.5,
          opacity: 0
        }, {
          easing: "cubicInOut"
        }).start();
        cc.Tween.stopAllByTarget(this.Next_Level_Show_Parent);
        cc.tween(this.Next_Level_Show_Parent).to(.3, {
          x: -500,
          scaleX: .2
        }, {
          easing: "cubicInOut"
        }).to(.3, {
          x: 500,
          scaleX: 2,
          opacity: 0
        }, {
          easing: "cubicInOut"
        }).to(.3, {
          scale: 1
        }, {
          easing: "cubicInOut"
        }).start();
        cc.Tween.stopAllByTarget(this.Last_Level_Show_Parent);
        cc.tween(this.Last_Level_Show_Parent).to(.3, {
          x: 500,
          scaleX: .2
        }, {
          easing: "cubicInOut"
        }).to(.3, {
          x: -500,
          scaleX: 2,
          opacity: 0
        }, {
          easing: "cubicInOut"
        }).to(.3, {
          scale: 1
        }, {
          easing: "cubicInOut"
        }).start();
        this.Enemy_Show_Title_Animation.play("Enemy_Show_Title_Change");
        cc.Tween.stopAllByTarget(this.Enemy_Show_Title_Animation.node);
        cc.tween(this.Enemy_Show_Title_Animation.node).to(.3, {
          scaleX: .5
        }, {
          easing: "cubicInOut"
        }).to(.3, {
          scaleX: 2,
          opacity: 0
        }, {
          easing: "cubicInOut"
        }).call(function() {
          _this.Stage = 2;
          cc.Tween.stopAllByTarget(_this.Hero_Select_BG);
          cc.tween(_this.Hero_Select_BG).to(.1, {
            x: -920.782,
            scaleX: 2
          }, {
            easing: "cubicInOut"
          }).to(.1, {
            x: -1300,
            scaleX: 1
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            x: -1e3,
            scaleX: 1.8
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            x: -1150,
            scaleX: 1.3
          }, {
            easing: "quadInOut"
          }).to(.2, {
            x: -1104.782,
            scaleX: 1.4
          }, {
            easing: "quadInOut"
          }).start();
        }).start();
      },
      Hero_Select_To_Enemy_Show: function Hero_Select_To_Enemy_Show() {
        var _this2 = this;
        this.Stage = 3;
        cc.Tween.stopAllByTarget(this.Hero_Select_BG);
        cc.tween(this.Hero_Select_BG).to(.3, {
          x: -850.782,
          scaleX: 1
        }, {
          easing: "cubicInOut"
        }).to(.3, {
          x: -2127.436,
          scaleX: 1.4
        }, {
          easing: "cubicInOut"
        }).call(function() {
          _this2.Stage = 1;
          cc.Tween.stopAllByTarget(_this2.Now_Level_Show_Parent);
          cc.tween(_this2.Now_Level_Show_Parent).to(.1, {
            scale: .7,
            opacity: 255
          }, {
            easing: "cubicInOut"
          }).to(.1, {
            scale: 1.2
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            scale: .9
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            scale: 1
          }, {
            easing: "cubicInOut"
          }).start();
          cc.Tween.stopAllByTarget(_this2.Next_Level_Show_Parent);
          cc.tween(_this2.Next_Level_Show_Parent).to(.1, {
            x: -500,
            scaleX: .5,
            opacity: 255
          }, {
            easing: "cubicInOut"
          }).to(.1, {
            x: 300,
            scaleX: 1.3
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            x: -200,
            scaleX: .8
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            x: 0,
            scaleX: 1
          }, {
            easing: "cubicInOut"
          }).start();
          cc.Tween.stopAllByTarget(_this2.Last_Level_Show_Parent);
          cc.tween(_this2.Last_Level_Show_Parent).to(.1, {
            x: 500,
            scaleX: .5,
            opacity: 255
          }, {
            easing: "cubicInOut"
          }).to(.1, {
            x: -300,
            scaleX: 1.3
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            x: 200,
            scaleX: .8
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            x: 0,
            scaleX: 1
          }, {
            easing: "cubicInOut"
          }).start();
          _this2.Enemy_Show_Title_Animation.play("Enemy_Show_Title_Change");
          cc.Tween.stopAllByTarget(_this2.Enemy_Show_Title_Animation.node);
          cc.tween(_this2.Enemy_Show_Title_Animation.node).to(.1, {
            scale: .7,
            opacity: 255
          }, {
            easing: "cubicInOut"
          }).to(.1, {
            scale: 1.2
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            scale: .9
          }, {
            easing: "cubicInOut"
          }).to(.2, {
            scale: 1
          }, {
            easing: "cubicInOut"
          }).start();
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Hero_Select_Head: "Hero_Select_Head"
  } ],
  Ready_Next_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d20c3vY2zZNoJgm2NVA+2j1", "Ready_Next_Button");
    "use strict";
    var Ready_Controller = require("Ready_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Ready_Controller: Ready_Controller,
        Image: cc.Node
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Ready_Controller.Stage) {
            cc.Tween.stopAllByTarget(this.Image);
            cc.tween(this.Image).to(.3, {
              scale: .7
            }).to(.2, {
              scale: .8
            }).start();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          if (1 == this.Ready_Controller.Stage) {
            cc.Tween.stopAllByTarget(this.Image);
            cc.tween(this.Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: .95
            }).to(.1, {
              scale: 1
            }).start();
            this.Ready_Controller.Enemy_Show_To_Hero_Select();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          if (1 == this.Ready_Controller.Stage) {
            cc.Tween.stopAllByTarget(this.Image);
            cc.tween(this.Image).to(.1, {
              scale: 1.2
            }).to(.1, {
              scale: .9
            }).to(.1, {
              scale: 1.1
            }).to(.1, {
              scale: 1
            }).start();
          }
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Ready_Controller: "Ready_Controller"
  } ],
  Recovery_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "81636oZbilEjrLWXykVX8MK", "Recovery_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Recovery_Extra_Check_Prefab: [ cc.Prefab ],
        Recovery_Extra_Check_Script: [ cc.Node ]
      }
    });
    cc._RF.pop();
  }, {} ],
  Red_Hood_Angry_Particle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1efd0zT+VRKMq8bjP7PyqYU", "Red_Hood_Angry_Particle");
    "use strict";
    var Motion_Streak_Script = require("Motion_Streak_Script");
    cc.Class({
      extends: cc.Component,
      properties: {
        Motion_Streak_Script: Motion_Streak_Script
      }
    });
    cc._RF.pop();
  }, {
    Motion_Streak_Script: "Motion_Streak_Script"
  } ],
  Red_Hood_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a5a5dBhH4xEFYTPDpIcWAbd", "Red_Hood_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Red_Hood").getComponent("Red_Hood");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Red_Hood_Be_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "80124jzt01Nm64YxSyG4O1h", "Red_Hood_Be_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Hero_Script: cc.Node
      },
      Check: function Check() {
        this.Hero_Script.Angry(0, 0, 0);
      }
    });
    cc._RF.pop();
  }, {} ],
  Red_Hood_Pet_Be_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9f6f6oD4S1BpLk38tB59rxY", "Red_Hood_Pet_Be_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Hero_Script: cc.Node
      },
      Check: function Check(Pet_Common) {
        this.Hero_Script.Angry(1, Pet_Common.node.x, Pet_Common.node.y);
      }
    });
    cc._RF.pop();
  }, {} ],
  Red_Hood_Pet_Born_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "967dbCxesZKAKTJqCu/08Sv", "Red_Hood_Pet_Born_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Skill_Attack_Addition_Add(20);
      }
    });
    cc._RF.pop();
  }, {} ],
  Red_Hood_Pet_Dead_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7787euwI09NzLcyt/Ax/dba", "Red_Hood_Pet_Dead_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Skill_Attack_Addition_Reduce(20);
      }
    });
    cc._RF.pop();
  }, {} ],
  Red_Hood_Scary_Icon: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7be05nJiLFGzruV0iywa6O7", "Red_Hood_Scary_Icon");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Enemy_Script: cc.Node,
        Hero_Bullet_Common: Hero_Bullet_Common,
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Battle_Controller = cc.find("Canvas").getComponent("Battle_Controller");
        this.Enemy_Script = this.node.parent.parent.getComponent("Enemy_Common");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Shoot: function Shoot() {
        this.Enemy_Script.Injured(this.Hero_Bullet_Common.Jing_Jie, this.Hero_Bullet_Common.Attack, this.Hero_Bullet_Common.Crit_Rate, this.Hero_Bullet_Common.Crit_Mult, this.Hero_Bullet_Common.Power);
        this.Battle_Controller.Hero_Star >= 4 && this.Enemy_Script.To_Weak();
        this.Battle_Controller.Camera_Shake_Medium();
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.Enemy_Script.node.x;
        Hit_Efffect.y = this.Enemy_Script.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.Enemy_Script.node.x;
        Hit_Particle.y = this.Enemy_Script.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.Enemy_Script.node.x;
        Hit_Smoke.y = this.Enemy_Script.node.y;
        var Bo_White = cc.instantiate(this.Battle_Controller.Bo_White);
        Bo_White.parent = this.Particle_Parent;
        Bo_White.x = this.Enemy_Script.node.x;
        Bo_White.y = this.Enemy_Script.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Red_Hood: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "63ed0mUo8dP4Z0z/JNO/O0n", "Red_Hood");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Small_Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Red_Hood_Scary_Icon: cc.Prefab,
        Red_Hood_Skill_BG: cc.Prefab,
        Pet_Test_Prefab: [ cc.Prefab ],
        Pet_Be_Hit_Check: cc.Prefab,
        Hero_Be_Hit_Check: cc.Prefab,
        Angry_Buff_Icon: cc.Prefab,
        Be_Hit_Particle: cc.Prefab,
        Angry_Number: 0,
        Buff_Icon_Label: cc.Label,
        Pet_Wolf: cc.Prefab,
        Red_Hood_Pet_Born_Extra_Check: cc.Prefab,
        Red_Hood_Pet_Dead_Extra_Check: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Battle_Controller.Is_Red_Hood = 1;
        if (this.Battle_Controller.Hero_Star >= 2) {
          var Extra_Check = cc.instantiate(this.Pet_Be_Hit_Check);
          Extra_Check.parent = this.Battle_Controller.Pet_Be_Hit_Extra_Check.node;
          var Script = Extra_Check.getComponent("Red_Hood_Pet_Be_Hit_Extra_Check");
          this.Battle_Controller.Pet_Be_Hit_Extra_Check.Script.push(Script);
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Script = this;
          var Extra_Check = cc.instantiate(this.Hero_Be_Hit_Check);
          Extra_Check.parent = this.Battle_Controller.Hero_Be_Hit_Extra_Check.node;
          var Script = Extra_Check.getComponent("Red_Hood_Be_Hit_Extra_Check");
          this.Battle_Controller.Hero_Be_Hit_Extra_Check.Hero_Be_Hit_Extra_Check_Script.push(Script);
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Script = this;
        }
        if (this.Battle_Controller.Hero_Star >= 5) {
          var Extra_Item = cc.instantiate(this.Red_Hood_Pet_Born_Extra_Check);
          Extra_Item.parent = this.Battle_Controller.Pet_Born_Extra_Check.node;
          var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
          this.Battle_Controller.Pet_Born_Extra_Check.Pet_Born_Extra_Check_Script.push(Extra_Item_Script);
          Extra_Item_Script.Battle_Controller = this.Battle_Controller;
          var Extra_Item = cc.instantiate(this.Red_Hood_Pet_Dead_Extra_Check);
          Extra_Item.parent = this.Battle_Controller.Pet_Dead_Extra_Check.node;
          var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
          this.Battle_Controller.Pet_Dead_Extra_Check.Pet_Dead_Extra_Check_Script.push(Extra_Item_Script);
          Extra_Item_Script.Battle_Controller = this.Battle_Controller;
        }
        if (this.Battle_Controller.Hero_Star >= 3) {
          var node = cc.instantiate(this.Pet_Wolf);
          node.parent = this.Battle_Controller.Pet_Parent;
          node.setPosition(this.node.x, this.node.y);
          var Script = node.getComponent("Pet_Common");
          Script.Hero_Common = this.Hero_Common;
          var node = cc.instantiate(this.Pet_Wolf);
          node.parent = this.Battle_Controller.Pet_Parent;
          node.setPosition(this.node.x, this.node.y);
          var Script = node.getComponent("Pet_Common");
          Script.Hero_Common = this.Hero_Common;
        }
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Camera_Shake_Shoot();
        if (0 == this.Hero_Common.Shoot_Stage) {
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x - 50;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
          Attack_Smoke.parent = this.Particle_Parent;
          Attack_Fire_particle.parent = this.Particle_Parent;
          Attack_Smoke.x = this.node.x + 80;
          Attack_Fire_particle.x = this.node.x + 30;
          Attack_Smoke.y = this.node.y;
          Attack_Fire_particle.y = this.node.y;
        } else {
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x - 50;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 200;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = .2 * this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = .2 * this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var angle = Math.floor(61 * Math.random() - 30);
          Bullet.angle = angle;
          Bullet_Script.Ini_Speed = 5e3 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 5e3 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 200;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = .2 * this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = .2 * this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var angle = Math.floor(61 * Math.random() - 30);
          Bullet.angle = angle;
          Bullet_Script.Ini_Speed = 5e3 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 5e3 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 200;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = .2 * this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = .2 * this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var angle = Math.floor(61 * Math.random() - 30);
          Bullet.angle = angle;
          Bullet_Script.Ini_Speed = 5e3 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 5e3 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 200;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = .2 * this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = .2 * this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var angle = Math.floor(61 * Math.random() - 30);
          Bullet.angle = angle;
          Bullet_Script.Ini_Speed = 5e3 * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = 5e3 * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
          Attack_Smoke.parent = this.Particle_Parent;
          Attack_Fire_particle.parent = this.Particle_Parent;
          Attack_Smoke.x = this.node.x + 200;
          Attack_Fire_particle.x = this.node.x + 30;
          Attack_Smoke.y = this.node.y;
          Attack_Fire_particle.y = this.node.y;
        }
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Hero_Common.Skill_Picture();
      },
      Skill_Shoot: function Skill_Shoot() {
        var BG = cc.instantiate(this.Red_Hood_Skill_BG);
        BG.parent = this.Battle_Controller.Particle_Parent_Back;
        if (this.Battle_Controller.Enemy_Parent.children.length > 0) for (var i = 0; i < this.Battle_Controller.Enemy_Parent.children.length; i++) if (null != this.Battle_Controller.Enemy_Parent.children[i]) {
          var Icon = cc.instantiate(this.Red_Hood_Scary_Icon);
          Icon.parent = this.Battle_Controller.Enemy_Parent.children[i].children[3];
          Icon.setPosition(0, 0);
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          var Script = Icon.getComponent("Hero_Bullet_Common");
          Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Script.Attack = Math.ceil(this.Hero_Common.Attack_Result * (100 + 20 * this.Angry_Number) / 100);
          Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Script.Battle_Controller = this.Battle_Controller;
          if (0 != this.Angry_Number) {
            this.Angry_Number = 0;
            this.Buff_Icon_Label.node.parent.destroy();
            this.Battle_Controller.Left_Up_Buff_Icon_Sort();
          }
        }
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      },
      Extra_Skill_Picture_Show: function Extra_Skill_Picture_Show() {
        this.Battle_Controller.Stop_Enemy_Bullet();
        this.Battle_Controller.Stop_Enemy_Move();
        this.Can_Injured--;
        var Skill_Picture = cc.instantiate(this.Special_Skill_Picture_Prefab);
        Skill_Picture.parent = this.Battle_Controller.Hero_Skill_Picture_Parent;
        Skill_Picture.setPosition(0, 0);
        Skill_Picture.getComponent("Hero_Skill_Picture_Common").Hero_Script = this;
      },
      Skill_Picture_End: function Skill_Picture_End() {
        this.Battle_Controller.Restore_Enemy_Bullet();
        this.Battle_Controller.Restore_Enemy_Move();
        this.Can_Injured++;
        this.Special_Skill();
      },
      Angry: function Angry(Hero_Or_Pet, Particle_X, Particle_Y) {
        if (this.Angry_Number < 20) {
          if (0 == this.Angry_Number) {
            this.Angry_Number++;
            var Icon = cc.instantiate(this.Angry_Buff_Icon);
            Icon.parent = this.Battle_Controller.Buff_Icon_Parent;
            this.Battle_Controller.Left_Up_Buff_Icon_Sort();
            this.Buff_Icon_Label = Icon.getComponent("Left_Up_Buff_Icon_Common").Label;
          } else {
            this.Angry_Number++;
            this.Buff_Icon_Label.string = this.Angry_Number;
          }
          var Particle = cc.instantiate(this.Be_Hit_Particle);
          Particle.parent = this.Battle_Controller.Buff_Icon_Parent;
          if (0 == Hero_Or_Pet) {
            Particle_X = this.node.x + this.Hero_Common.Image_Offset_X;
            Particle_Y = this.node.y + this.Hero_Common.Image_Offset_Y;
          }
          Particle.setPosition(Particle_X - this.Battle_Controller.Camera.node.x, Particle_Y - this.Battle_Controller.Camera.node.y);
          var Particle_Script = Particle.getComponent("Red_Hood_Angry_Particle");
          cc.tween(Particle).to(.5, {
            position: cc.v2(this.Buff_Icon_Label.node.parent.x, this.Buff_Icon_Label.node.parent.y)
          }).call(function() {
            Particle_Script.Motion_Streak_Script.Wait_Destroy();
          }).to(.5, {
            opacity: 0,
            scaleX: 8,
            scaleY: 8
          }).call(function() {
            Particle.destroy();
          }).start();
        }
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Rogue_Double_Return_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92d2flEyahAtJAQyl5eQZ21", "Rogue_Double_Return_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Rogue_Energy: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f754bGPzxNHJ6Yi8dkn+x7+", "Rogue_Energy");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node,
        Is_Start_Follow: 0,
        Is_Collided: 0,
        Battle_Controller: cc.Node
      },
      start: function start() {
        var _this = this;
        this.Hero = cc.find("Canvas/Hero").children[0];
        this.Battle_Controller = cc.find("Canvas").getComponent("Battle_Controller");
        var To_X = Math.floor(601 * Math.random() - 300);
        var To_Y = Math.floor(601 * Math.random() - 300);
        cc.tween(this.node).to(.5, {
          position: cc.v2(this.node.x + To_X, this.node.y + To_Y)
        }, {
          easing: "quadOut"
        }).call(function() {
          _this.Is_Start_Follow = 1;
        }).start();
      },
      update: function update() {
        1 == this.Is_Start_Follow && cc.tween(this.node).delay(1e-5).to(Math.abs(this.node.x - this.Hero.x) / 800, {
          position: cc.v2(this.Hero.x, this.Hero.y)
        }).start();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        var _this2 = this;
        if (0 == this.Is_Collided) {
          this.Is_Collided = 1;
          0 == this.Is_Start_Follow;
          this.Battle_Controller.Rogue_Energy_Up();
          cc.tween(this.node).to(.5, {
            scale: 5,
            opacity: 0
          }).call(function() {
            _this2.node.destroy();
          }).start();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Rogue_Information: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0ef273mZh1L76TU2T257319", "Rogue_Information");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Title: [ cc.String ],
        Information: [ cc.String ],
        Level_Up_Information: [ cc.String ],
        Level: [ cc.Integer ],
        Is_Surround: [ cc.Integer ],
        Is_Add_Skill: [ cc.Integer ],
        Is_Pet: [ cc.Integer ],
        Crad_Limit: [ cc.Integer ],
        Picture: [ cc.SpriteFrame ],
        Surround_Limit: 24,
        Skill_Limit: 7,
        Pet_Limit: 99
      },
      onLoad: function onLoad() {
        for (var i = 0; i < this.Title.length; i++) this.Level[i] = 0;
        this.Title = [ "\u5de8\u4eba\u7684\u9057\u7269", "\u5c0f\u5c0f\u5bfc\u5f39", "\u51dd\u89c6", "\u5e78\u8fd0\u5973\u795e\u7684\u795d\u798f", "\u6025\u6025\u7ed3\u754c", "\u5b88\u682a\u5f85\u5154", "\u533b\u836f\u5305", "\u52a0\u500d\u5949\u8fd8", "\u4f17\u661f\u6367\u6708", "\u5c0f\u67ef\u57fa" ];
        this.Level_Up_Information = [ "\u653b\u51fb\u529b\u52a0\u6210\u518d\u63d0\u534720%", "\u5bfc\u5f39\u653b\u51fb\u529b\u518d\u83b7\u5f9710%\u52a0\u6210", "\u66b4\u51fb\u7387\u518d\u63d0\u53475%", "\u6210\u529f\u7387\u518d\u63d0\u53475%", "\u7ed3\u754c\u8303\u56f4\u589e\u52a0", "\u653b\u51fb\u529b\u63d0\u5347\u6548\u679c\u589e\u52a05%", "\u751f\u547d\u503c\u4e0a\u9650\u83b7\u5f975%\u52a0\u6210,\u6062\u590d\u751f\u547d\u503c50%", "\u53d7\u5230\u653b\u51fb\u65f6\u53d1\u5c04\u7684\u5b50\u5f39\u653b\u51fb\u529b\u518d\u63d0\u5347\u89d2\u8272\u653b\u51fb\u529b\u768450%", "\u6bcf\u62e5\u6709\u4e00\u4e2a\u73af\u7ed5\u7269\u6240\u83b7\u5f97\u7684\u653b\u51fb\u529b\u52a0\u6210\u6548\u679c\u518d\u589e\u52a010%", "\u5c0f\u67ef\u57fa\u653b\u51fb\u529b\u518d\u83b7\u5f9710%\u52a0\u6210", "\u66b4\u51fb\u500d\u7387\u63d0\u534740%", "\u751f\u547d\u503c\u4e0a\u9650\u83b7\u5f9720%\u52a0\u6210", "\u6bcf\u901a\u8fc7\u4e00\u91cd\u52ab\u6062\u590d\u7684\u751f\u547d\u503c\u518d\u52a05%", "\u6bcf\u4e00\u79d2\u4e0d\u653b\u51fb\u83b7\u5f97\u7684\u653b\u51fb\u529b\u52a0\u6210\u518d\u63d0\u534720%\uff0c\u52a0\u6210\u4e0a\u9650\u63d0\u5347100%", "\u5b50\u5f39\u53ef\u7a7f\u900f\u7684\u654c\u4eba\u6570\u91cf+1", "\u5b50\u5f39\u5927\u5c0f\u589e\u52a010%", "\u84c4\u529b\u653b\u51fb/\u6280\u80fd\u83b7\u5f9750%\u653b\u51fb\u529b\u52a0\u6210", "\u5b50\u5f39\u6bcf\u653b\u51fb\u5230\u4e00\u4e2a\u654c\u4eba\u7684\u52a0\u6210\u6548\u679c\u63d0\u534720%", "\u84c4\u529b\u653b\u51fb/\u6280\u80fd\u653b\u51fb\u529b\u52a0\u6210\u518d\u63d0\u534750%" ];
        this.Is_Surround = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
        this.Is_Add_Skill = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
        this.Is_Pet = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
        this.Crad_Limit = [ 999, 999, 30, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999 ];
      },
      Show_Card_Information: function Show_Card_Information(Level) {
        this.Information = [ "\u653b\u51fb\u529b\u83b7\u5f97" + 20 * Level + "%\u52a0\u6210", "\u6bcf\u6b21\u8fdb\u884c\u666e\u901a\u653b\u51fb\u65f6\uff0c\u670920%\u7684\u6982\u7387\u53d1\u5c04\u51fa\u4e00\u9897\u7784\u51c6\u968f\u673a\u654c\u4eba\u7684\u5bfc\u5f39\n\u5bfc\u5f39\u653b\u51fb\u529b\u4e3a\u82f1\u96c4\u653b\u51fb\u529b*" + (100 + 10 * (Level - 1)) + "%", "\u66b4\u51fb\u7387\u63d0\u5347" + 5 * Level + "%", "\u8fdb\u884c\u66b4\u51fb\u7b49\u5404\u9879\u6b63\u9762\u6548\u679c\u6982\u7387\u5224\u5b9a\u65f6\uff0c\u6210\u529f\u7387\u63d0\u5347" + 5 * Level + "%", "\u6bcf5\u79d2\u5728\u968f\u673a\u4f4d\u7f6e\u751f\u6210\u4e00\u4e2a\u7ed3\u754c\uff0c\u5904\u4e8e\u7ed3\u754c\u5185\u653b\u51fb\u63d0\u534750%,\u7ed3\u754c\u57285\u79d2\u540e\u6d88\u5931", "\u505c\u6b62\u79fb\u52a83\u79d2\u540e\u83b7\u5f97\u3010\u653b\u51fb\u529b\u63d0\u5347" + (50 + 5 * (Level - 1)) + "%\u3011\u589e\u76ca\uff0c\u79fb\u52a8\u540e\u589e\u76ca\u6d88\u5931", "\u751f\u547d\u503c\u4e0a\u9650\u83b7\u5f975%\u52a0\u6210,\u6062\u590d\u751f\u547d\u503c50%", "\u53d7\u5230\u653b\u51fb\u65f6\uff0c\u670950%\u7684\u6982\u7387\u53d1\u5c04\u4e00\u9897\u5927\u5927\u7684\u5b50\u5f39\uff0c\u5b50\u5f39\u653b\u51fb\u529b\u4e3a\u89d2\u8272\u653b\u51fb\u529b\u7684" + (200 + 50 * (Level - 1)) + "%", "\u6bcf\u6709\u4e00\u4e2a\u73af\u7ed5\u7269\uff0c\u89d2\u8272\u653b\u51fb\u529b\u83b7\u5f97" + 10 * Level + "%\u52a0\u6210\uff1b\n\u83b7\u5f97\u4e00\u4e2a\u3010\u5c0f\u62a4\u76fe\u3011\uff1b", "\u53ec\u5524\u4e00\u53ea\u5230\u5904\u8dd1\u7684\u5c0f\u67ef\u57fa\uff0c\u6bcf1\u79d2\u4f1a\u5411\u524d\u53d1\u5c04\u5b50\u5f39\n\u5c0f\u67ef\u57fa\u653b\u51fb\u529b\u7b49\u4e8e\u89d2\u8272\u5f53\u524d\u653b\u51fb\u529b\u7684" + (100 + 10 * (Level - 1)) + "%", "\u66b4\u51fb\u500d\u7387\u63d0\u534740%", "\u751f\u547d\u503c\u4e0a\u9650\u83b7\u5f97" + 20 * Level + "%\u52a0\u6210", "\u6bcf\u901a\u8fc7\u4e00\u91cd\u52ab\u6062\u590d" + 5 * Level + "%\u7684\u751f\u547d\u503c", "\u6bcf\u67091\u79d2\u4e0d\u653b\u51fb\uff0c\u83b7\u5f97" + (50 + 20 * (Level - 1)) + "%\u653b\u51fb\u529b\u52a0\u6210\uff0c\u6700\u591a\u83b7\u5f97" + (500 + 100 * (Level - 1)) + "%", "\u5b50\u5f39\u53ef\u7a7f\u900f\u7684\u654c\u4eba\u6570\u91cf+" + (Level - 1 + 2), "\u5b50\u5f39\u5927\u5c0f\u589e\u52a0" + 10 * Level + "%", "\u84c4\u529b\u653b\u51fb/\u6280\u80fd\u83b7\u5f97" + 50 * Level + "%\u653b\u51fb\u529b\u52a0\u6210", "\u5b50\u5f39\u6bcf\u653b\u51fb\u5230\u4e00\u4e2a\u654c\u4eba\uff0c\u8be5\u5b50\u5f39\u83b7\u5f97" + 50 * (Level - 1) * 20 + "%\u653b\u51fb\u529b\u52a0\u6210", "\u84c4\u529b\u653b\u51fb/\u6280\u80fd\u84c4\u529b\u901f\u5ea6\u51cf\u616250%\uff0c\u84c4\u529b\u653b\u51fb/\u6280\u80fd\u83b7\u5f97" + 100 * (Level - 1) * 50 + "%\u653b\u51fb\u529b\u52a0\u6210" ];
      }
    });
    cc._RF.pop();
  }, {} ],
  Rogue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5d2b1oY9shGeoeDmpg1wU7m", "Rogue");
    "use strict";
    var Rogue_Information = require("Rogue_Information");
    var History_Card_Detail_Menu = require("History_Card_Detail_Menu");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Rogue_Information: Rogue_Information,
        Rogue_Animation: cc.Animation,
        Card_Can_Click: 0,
        Correct_Button_Can_Click: 0,
        Is_Selected_Card: 0,
        History_Button_Can_Click: 1,
        History_Card_Can_Click: 0,
        History_Card_Detail_Can_Click: 0,
        Content_Label: cc.Label,
        First_Card: cc.Node,
        Second_Card: cc.Node,
        Third_Card: cc.Node,
        First_Card_ID: 0,
        Second_Card_ID: 0,
        Third_Card_ID: 0,
        First_Level_Up_Label: cc.Node,
        Second_Level_Up_Label: cc.Node,
        Third_Level_Up_Label: cc.Node,
        Re_Create_Number: 0,
        Select_Card_ID: 0,
        Correct_Button: cc.Node,
        History_Button: cc.Node,
        Haved_Rogue_Level: [ cc.Integer ],
        Haved_Surround: 0,
        Haved_Skill: 0,
        Haved_Pet: 0,
        Haved_Card: [ cc.Integer ],
        History_Card_Menu: cc.Node,
        History_Card_Parent: cc.Node,
        History_Card_Prefab: cc.Prefab,
        History_Card_Animation: cc.Animation,
        No_History_Card_Tips_Label: cc.Node,
        History_Card_Back_Button: cc.Node,
        History_Card_Detail_Menu: cc.Node,
        History_Card_Detail_Animation: cc.Animation,
        History_Card_Detail_Menu_Script: History_Card_Detail_Menu,
        History_Card_Detail_Card_Sprite: cc.Sprite,
        History_Card_Detail_Label: cc.Label,
        History_Card_Detail_Level_Label: cc.Label,
        History_Card_Detail_Menu_Black: cc.Node,
        Extra_Check_Prefab: [ cc.Prefab ],
        Surround_Prefab: [ cc.Prefab ]
      },
      Start_Set: function Start_Set() {
        this.Battle_Controller = this.Battle_Controller.getComponent("Battle_Controller");
        for (var i = 0; i < this.Rogue_Information.Title.length; i++) this.Haved_Rogue_Level[i] = 0;
        this.History_Card_Detail_Menu_Script.Rogue_Script = this;
      },
      Start_Rogue: function Start_Rogue() {
        this.Rogue_Animation.play();
        this.Initialize();
        this.Create_First_Card();
        this.Create_Second_Card();
        this.Create_Third_Card();
        this.Set_Button();
      },
      Initialize: function Initialize() {
        this.Content_Label.string = "\u9009\u62e9\u4e00\u9879\u80fd\u529b\u63d0\u5347";
        this.Select_Card_ID = 0;
        this.Card_Can_Click = 1;
        this.Is_Selected_Card = 0;
        this.Correct_Button_Can_Click = 0;
        this.History_Button_Can_Click = 1;
        this.History_Card_Can_Click = 0;
        this.History_Card_Detail_Can_Click = 0;
        this.First_Card.scaleX = 1;
        this.First_Card.scaleY = 1;
        this.First_Card.opacity = 255;
        this.Second_Card.scaleX = 1;
        this.Second_Card.scaleY = 1;
        this.Second_Card.opacity = 255;
        this.Third_Card.scaleX = 1;
        this.Third_Card.scaleY = 1;
        this.Third_Card.opacity = 255;
        this.Correct_Button.opacity = 150;
        this.First_Level_Up_Label.active = false;
        this.Second_Level_Up_Label.active = false;
        this.Third_Level_Up_Label.active = false;
        this.First_Level_Up_Label.scaleX = 1;
        this.First_Level_Up_Label.scaleY = 1;
        this.Second_Level_Up_Label.scaleX = 1;
        this.Second_Level_Up_Label.scaleY = 1;
        this.Third_Level_Up_Label.scaleX = 1;
        this.Third_Level_Up_Label.scaleY = 1;
        this.History_Card_Menu.active = false;
        this.History_Card_Menu.opacity = 0;
        this.No_History_Card_Tips_Label.active = false;
        this.History_Card_Detail_Menu.active = false;
        this.History_Card_Detail_Menu.opacity = 0;
      },
      Create_First_Card: function Create_First_Card() {
        var a = 6;
        if (this.Haved_Rogue_Level[a] > this.Rogue_Information.Crad_Limit[a]) this.Re_Create_First_Card(); else if (1 == this.Rogue_Information.Is_Surround[a] && this.Haved_Surround >= this.Rogue_Information.Surround_Limit) this.Re_Create_First_Card(); else if (1 == this.Rogue_Information.Is_Add_Skill[a] && this.Haved_Skill >= this.Rogue_Information.Skill_Limit) this.Re_Create_First_Card(); else if (1 == this.Rogue_Information.Is_Pet[a] && this.Haved_Pet >= this.Rogue_Information.Pet_Limit) this.Re_Create_First_Card(); else {
          this.Re_Create_Number = 0;
          this.First_Card_ID = a;
          this.First_Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[a];
          this.Haved_Rogue_Level[a] > 0 && (this.First_Level_Up_Label.active = true);
        }
      },
      Re_Create_First_Card: function Re_Create_First_Card() {
        this.Re_Create_Number++;
        if (this.Re_Create_Number <= 1e3) this.Create_First_Card(); else {
          this.Re_Create_Number = 0;
          this.First_Card_ID = 0;
          this.First_Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[0];
          this.Haved_Rogue_Level[0] > 0 && (this.First_Level_Up_Label.active = true);
        }
      },
      Create_Second_Card: function Create_Second_Card() {
        var a = Math.floor(Math.random() * this.Rogue_Information.Title.length);
        if (this.Haved_Rogue_Level[a] > this.Rogue_Information.Crad_Limit[a]) this.Re_Create_Second_Card(); else if (1 == this.Rogue_Information.Is_Surround[a] && this.Haved_Surround >= this.Rogue_Information.Surround_Limit) this.Re_Create_Second_Card(); else if (1 == this.Rogue_Information.Is_Add_Skill[a] && this.Haved_Skill >= this.Rogue_Information.Skill_Limit) this.Re_Create_Second_Card(); else if (1 == this.Rogue_Information.Is_Pet[a] && this.Haved_Pet >= this.Rogue_Information.Pet_Limit) this.Re_Create_Second_Card(); else if (a == this.First_Card_ID) this.Re_Create_Second_Card(); else {
          this.Re_Create_Number = 0;
          this.Second_Card_ID = a;
          this.Second_Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[a];
          this.Haved_Rogue_Level[a] > 0 && (this.Second_Level_Up_Label.active = true);
        }
      },
      Re_Create_Second_Card: function Re_Create_Second_Card() {
        this.Re_Create_Number++;
        if (this.Re_Create_Number <= 1e3) this.Create_Second_Card(); else {
          this.Re_Create_Number = 0;
          if (0 != this.First_Card_ID) {
            this.Second_Card_ID = 0;
            this.Second_Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[0];
            this.Haved_Rogue_Level[0] > 0 && (this.Second_Level_Up_Label.active = true);
          } else {
            this.Second_Card_ID = 6;
            this.Second_Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[0];
          }
        }
      },
      Create_Third_Card: function Create_Third_Card() {
        var a = Math.floor(Math.random() * this.Rogue_Information.Title.length);
        if (this.Haved_Rogue_Level[a] > this.Rogue_Information.Crad_Limit[a]) this.Re_Create_Third_Card(); else if (1 == this.Rogue_Information.Is_Surround[a] && this.Haved_Surround >= this.Rogue_Information.Surround_Limit) this.Re_Create_Third_Card(); else if (1 == this.Rogue_Information.Is_Add_Skill[a] && this.Haved_Skill >= this.Rogue_Information.Skill_Limit) this.Re_Create_Third_Card(); else if (1 == this.Rogue_Information.Is_Pet[a] && this.Haved_Pet >= this.Rogue_Information.Pet_Limit) this.Re_Create_Third_Card(); else if (a == this.First_Card_ID || a == this.Second_Card_ID) this.Re_Create_Third_Card(); else {
          this.Re_Create_Number = 0;
          this.Third_Card_ID = a;
          this.Third_Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[a];
          this.Haved_Rogue_Level[a] > 0 && (this.Third_Level_Up_Label.active = true);
        }
      },
      Re_Create_Third_Card: function Re_Create_Third_Card() {
        this.Re_Create_Number++;
        if (this.Re_Create_Number <= 1e3) this.Create_Third_Card(); else {
          this.Re_Create_Number = 0;
          if (0 != this.First_Card_ID && 0 != this.Second_Card_ID) {
            this.Third_Card_ID = 0;
            this.Third_Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[0];
            this.Haved_Rogue_Level[0] > 0 && (this.Third_Level_Up_Label.active = true);
          } else if (6 != this.First_Card_ID && 6 != this.Second_Card_ID) {
            this.Second_Card_ID = 6;
            this.Second_Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[0];
          } else {
            this.Second_Card_ID = 10;
            this.Second_Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[10];
            this.Haved_Rogue_Level[a] > 0 && (this.Third_Level_Up_Label.active = true);
          }
        }
      },
      Set_Button: function Set_Button() {
        this.First_Card.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Card_Can_Click) {
            this.Select_Card_ID = this.First_Card_ID;
            this.First_Card.scaleX = 1.2;
            this.First_Card.scaleY = 1.2;
            this.Second_Card.scaleX = 1;
            this.Second_Card.scaleY = 1;
            this.Third_Card.scaleX = 1;
            this.Third_Card.scaleY = 1;
            this.First_Card.opacity = 255;
            this.Second_Card.opacity = 150;
            this.Third_Card.opacity = 150;
            this.First_Level_Up_Label.scaleX = 1;
            this.First_Level_Up_Label.scaleY = 1;
            this.Second_Level_Up_Label.scaleX = 1;
            this.Second_Level_Up_Label.scaleY = 1;
            this.Third_Level_Up_Label.scaleX = 1;
            this.Third_Level_Up_Label.scaleY = 1;
            if (this.Haved_Rogue_Level[this.Select_Card_ID] >= 1) {
              this.First_Level_Up_Label.scaleX = 1.2;
              this.First_Level_Up_Label.scaleY = 1.2;
              this.Content_Label.string = this.Rogue_Information.Level_Up_Information[this.Select_Card_ID];
            } else {
              this.Rogue_Information.Show_Card_Information(1);
              this.Content_Label.string = this.Rogue_Information.Information[this.Select_Card_ID];
            }
            this.Correct_Button.opacity = 255;
            this.Correct_Button_Can_Click = 1;
            this.Is_Selected_Card = 1;
          }
        }, this);
        this.Second_Card.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Card_Can_Click) {
            this.Select_Card_ID = this.Second_Card_ID;
            this.First_Card.scaleX = 1;
            this.First_Card.scaleY = 1;
            this.Second_Card.scaleX = 1.2;
            this.Second_Card.scaleY = 1.2;
            this.Third_Card.scaleX = 1;
            this.Third_Card.scaleY = 1;
            this.First_Card.opacity = 150;
            this.Second_Card.opacity = 255;
            this.Third_Card.opacity = 150;
            this.First_Level_Up_Label.scaleX = 1;
            this.First_Level_Up_Label.scaleY = 1;
            this.Second_Level_Up_Label.scaleX = 1;
            this.Second_Level_Up_Label.scaleY = 1;
            this.Third_Level_Up_Label.scaleX = 1;
            this.Third_Level_Up_Label.scaleY = 1;
            if (this.Haved_Rogue_Level[this.Select_Card_ID] >= 1) {
              this.Second_Level_Up_Label.scaleX = 1.2;
              this.Second_Level_Up_Label.scaleY = 1.2;
              this.Content_Label.string = this.Rogue_Information.Level_Up_Information[this.Select_Card_ID];
            } else {
              this.Rogue_Information.Show_Card_Information(1);
              this.Content_Label.string = this.Rogue_Information.Information[this.Select_Card_ID];
            }
            this.Correct_Button.opacity = 255;
            this.Correct_Button_Can_Click = 1;
            this.Is_Selected_Card = 1;
          }
        }, this);
        this.Third_Card.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Card_Can_Click) {
            this.Select_Card_ID = this.Third_Card_ID;
            this.First_Card.scaleX = 1;
            this.First_Card.scaleY = 1;
            this.Second_Card.scaleX = 1;
            this.Second_Card.scaleY = 1;
            this.Third_Card.scaleX = 1.2;
            this.Third_Card.scaleY = 1.2;
            this.First_Card.opacity = 150;
            this.Second_Card.opacity = 150;
            this.Third_Card.opacity = 255;
            this.First_Level_Up_Label.scaleX = 1;
            this.First_Level_Up_Label.scaleY = 1;
            this.Second_Level_Up_Label.scaleX = 1;
            this.Second_Level_Up_Label.scaleY = 1;
            this.Third_Level_Up_Label.scaleX = 1;
            this.Third_Level_Up_Label.scaleY = 1;
            if (this.Haved_Rogue_Level[this.Select_Card_ID] >= 1) {
              this.Third_Level_Up_Label.scaleX = 1.2;
              this.Third_Level_Up_Label.scaleY = 1.2;
              this.Content_Label.string = this.Rogue_Information.Level_Up_Information[this.Select_Card_ID];
            } else {
              this.Rogue_Information.Show_Card_Information(1);
              this.Content_Label.string = this.Rogue_Information.Information[this.Select_Card_ID];
            }
            this.Correct_Button.opacity = 255;
            this.Correct_Button_Can_Click = 1;
            this.Is_Selected_Card = 1;
          }
        }, this);
        this.Correct_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Correct_Button_Can_Click) {
            this.Rogue_Effect();
            this.Card_Can_Click = 0;
            this.Correct_Button_Can_Click = 0;
            this.History_Button_Can_Click = 0;
            this.Rogue_Animation.play("Rogue_Out");
          }
        }, this);
        this.History_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.History_Button_Can_Click) {
            this.Show_History_Menu();
            this.Card_Can_Click = 0;
            this.Correct_Button_Can_Click = 0;
            this.History_Button_Can_Click = 0;
            this.History_Card_Can_Click = 1;
          }
        }, this);
        this.History_Card_Back_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.History_Card_Can_Click) {
            this.Card_Can_Click = 1;
            1 == this.Is_Selected_Card && (this.Correct_Button_Can_Click = 1);
            this.History_Button_Can_Click = 1;
            this.History_Card_Can_Click = 0;
            this.History_Card_Animation.play("History_Card_Menu_Out");
          }
        }, this);
      },
      Show_History_Menu: function Show_History_Menu() {
        this.History_Card_Menu.active = true;
        this.History_Card_Animation.play("History_Card_Menu_In");
        if (0 == this.Haved_Card.length) this.No_History_Card_Tips_Label.active = true; else for (var i = 0; i < this.Haved_Card.length; i++) {
          var Card = cc.instantiate(this.History_Card_Prefab);
          Card.parent = this.History_Card_Parent;
          Card.getComponent(cc.Sprite).spriteFrame = this.Rogue_Information.Picture[this.Haved_Card[i]];
          var Card_Script = Card.getComponent("History_Card");
          Card_Script.Card_ID = this.Haved_Card[i];
          Card_Script.Rogue_Script = this;
          Card_Script.Level_Label.string = "\u7b49\u7ea7" + this.Haved_Rogue_Level[this.Haved_Card[i]];
          Card_Script.Level = this.Haved_Rogue_Level[this.Haved_Card[i]];
        }
      },
      Rogue_Effect: function Rogue_Effect() {
        switch (this.Select_Card_ID) {
         case 0:
          if (0 == this.Haved_Rogue_Level[0]) {
            this.Haved_Card.push(0);
            this.Haved_Rogue_Level[0]++;
            this.Battle_Controller.Common_Attack_Addition_Add(20);
          } else {
            this.Haved_Rogue_Level[0]++;
            this.Battle_Controller.Common_Attack_Addition_Add(20);
          }
          break;

         case 1:
          if (0 == this.Haved_Rogue_Level[1]) {
            this.Haved_Card.push(1);
            this.Haved_Rogue_Level[1]++;
            var Extra_Item = cc.instantiate(this.Extra_Check_Prefab[0]);
            Extra_Item.parent = this.Battle_Controller.Normal_Attack_Extra_Check.node;
            var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
            this.Battle_Controller.Normal_Attack_Extra_Check.Normal_Attack_Extra_Check_Script.push(Extra_Item_Script);
            Extra_Item_Script.Battle_Controller = this.Battle_Controller;
          } else this.Haved_Rogue_Level[1]++;
          break;

         case 2:
          if (0 == this.Haved_Rogue_Level[2]) {
            this.Haved_Card.push(2);
            this.Haved_Rogue_Level[2]++;
            this.Battle_Controller.Crit_Rate = this.Battle_Controller.Crit_Rate + 5;
          } else {
            this.Haved_Rogue_Level[2]++;
            this.Battle_Controller.Crit_Rate = this.Battle_Controller.Crit_Rate + 5;
          }
          break;

         case 3:
          if (0 == this.Haved_Rogue_Level[3]) {
            this.Haved_Card.push(3);
            this.Haved_Rogue_Level[3]++;
            this.Battle_Controller.Probability_Result_Addition = this.Battle_Controller.Probability_Result_Addition + 5;
          } else {
            this.Haved_Rogue_Level[3]++;
            this.Battle_Controller.Probability_Result_Addition = this.Battle_Controller.Probability_Result_Addition + 5;
          }
          break;

         case 4:
          if (0 == this.Haved_Rogue_Level[4]) {
            this.Haved_Card.push(4);
            this.Haved_Rogue_Level[4]++;
            var Extra_Item = cc.instantiate(this.Extra_Check_Prefab[1]);
            Extra_Item.parent = this.Battle_Controller.Schedule_Extra_Check.node;
            var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
            this.Battle_Controller.Schedule_Extra_Check.Schedule_Extra_Check_Script.push(Extra_Item_Script);
            Extra_Item_Script.Battle_Controller = this.Battle_Controller;
          } else this.Haved_Rogue_Level[4]++;
          break;

         case 5:
          if (0 == this.Haved_Rogue_Level[5]) {
            this.Haved_Card.push(5);
            this.Haved_Rogue_Level[5]++;
            var Extra_Item = cc.instantiate(this.Extra_Check_Prefab[2]);
            Extra_Item.parent = this.Battle_Controller.Start_Move_Extra_Check.node;
            var Extra_Item_Script_Move = Extra_Item.getComponent(Extra_Item.name);
            this.Battle_Controller.Start_Move_Extra_Check.Start_Move_Extra_Check_Script.push(Extra_Item_Script_Move);
            Extra_Item_Script_Move.Battle_Controller = this.Battle_Controller;
            var Extra_Item = cc.instantiate(this.Extra_Check_Prefab[3]);
            Extra_Item.parent = this.Battle_Controller.Stop_Move_Extra_Check.node;
            var Extra_Item_Script_Stop = Extra_Item.getComponent(Extra_Item.name);
            this.Battle_Controller.Stop_Move_Extra_Check.Stop_Move_Extra_Check_Script.push(Extra_Item_Script_Stop);
            Extra_Item_Script_Stop.Battle_Controller = this.Battle_Controller;
            Extra_Item_Script_Move.Rogue = this;
            Extra_Item_Script_Stop.Rogue = this;
            Extra_Item_Script_Move.Stop_Move_Extra_Check = Extra_Item_Script_Stop;
            Extra_Item_Script_Stop.Start_Move_Extra_Check = Extra_Item_Script_Move;
          } else this.Haved_Rogue_Level[5]++;
          break;

         case 6:
          this.Battle_Controller.Full_Hp_Addition_Add(5);
          this.Battle_Controller.Hero_Script.Hero_Common.Recovery(50);
          break;

         case 7:
          if (0 == this.Haved_Rogue_Level[7]) {
            this.Haved_Card.push(7);
            this.Haved_Rogue_Level[7]++;
            var Extra_Item = cc.instantiate(this.Extra_Check_Prefab[4]);
            Extra_Item.parent = this.Battle_Controller.Hero_Be_Hit_Extra_Check.node;
            var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
            this.Battle_Controller.Hero_Be_Hit_Extra_Check.Hero_Be_Hit_Extra_Check_Script.push(Extra_Item_Script);
            Extra_Item_Script.Battle_Controller = this.Battle_Controller;
          } else this.Haved_Rogue_Level[7]++;
          break;

         case 8:
          if (0 == this.Haved_Rogue_Level[8]) {
            this.Haved_Card.push(8);
            this.Haved_Rogue_Level[8]++;
            var Extra_Item = cc.instantiate(this.Surround_Prefab[0]);
            Extra_Item.parent = this.Battle_Controller.Hero_Script.Hero_Common.Surround_Parent;
            this.Battle_Controller.Set_Surround_Position();
            Extra_Item.x = this.Battle_Controller.Surround_X;
            Extra_Item.y = this.Battle_Controller.Surround_Y;
            Extra_Item.angle = this.Battle_Controller.Surround_Angle;
            Extra_Item.getComponent("Surround_Small_Shield").Battle_Controller = this.Battle_Controller;
            this.Battle_Controller.Is_Surround_Common_Attack_Addition = 1;
          } else this.Haved_Rogue_Level[8]++;
          break;

         case 9:
          if (0 == this.Haved_Rogue_Level[9]) {
            this.Haved_Card.push(9);
            this.Haved_Rogue_Level[9]++;
          } else this.Haved_Rogue_Level[9]++;
          break;

         case 10:
          if (0 == this.Haved_Rogue_Level[10]) {
            this.Haved_Card.push(10);
            this.Haved_Rogue_Level[10]++;
          } else this.Haved_Rogue_Level[10]++;
        }
      },
      End_Rogue: function End_Rogue() {
        this.Battle_Controller.Wait_Rogue--;
        if (this.Battle_Controller.Wait_Rogue > 0) {
          this.Battle_Controller.Can_Create_Rogue = 1;
          this.Start_Rogue();
        } else {
          this.Battle_Controller.Can_Create_Rogue = 1;
          this.Battle_Controller.To_Next_Xiaoguanqia();
          this.node.active = false;
        }
      }
    });
    cc._RF.pop();
  }, {
    History_Card_Detail_Menu: "History_Card_Detail_Menu",
    Rogue_Information: "Rogue_Information"
  } ],
  SWAT_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "55dd8t0WvFH0Zdsbuz6I8SS", "SWAT_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  SWAT_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "92440GOgo5G34FXfFvQSlEV", "SWAT_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/SWAT").getComponent("SWAT");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  SWAT_Extra_Skill_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9bfe5Kb3MJEMKnRVKbN9HQg", "SWAT_Extra_Skill_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        BG_Sprite: cc.Sprite,
        Is_Cooling: 0,
        Cold_Time: 1
      },
      Skill_Start: function Skill_Start() {
        this.Battle_Controller.Hero_Script.Shoot_Greade();
      }
    });
    cc._RF.pop();
  }, {} ],
  SWAT_Grenade_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a59fSyNpZHCpsPtl5egQbx", "SWAT_Grenade_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Particle_Parent: cc.Node,
        Bullet_Prefab: cc.Prefab,
        Single_Particle: cc.Prefab,
        Smoke_Particle: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.scheduleOnce(function() {
          for (var i = 0; i < 20; i++) {
            var Particle = cc.instantiate(this.Single_Particle);
            Particle.parent = this.Particle_Parent;
            Particle.setPosition(this.node.x, this.node.y);
            Particle.angle = 360 * Math.random();
          }
          var Particle = cc.instantiate(this.Smoke_Particle);
          Particle.parent = this.Particle_Parent;
          Particle.setPosition(this.node.x, this.node.y);
          this.Hero_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
          var Bullet = cc.instantiate(this.Bullet_Prefab);
          Bullet.parent = this.node.parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Hero_Bullet_Common.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Bullet_Common.Jing_Jie;
          Bullet_Script.Attack = Math.ceil(.5 * this.Hero_Bullet_Common.Attack);
          Bullet_Script.Crit_Rate = this.Hero_Bullet_Common.Crit_Rate;
          Bullet_Script.Crit_Mult = this.Hero_Bullet_Common.Crit_Mult;
          this.Destroy_Particle();
          this.node.destroy();
        }, 1);
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  "SWAT_Grenade_Flash - 001": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1d28fYDQptCUKwdBYSGb629", "SWAT_Grenade_Flash - 001");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        BoxCollider: cc.PhysicsBoxCollider
      },
      DestroySelf: function DestroySelf() {
        this.node.destroy();
      },
      Apply_Collider: function Apply_Collider() {
        this.BoxCollider.apply();
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        var Enemy = otherCollider.node;
        null != Enemy && "Enemy" == Enemy.group && Enemy.getComponent("Enemy_Common").Start_Vertigo();
      }
    });
    cc._RF.pop();
  }, {} ],
  SWAT_Grenade_Flash: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "830eaSejgNE34d8h4gSuk86", "SWAT_Grenade_Flash");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        BoxCollider: cc.PhysicsBoxCollider
      },
      DestroySelf: function DestroySelf() {
        this.node.destroy();
      },
      Apply_Collider: function Apply_Collider() {
        this.BoxCollider.apply();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        var Enemy = other.node;
        null != Enemy && "Enemy" == Enemy.group && Enemy.getComponent("Enemy_Common").Start_Vertigo();
      }
    });
    cc._RF.pop();
  }, {} ],
  SWAT_Shield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ab4aWXIm5N1a9MGgYwRTsR", "SWAT_Shield");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        RigidBody: cc.RigidBody,
        Animation: cc.Animation,
        BoxCollider: cc.BoxCollider
      },
      start: function start() {
        this.schedule(function() {
          this.RigidBody.enabledContactListener = false;
          this.BoxCollider.enabled = false;
          this.Animation.play("SWAT_Shield_Disappear");
        }, 8);
      },
      Open_Collider: function Open_Collider() {
        this.RigidBody.enabledContactListener = true;
        this.BoxCollider.enabled = true;
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        this.Animation.play("SWAT_Shield_Be_Hit");
        "Hero_Bullet" == otherCollider.node.group ? otherCollider.node.getComponent("Hero_Bullet_Common").Be_Destroy() : "Enemy_Bullet" == otherCollider.node.group && otherCollider.node.getComponent("Enemy_Bullet_Common").Be_Destroy();
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Enemy_Bullet" == other.node.group) {
          this.Animation.play("SWAT_Shield_Be_Hit");
          other.node.getComponent("Enemy_Bullet_Common").Be_Destroy();
        }
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  SWAT_Skill_Cross_Hair: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "78193H9XGtCro+YHw/2vf3i", "SWAT_Skill_Cross_Hair");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Enemy_Scropt: cc.Node,
        Hero_Bullet_Common: Hero_Bullet_Common,
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Battle_Controller = cc.find("Canvas").getComponent("Battle_Controller");
        this.Enemy_Scropt = this.node.parent.parent.getComponent("Enemy_Common");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Shoot: function Shoot() {
        this.Enemy_Scropt.Injured(this.Hero_Bullet_Common.Jing_Jie, this.Hero_Bullet_Common.Attack, this.Hero_Bullet_Common.Crit_Rate, this.Hero_Bullet_Common.Crit_Mult, this.Hero_Bullet_Common.Power);
        this.Battle_Controller.Camera_Shake_Medium();
        this.node.destroy();
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.Enemy_Scropt.node.x;
        Hit_Efffect.y = this.Enemy_Scropt.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.Enemy_Scropt.node.x;
        Hit_Particle.y = this.Enemy_Scropt.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.Enemy_Scropt.node.x;
        Hit_Smoke.y = this.Enemy_Scropt.node.y;
        var Bo_White = cc.instantiate(this.Battle_Controller.Bo_White);
        Bo_White.parent = this.Particle_Parent;
        Bo_White.x = this.Enemy_Scropt.node.x;
        Bo_White.y = this.Enemy_Scropt.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  SWAT_Small_Missile_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5b43aH9ROpIU71WJa13eFFe", "SWAT_Small_Missile_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Missile_Prefab: cc.Prefab,
        Probability: 10
      },
      start: function start() {},
      Check: function Check() {
        this.Battle_Controller.Probability_Result_Create();
        var a = this.Battle_Controller.Probability_Result;
        if (a <= this.Probability) {
          var Bullet = cc.instantiate(this.Missile_Prefab);
          Bullet.parent = this.Battle_Controller.Hero_Bullet_Parent;
          Bullet.x = this.Battle_Controller.Hero_Parent.children[0].x;
          Bullet.y = this.Battle_Controller.Hero_Parent.children[0].y;
          this.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 0;
          this.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  SWAT: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "23f11VtL/RDv4C8/XL0JQJD", "SWAT");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Is_First_Shoot: 1,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Skill_Cross_Hair_Prafab: cc.Prefab,
        SWAT_Small_Missile_Extra_Check_Prefab: cc.Prefab,
        Extra_Skill_Prefab: cc.Prefab,
        Grenade_Prefab: cc.Prefab,
        Max_Create_Cross_Hair_Number: 5,
        Need_Create_Cross_Hair_Number: 0,
        Create_Cross_Hair_Schedule: cc.Schedule,
        SWAT_Shield: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Battle_Controller.Hero_Star >= 2 && this.Create_Extra_Skill();
        this.Battle_Controller.Hero_Star >= 4 && this.Create_Attack_Extra_Check();
        this.Create_Cross_Hair_Schedule = function() {
          if (this.Need_Create_Cross_Hair_Number > 0) {
            var Target_Number = this.Battle_Controller.Enemy_Parent.children.length;
            if (Target_Number > 0) {
              var Target = Math.round(Math.random() * (Target_Number - 1));
              if (null != this.Battle_Controller.Enemy_Parent.children[Target]) {
                var Skill_Cross_Hair = cc.instantiate(this.Skill_Cross_Hair_Prafab);
                Skill_Cross_Hair.parent = this.Battle_Controller.Enemy_Parent.children[Target].children[3];
                Skill_Cross_Hair.setPosition(0, 0);
                this.Hero_Common.Count_Is_Skill = 1;
                this.Hero_Common.Attack_Count();
                var Skill_Cross_Hair_Script = Skill_Cross_Hair.getComponent("Hero_Bullet_Common");
                Skill_Cross_Hair_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
                Skill_Cross_Hair_Script.Attack = this.Hero_Common.Attack_Result;
                Skill_Cross_Hair_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
                Skill_Cross_Hair_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
                Skill_Cross_Hair_Script.Battle_Controller = this.Battle_Controller;
                this.Need_Create_Cross_Hair_Number -= 1;
              } else {
                this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
                this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 0));
                this.Need_Create_Cross_Hair_Number = 0;
                this.unschedule(this.Create_Cross_Hair_Schedule);
              }
            } else {
              this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
              this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 0));
              this.Need_Create_Cross_Hair_Number = 0;
              this.unschedule(this.Create_Cross_Hair_Schedule);
            }
          } else {
            this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
            this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 0));
            this.unschedule(this.Create_Cross_Hair_Schedule);
          }
        };
        this.schedule(function() {
          var SWAT_Shield = cc.instantiate(this.SWAT_Shield);
          SWAT_Shield.parent = this.Battle_Controller.Hero_Shield_Parent;
          var x = Math.floor(551 * Math.random() - 1200);
          var y = Math.floor(Math.random() * (588.779 + 478.639 + 1) - 478.639);
          SWAT_Shield.setPosition(x, y);
          var SWAT_Shield = cc.instantiate(this.SWAT_Shield);
          SWAT_Shield.parent = this.Battle_Controller.Hero_Shield_Parent;
          var x = Math.floor(551 * Math.random() - 1200);
          var y = Math.floor(1185.047 * Math.random() - 595.268);
          SWAT_Shield.setPosition(x, y);
        }, 12);
        this.Battle_Controller.Hero_Star >= 3 && (this.Battle_Controller.Crit_Rate += 5);
        this.Battle_Controller.Hero_Star >= 5 && (this.Max_Create_Cross_Hair_Number += 5);
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        } else this.Is_First_Shoot = 0;
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Battle_Audio_Controller.Attack(0, .1);
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 100;
        Bullet.y = this.node.y - 10;
        0 == this.Is_First_Shoot && (Bullet.angle = Math.floor(6 * Math.random() - 3));
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        Bullet_Script.Ini_Speed = 3e4 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Script.Ini_Speed_Y = 3e4 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Script.Set_Speed();
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 30;
        Attack_Smoke.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Hero_Common.Skill_Picture();
      },
      Skill_Shoot: function Skill_Shoot() {
        this.unschedule(this.Create_Cross_Hair_Schedule);
        this.Need_Create_Cross_Hair_Number += this.Max_Create_Cross_Hair_Number;
        this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
        this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 200));
        this.schedule(this.Create_Cross_Hair_Schedule, .4);
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Is_First_Shoot = 1;
        this.Animation.play(this.node.name + "_Stay");
      },
      Create_Attack_Extra_Check: function Create_Attack_Extra_Check() {
        var Extra_Item = cc.instantiate(this.SWAT_Small_Missile_Extra_Check_Prefab);
        Extra_Item.parent = this.Battle_Controller.Normal_Attack_Extra_Check.node;
        var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Normal_Attack_Extra_Check.Normal_Attack_Extra_Check_Script.push(Extra_Item_Script);
        Extra_Item_Script.Battle_Controller = this.Battle_Controller;
      },
      Create_Extra_Skill: function Create_Extra_Skill() {
        if (this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Number < this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Limit) {
          var Extra_Skill_Button = cc.instantiate(this.Extra_Skill_Prefab);
          var Script = Extra_Skill_Button.getComponent("SWAT_Extra_Skill_Button");
          Script.Battle_Controller = this.Battle_Controller;
          switch (this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Number) {
           case 0:
            this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_1.parent.active = true;
            Extra_Skill_Button.parent = this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_1;
            this.Battle_Controller.Extra_Skill_Script.U_Skill = Script;
            this.Battle_Controller.Extra_Skill_Script.Set_U_Skill();
            break;

           case 1:
            this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_2.parent.active = true;
            Extra_Skill_Button.parent = this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_2;
            this.Battle_Controller.Extra_Skill_Script.I_Skill = Script;
            this.Battle_Controller.Extra_Skill_Script.Set_I_Skill();
            break;

           case 2:
            this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_3.parent.active = true;
            Extra_Skill_Button.parent = this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_3;
            this.Battle_Controller.Extra_Skill_Script.O_Skill = Script;
            this.Battle_Controller.Extra_Skill_Script.Set_O_Skill();
            break;

           default:
            console.log("Extra_Skill_Error");
          }
          Extra_Skill_Button.setPosition(0, 0);
          this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Number++;
        }
      },
      Shoot_Greade: function Shoot_Greade() {
        var Bullet = cc.instantiate(this.Grenade_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        this.Hero_Common.Count_Is_Skill = 1;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Save_Data: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67640L+OU5IVaYDEWIV1WS9", "Save_Data");
    "use strict";
    cc._RF.pop();
  }, {} ],
  Schedule_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6d9ed0fbbJHB6u4arZH2myw", "Schedule_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Schedule_Extra_Check: [ cc.Prefab ],
        Schedule_Extra_Check_Script: [ cc.Node ]
      }
    });
    cc._RF.pop();
  }, {} ],
  Select_Hero_Controller: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "428d0shEFJIr79bEcltQHVp", "Select_Hero_Controller");
    "use strict";
    var Hero_Initial_Data = require("Hero_Initial_Data");
    var Normal_Initial_Data = require("Normal_Initial_Data");
    cc.Class({
      extends: cc.Component,
      properties: {
        Stage: 0,
        Hero_Initial_Data: Hero_Initial_Data,
        Normal_Initial_Data: Normal_Initial_Data,
        Will_Go: 0,
        Scene_Name: [ cc.String ],
        Back_Button: cc.Node,
        Go_Button: cc.Node,
        All_Black: cc.Node,
        Load_Progress_Label: cc.Label,
        Hero_Information_Node: [ cc.Node ],
        Hero_Star_Label: [ cc.Label ],
        Hero_Button: [ cc.Node ],
        Select_Bar: cc.Node,
        Hero_Information_Label: cc.Label,
        Skill_Cold_Label: cc.Label,
        Hero_Image: [ cc.Node ],
        Team_Level: cc.Float,
        Hero_Star: [ cc.Float ]
      },
      start: function start() {
        cc.tween(this.All_Black).to(1, {
          opacity: 0
        }).start();
        this.Select_Hero_Start_Set();
        this.Back_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          var _this = this;
          if (0 == this.Stage) {
            this.Stage = 1;
            cc.tween(this.All_Black).to(1, {
              opacity: 255
            }).call(function() {
              _this.Will_Go = 0;
              _this.Go_Other_Scene();
            }).start();
          }
        }, this);
        this.Go_Button.on(cc.Node.EventType.TOUCH_START, function(event) {
          var _this2 = this;
          if (0 == this.Stage) {
            this.Stage = 1;
            cc.tween(this.All_Black).to(1, {
              opacity: 255
            }).call(function() {
              _this2.Will_Go = 1;
              _this2.Go_Other_Scene();
            }).start();
          }
        }, this);
      },
      Select_Hero_Start_Set: function Select_Hero_Start_Set() {
        var Selected_Hero = JSON.parse(cc.sys.localStorage.getItem("Selected_Hero"));
        if (null == Selected_Hero) {
          Selected_Hero = 0;
          cc.sys.localStorage.setItem("Selected_Hero", 0);
        }
        this.Team_Level = JSON.parse(cc.sys.localStorage.getItem("Team_Level"));
        if (null == this.Team_Level) {
          this.Team_Level = 1;
          cc.sys.localStorage.setItem("Team_Level", 1);
        }
        this.Hero_Star = JSON.parse(cc.sys.localStorage.getItem("Hero_Star"));
        if (null == this.Hero_Star) {
          this.Hero_Star = [ 1, 0, 0, 0, 0, 0 ];
          cc.sys.localStorage.setItem("Hero_Star", JSON.stringify(this.Hero_Star));
        }
        for (var i = 0; i < this.Hero_Star_Label.length; i++) if (0 == this.Hero_Star[i]) {
          this.Hero_Star_Label[i].string = "\u672a\u62e5\u6709";
          this.Hero_Image[i].color = cc.color(90, 90, 90);
        } else this.Hero_Star_Label[i].string = "\u7b49\u7ea7" + this.Hero_Star[i];
        this.Select_Bar.x = this.Hero_Button[Selected_Hero].x;
        this.Select_Bar.y = this.Hero_Button[Selected_Hero].y - 40;
        this.Hero_Information_Node[Selected_Hero].active = true;
        this.Set_Hero_Information_Label(Selected_Hero);
      },
      Set_Hero_Information_Label: function Set_Hero_Information_Label(Hero_Number) {
        var Hp = Math.ceil(this.Hero_Initial_Data.HP[Hero_Number] * (100 + this.Normal_Initial_Data.Team_Level_Up_Hp_Up * (this.Team_Level - 1)) / 100);
        var Attack = Math.ceil(this.Hero_Initial_Data.Attack[Hero_Number] * (100 + this.Normal_Initial_Data.Team_Level_Up_Attack_Up * (this.Team_Level - 1)) / 100);
        var Jing_Jie = this.Team_Level;
        var Defend = this.Team_Level;
        var Crit_Rate = this.Hero_Initial_Data.Crit_Rate[Hero_Number];
        var Crit_Mult = this.Hero_Initial_Data.Crit_Mult[Hero_Number];
        var Talent_Describe = this.Hero_Initial_Data.Talent_Describe[Hero_Number];
        var Characteristi_Describe = this.Hero_Initial_Data.Characteristi_Describe[Hero_Number];
        this.Hero_Information_Label.string = "\u751f\u547d\u503c       " + Hp + "\n\u653b\u51fb\u529b       " + Attack + "\n\u5883\u754c\u529b       " + Jing_Jie + "\n\u9632\u5fa1\u529b       " + Defend + "\n\u66b4\u51fb\u7387       " + Crit_Rate + "\n\u66b4\u51fb\u500d\u6570   " + Crit_Mult + "\n\u5929\u8d4b\u6280\u80fd   " + Talent_Describe + "\n\n\u7279\u70b9          " + Characteristi_Describe + "\n";
        this.Skill_Cold_Label.string = "\u51b7\u5374\u65f6\u95f4   " + this.Hero_Initial_Data.Skill_Cold_Time[Hero_Number] + "\u79d2";
      },
      Go_Other_Scene: function Go_Other_Scene() {
        cc.tween(this.Load_Progress_Label.node).to(1, {
          opacity: 255
        }).start();
        var Progress = 0;
        var Load_Progress_Label = this.Load_Progress_Label;
        var Will_Go_Scene = this.Scene_Name[this.Will_Go];
        cc.director.preloadScene(Will_Go_Scene, function(completedCount, totalCount) {
          Progress = completedCount / totalCount * 100;
          Load_Progress_Label.string = Math.floor(Progress) + "%";
        }, function() {
          cc.director.loadScene(Will_Go_Scene);
        });
      }
    });
    cc._RF.pop();
  }, {
    Hero_Initial_Data: "Hero_Initial_Data",
    Normal_Initial_Data: "Normal_Initial_Data"
  } ],
  Shine_Star: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7047d/dydhJ1qtwZypFzWt5", "Shine_Star");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Time: 0
      },
      start: function start() {
        var _this = this;
        this.Time = Math.floor(3 * Math.random()) + 1;
        cc.tween(this.node).repeatForever(cc.tween().to(this.Time / 2, {
          opacity: 0
        }).call(function() {
          _this.scale = Math.floor(.2 * Math.random()) + .05;
          _this.node.x = Math.floor(3e3 * Math.random()) - 1500;
          _this.node.y = Math.floor(1220 * Math.random()) - 610;
        }).to(this.Time / 2, {
          opacity: 255
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Show_Dead_Menu: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bb4d5g8FPtGsbtse4KhNLZF", "Show_Dead_Menu");
    "use strict";
    var Battle_Controller = require("Battle_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Dead_Menu: cc.Node,
        Canvas_Animation: cc.Animation,
        Battle_Controller: Battle_Controller
      },
      Show_Dead_Menu: function Show_Dead_Menu() {
        this.Dead_Menu.active = true;
        this.Canvas_Animation.play("Dead_Menu");
        this.Battle_Controller.Dead_Menu_Spoil_Show();
      }
    });
    cc._RF.pop();
  }, {
    Battle_Controller: "Battle_Controller"
  } ],
  Skill_Button_Common: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d5799qIoZZJ+ZqIBjrn+nRr", "Skill_Button_Common");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        BG_Sprite: cc.Sprite,
        Is_Cooling: 0,
        Cool_Schdule: cc.Schdule,
        Cool_Progress: 0,
        Is_Zhayun_Skill_Button: 0,
        Is_Police_Skill_Button: 0
      },
      start: function start() {
        this.Battle_Controller = cc.find("Canvas").getComponent("Battle_Controller");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          this.Skill_Start();
        }, this);
        this.Cool_Schdule = function() {
          if (this.Cool_Progress < 1e4) {
            this.Cool_Progress = this.Cool_Progress + 500 / this.Battle_Controller.Skill_Cold_Time;
            this.BG_Sprite.fillRange = (1e4 - this.Cool_Progress) / 1e4;
          } else {
            this.unschedule(this.Cool_Schdule);
            this.Is_Cooling = 0;
          }
        };
      },
      Skill_Start: function Skill_Start() {
        1 == this.Is_Zhayun_Skill_Button ? 0 == this.Battle_Controller.Hero_Script.Is_Ex && this.Skill_Check() : 1 == this.Is_Police_Skill_Button ? 0 == this.Battle_Controller.Hero_Script.Is_Ex && this.Skill_Check() : this.Skill_Check();
      },
      Skill_Check: function Skill_Check() {
        if (0 == this.Is_Cooling && 0 == this.Battle_Controller.Hero_Script.Is_Doing_Something && 1 == this.Battle_Controller.Hero_Script.Can_Skill) {
          this.Is_Cooling = 1;
          this.BG_Sprite.fillRange = 1;
          this.Battle_Controller.Hero_Script.Start_Skill_Check();
          this.Cool_Progress = 1e3;
          this.schedule(this.Cool_Schdule, .05);
        }
      },
      Reset_Cool: function Reset_Cool() {
        this.unschedule(this.Cool_Schdule);
        this.Is_Cooling = 0;
        this.Cool_Progress = 1e4;
        this.BG_Sprite.fillRange = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Skill_Follow_Particle: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "124a52W0udPlaRMbMa3N5mh", "Skill_Follow_Particle");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Target: cc.Node,
        MotionStreak: cc.MotionStreak,
        Target_Shifting_X: 0,
        Target_Shifting_Y: 0
      },
      onLoad: function onLoad() {},
      Start_Set: function Start_Set() {
        this.MotionStreak.stroke = Math.round(20 * Math.random()) + 10;
        if (null != this.Target) {
          var Action = cc.sequence(cc.spawn(cc.moveTo(.5, this.Target.x + this.Target_Shifting_X, this.Target.y + this.Target_Shifting_Y), cc.fadeTo(.85, 255)), cc.callFunc(function() {
            this.node.destroy();
          }, this));
          this.node.runAction(Action);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Skill_Follow_Smoke: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "99667GO9gNHWY+TAQzHoT7x", "Skill_Follow_Smoke");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Target: cc.Node,
        Target_Shifting_X: 0,
        Target_Shifting_Y: 0
      },
      Start_Set: function Start_Set() {
        this.node.scaleX = 2 * Math.random() + 3;
        this.node.scaleY = this.node.scaleX;
        this.node.angle = 360 * Math.random();
        if (null != this.Target) {
          var Action = cc.sequence(cc.spawn(cc.moveTo(.5, this.Target.x + this.Target_Shifting_X, this.Target.y + this.Target_Shifting_Y), cc.scaleTo(.5, 0, 0), cc.fadeTo(.5, 100), cc.rotateBy(.5, 255)), cc.callFunc(function() {
            this.node.destroy();
          }, this));
          this.node.runAction(Action);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Skill_Up_Fire: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "278ccRbxH1IV6Xc+aYPQ4cV", "Skill_Up_Fire");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Sprite: cc.Sprite,
        frame: [ cc.SpriteFrame ]
      },
      onLoad: function onLoad() {},
      Start_Set: function Start_Set() {
        this.node.scaleX = .5 * Math.random() + .1;
        this.node.scaleY = this.node.scaleX;
        this.node.angle = 360 * Math.random();
        this.Sprite.spriteFrame = this.frame[Math.floor(5 * Math.random())];
        var Action = cc.sequence(cc.spawn(cc.moveBy(.8, 201 * Math.random() - 100, 200 * Math.random() + 100), cc.scaleTo(.8, 0, 0), cc.fadeTo(.8, 255), cc.rotateBy(.8, 255)), cc.callFunc(function() {
          this.node.destroy();
        }, this));
        this.node.runAction(Action);
      }
    });
    cc._RF.pop();
  }, {} ],
  Small_Missile: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0180fO1xvVF/YY5UyoBkO/F", "Small_Missile");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Speed: 10,
        Particle_Parent: cc.Node,
        PhysicsBoxCollider: cc.PhysicsBoxCollider,
        BoxCollider: cc.BoxCollider,
        Enemy_Parent: cc.Node
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Enemy_Parent = this.Hero_Bullet_Common.Battle_Controller.Enemy_Parent;
        if (this.Enemy_Parent.children.length > 0) {
          var Target = Math.floor(Math.random() * this.Enemy_Parent.children.length);
          var dir = cc.v2(this.node.x - this.Enemy_Parent.children[Target].x, this.node.y - this.Enemy_Parent.children[Target].y);
          var radian = Math.atan2(dir.y, dir.x);
          this.node.angle = radian / Math.PI * 180 - 180;
          var RigidBody = this.node.getComponent(cc.RigidBody);
          RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
        } else {
          var RigidBody = this.node.getComponent(cc.RigidBody);
          RigidBody.linearVelocity = cc.v2(this.Speed, 0);
        }
      },
      Special_Bullet_Hit: function Special_Bullet_Hit(contact, selfCollider, otherCollider) {
        if ("Enemy" == otherCollider.node.group) {
          this.node.getComponent(cc.Animation).play("Small_Missile");
          var Bmob_Partile = this.node.children[1];
          if (null != Bmob_Partile) {
            Bmob_Partile.x = this.node.x;
            Bmob_Partile.y = this.node.y;
            Bmob_Partile.active = true;
            Bmob_Partile.parent = this.Particle_Parent;
          }
          var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
          if (null != ParticleSystem) {
            ParticleSystem.node.parent = this.Particle_Parent;
            ParticleSystem.duration = .01;
          }
        }
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        null != other.node && "Enemy" == other.node.group && this.Hero_Bullet_Common.Enemy_Injured(other);
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Small_Rain: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "67166nojqxMXLZJI2Yqkzvq", "Small_Rain");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().by(5 * Math.random() + .05, {
          position: cc.v2(-1e3 - 500 * Math.random(), -2e3)
        }).call(function() {
          _this.node.y = 973.194;
          var a = Math.round(Math.random());
          _this.node.x = 1 == a ? 3004.721 * Math.random() : -1917.483 * Math.random();
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Speed_Line: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aa829uMCnNB6bDWxQHrKg5e", "Speed_Line");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {
        var _this = this;
        cc.tween(this.node).repeatForever(cc.tween().by(.2 * Math.random() + .1, {
          position: cc.v2(-4615.707, 0)
        }).call(function() {
          _this.node.x = 2615.707;
          _this.node.scaleX = 10 * Math.random() + 5;
          var a = Math.round(Math.random());
          _this.node.y = 1 == a ? 800 * Math.random() : -800 * Math.random();
        })).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Sprint_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c6208X1tiRIuoUcdHzTosEr", "Sprint_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Sprint_Extra_Check_Prefab: [ cc.Prefab ],
        Sprint_Extra_Check_Script: [ cc.Node ]
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Sprint: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8c6d3n/ioxDQ7F2wAH/nkbL", "Sprint");
    "use strict";
    var JoyStick = require("JoyStick");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Parent: cc.Node,
        Joystick_Script: JoyStick,
        Ini_Cool_Time: 2,
        Cool_Time: 2,
        Is_Cooling: 0,
        Battle_Controller: cc.Node,
        Sprite: cc.Sprite,
        Hero_Ghost_Father: cc.Node,
        Camera_Shake: cc.Animation,
        Ghost_Schedule: cc.Schedule
      },
      Start_Set: function Start_Set() {
        this.Battle_Controller = this.Battle_Controller.getComponent("Battle_Controller");
        this.Ghost_Schedule = function() {
          var Hero_Ghost = cc.instantiate(this.Battle_Controller.Hero_Sprint_Ghost_Prefab);
          Hero_Ghost.parent = this.Hero_Ghost_Father;
          Hero_Ghost.x = this.Hero_Parent.children[0].x;
          Hero_Ghost.y = this.Hero_Parent.children[0].y;
        };
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          var _this = this;
          if (0 == this.Is_Cooling) {
            this.Joystick_Script.Sprint();
            this.Is_Cooling = 1;
            this.Sprite.fillRange = 0;
            cc.tween(this.Sprite).to(this.Cool_Time, {
              fillRange: -1
            }).call(function() {
              _this.Is_Cooling = 0;
            }).start();
            this.unschedule(this.Ghost_Schedule);
            this.schedule(this.Ghost_Schedule, .01);
            this.Camera_Shake.play();
            for (var i = 0; i < this.Battle_Controller.Sprint_Extra_Check.Sprint_Extra_Check_Script.length; i++) this.Battle_Controller.Sprint_Extra_Check.Sprint_Extra_Check_Script[i].Check();
          }
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    JoyStick: "JoyStick"
  } ],
  Start_Move_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "07540Jmm45K9Jk3MH0Trfs9", "Start_Move_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Start_Move_Extra_Check_Prefab: [ cc.Prefab ],
        Start_Move_Extra_Check_Script: [ cc.Node ]
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Stop_Attack_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8186aE1rkBFuYyh46KwbQd3", "Stop_Attack_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Prefab: [ cc.Prefab ],
        Script: [ cc.Node ]
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Stop_Move_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "83d77usijlLEYlBwe41rZJb", "Stop_Move_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Stop_Move_Extra_Check_Prefab: [ cc.Prefab ],
        Stop_Move_Extra_Check_Script: [ cc.Node ]
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  Story: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aada2RzhodC8ZMKxsMr1Lh2", "Story");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Progress: 0,
        English: cc.Label,
        English_Anima: cc.Animation,
        Image: [ cc.Node ],
        All_Black: cc.Node
      },
      onLoad: function onLoad() {
        cc.sp.autoSwitchMaterial = false;
      },
      start: function start() {
        cc.director.preloadScene("Main");
        cc.tween(this.Image[0]).to(.5, {
          opacity: 255
        }).start();
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          switch (this.Progress) {
           case 0:
            cc.Tween.stopAllByTarget(this.Image[0]);
            cc.tween(this.Image[0]).to(.5, {
              opacity: 0
            }).start();
            cc.tween(this.Image[1]).to(.5, {
              opacity: 255
            }).start();
            this.English.string = "However, people have become very bored. \nMore and more people are wandering aimlessly on the streets, not knowing what to do";
            this.English_Anima.play();
            this.Progress++;
            break;

           case 1:
            cc.Tween.stopAllByTarget(this.Image[1]);
            cc.tween(this.Image[1]).to(.5, {
              opacity: 0
            }).start();
            cc.tween(this.Image[2]).to(.5, {
              opacity: 255
            }).start();
            this.English.string = "Until one day, the messenger of the gods sent out an \u300cinvitation to the Bullet Hell Trial\u300d";
            this.English_Anima.play();
            this.Progress++;
            break;

           case 2:
            cc.Tween.stopAllByTarget(this.Image[2]);
            cc.tween(this.Image[2]).to(.5, {
              opacity: 0
            }).start();
            cc.tween(this.Image[3]).to(.5, {
              opacity: 255
            }).start();
            this.English.string = "Earth heroes from various continents and eras have signed up to embark on the trial journey";
            this.English_Anima.play();
            this.Progress++;
            break;

           case 3:
            cc.Tween.stopAllByTarget(this.Image[3]);
            cc.tween(this.Image[3]).to(.5, {
              opacity: 0
            }).start();
            cc.tween(this.Image[4]).to(.5, {
              opacity: 255
            }).start();
            this.English.string = "They will perform a series of wonderful battles with the gods and write a new epic.\n Later generations will call it...";
            this.English_Anima.play();
            this.Progress++;
            break;

           case 4:
            cc.tween(this.All_Black).to(.5, {
              opacity: 255
            }).call(function() {
              cc.director.loadScene("Main");
            }).start();
            this.Progress++;
          }
        }, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  Surround_Small_Shield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c3f36DkkQ9OeIn08iLvPfdA", "Surround_Small_Shield");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Particle_Prefab: cc.Prefab,
        Animation: cc.Animation,
        Collider: cc.BoxCollider
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Enemy_Bullet" == other.node.group && null != other.node) {
          var Enemy_Bullet_Common = other.node.getComponent("Enemy_Bullet_Common");
          if (0 == Enemy_Bullet_Common.Is_Tetris && 1 == Enemy_Bullet_Common.Is_Normal_Bullet && 1 == Enemy_Bullet_Common.Can_Destroy) {
            Enemy_Bullet_Common.Be_Destroy();
            var Hit_Efffect = cc.instantiate(this.Particle_Prefab);
            Hit_Efffect.parent = this.Battle_Controller.Particle_Parent;
            Hit_Efffect.x = other.node.x;
            Hit_Efffect.y = other.node.y;
            this.Battle_Controller.Camera_Shake_Small();
          }
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Surround_Zhiqing_Shield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3eaa64xjidPXaL68vBYL3il", "Surround_Zhiqing_Shield");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Particle_Prefab: cc.Prefab,
        Animation: cc.Animation,
        Hero_Common: cc.Node,
        Can_Collider: 1,
        Reborn_Schedule: cc.Schedule
      },
      start: function start() {
        this.Reborn_Schedule = function() {
          this.Can_Collider = 1;
          this.Animation.play("Surround_Zhiqing_Shield_Born");
        };
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if (1 == this.Can_Collider) {
          if ("Enemy_Bullet" == other.node.group) {
            if (null != other.node) {
              var Enemy_Bullet_Common = other.node.getComponent("Enemy_Bullet_Common");
              0 == Enemy_Bullet_Common.Is_Tetris && 1 == Enemy_Bullet_Common.Is_Normal_Bullet && 1 == Enemy_Bullet_Common.Can_Destroy && Enemy_Bullet_Common.Be_Destroy();
            }
          } else if ("Enemy" == other.node.group && this.Battle_Controller.Hero_Star >= 4) {
            this.Hero_Common.Count_Is_Skill = 4;
            this.Hero_Common.Attack_Count();
            var Enemy_Common = other.node.getComponent("Enemy_Common");
            null != Enemy_Common && Enemy_Common.Injured(this.Hero_Common.Jing_Jie_Result, 5 * this.Hero_Common.Attack_Result, this.Hero_Common.Crit_Rate_Result, this.Hero_Common.Crit_Mult_Result, 100);
          }
          var Hit_Efffect = cc.instantiate(this.Particle_Prefab);
          Hit_Efffect.parent = this.Battle_Controller.Particle_Parent;
          Hit_Efffect.x = other.node.x;
          Hit_Efffect.y = other.node.y;
          this.Battle_Controller.Camera_Shake_Small();
          this.node.opacity = 0;
          this.Can_Collider = 0;
          this.unschedule(this.Reborn_Schedule);
          this.scheduleOnce(this.Reborn_Schedule, 5);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Tangsen_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "df5cb1W0w1PiL6rf/osFKV2", "Tangsen_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        "Enemy" == otherCollider.node.group && null != otherCollider.node && "" != otherCollider.node.name && otherCollider.node.getComponent("Enemy_Common").To_Weak();
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Test_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a44b5WLAUhCFoq2dWRvgTvq", "Test_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Which: 0,
        BG_1: cc.Node,
        BG_2: cc.Node
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log(this.Which);
          switch (this.Which) {
           case 0:
            this.Which = 1;
            this.BG_1.active = true;
            this.BG_2.active = false;
            break;

           case 1:
            this.Which = 0;
            this.BG_1.active = false;
            this.BG_2.active = true;
          }
        }, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  Test_Data: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fc5689ZAc9B850wFXw3OFYr", "Test_Data");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onLoad: function onLoad() {},
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  TextMeshPro: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b26c9Lk3GNMmoip2mcq6Nyf", "TextMeshPro");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TmpUniform = exports.TmpOverflow = void 0;
    var TmpAssembler_1 = require("./utils/TmpAssembler");
    var TmpFontConfig_1 = require("./utils/TmpFontConfig");
    var TmpUtils_1 = require("./utils/TmpUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, executeInEditMode = _a.executeInEditMode, menu = _a.menu;
    var TmpOverflow;
    (function(TmpOverflow) {
      TmpOverflow[TmpOverflow["NONE"] = 0] = "NONE";
      TmpOverflow[TmpOverflow["CLAMP"] = 1] = "CLAMP";
      TmpOverflow[TmpOverflow["ELLIPSIS"] = 2] = "ELLIPSIS";
      TmpOverflow[TmpOverflow["SHRINK"] = 3] = "SHRINK";
      TmpOverflow[TmpOverflow["RESIZE_HEIGHT"] = 4] = "RESIZE_HEIGHT";
    })(TmpOverflow = exports.TmpOverflow || (exports.TmpOverflow = {}));
    var TmpUniform = function() {
      function TmpUniform() {
        this._faceColor = cc.Color.WHITE;
        this._faceDilate = .5;
        this._faceSoftness = .01;
        this._enableOutline = false;
        this._outlineColor = cc.color(255, 0, 0, 255);
        this._outlineThickness = .1;
        this._enableUnderlay = false;
        this._underlayColor = cc.color(0, 0, 0, 255);
        this._underlayOffset = cc.v2(0, 0);
        this._underlayDilate = .5;
        this._underlaySoftness = .1;
        this._enableGlow = false;
        this._glowColor = cc.color(0, 255, 0, 255);
        this._glowOffset = .5;
        this._glowInner = .01;
        this._glowOuter = .01;
        this._glowPower = 1;
        this._comp = null;
      }
      Object.defineProperty(TmpUniform.prototype, "faceColor", {
        get: function() {
          return this._faceColor;
        },
        set: function(v) {
          if (true, this._faceColor === v) return;
          this._faceColor = v;
          if (!this._comp) return;
          this._comp.updateTmpMatFace(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "faceDilate", {
        get: function() {
          return this._faceDilate;
        },
        set: function(v) {
          if (this._faceDilate === v) return;
          this._faceDilate = v;
          if (!this._comp) return;
          this._comp.updateTmpMatFace(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "faceSoftness", {
        get: function() {
          return this._faceSoftness;
        },
        set: function(v) {
          if (this._faceSoftness === v) return;
          this._faceSoftness = v;
          if (!this._comp) return;
          this._comp.updateTmpMatFace(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "enableOutline", {
        get: function() {
          return this._enableOutline;
        },
        set: function(v) {
          if (this._enableOutline === v) return;
          this._enableOutline = v;
          if (!this._comp) return;
          this._comp.updateTmpMatOutline(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "outlineColor", {
        get: function() {
          return this._outlineColor;
        },
        set: function(v) {
          if (true, this._outlineColor === v) return;
          this._outlineColor = v;
          if (!this._comp) return;
          this._comp.updateTmpMatOutline(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "outlineThickness", {
        get: function() {
          return this._outlineThickness;
        },
        set: function(v) {
          if (this._outlineThickness === v) return;
          this._outlineThickness = v;
          if (!this._comp) return;
          this._comp.updateTmpMatOutline(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "enableUnderlay", {
        get: function() {
          return this._enableUnderlay;
        },
        set: function(v) {
          if (this._enableUnderlay === v) return;
          this._enableUnderlay = v;
          if (!this._comp) return;
          this._comp.updateTmpMatUnderlay(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "underlayColor", {
        get: function() {
          return this._underlayColor;
        },
        set: function(v) {
          if (true, this._underlayColor === v) return;
          this._underlayColor = v;
          if (!this._comp) return;
          this._comp.updateTmpMatUnderlay(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "underlayOffset", {
        get: function() {
          return this._underlayOffset;
        },
        set: function(v) {
          if (true, this._underlayOffset === v) return;
          this._underlayOffset = v;
          if (!this._comp) return;
          this._comp.updateTmpMatUnderlay(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "underlayDilate", {
        get: function() {
          return this._underlayDilate;
        },
        set: function(v) {
          if (this._underlayDilate === v) return;
          this._underlayDilate = v;
          if (!this._comp) return;
          this._comp.updateTmpMatUnderlay(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "underlaySoftness", {
        get: function() {
          return this._underlaySoftness;
        },
        set: function(v) {
          if (this._underlaySoftness === v) return;
          this._underlaySoftness = v;
          if (!this._comp) return;
          this._comp.updateTmpMatUnderlay(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "enableGlow", {
        get: function() {
          return this._enableGlow;
        },
        set: function(v) {
          if (this._enableGlow === v) return;
          this._enableGlow = v;
          if (!this._comp) return;
          this._comp.updateTmpMatGlow(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "glowColor", {
        get: function() {
          return this._glowColor;
        },
        set: function(v) {
          if (true, this._glowColor === v) return;
          this._glowColor = v;
          if (!this._comp) return;
          this._comp.updateTmpMatGlow(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "glowOffset", {
        get: function() {
          return this._glowOffset;
        },
        set: function(v) {
          if (this._glowOffset === v) return;
          this._glowOffset = v;
          if (!this._comp) return;
          this._comp.updateTmpMatGlow(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "glowInner", {
        get: function() {
          return this._glowInner;
        },
        set: function(v) {
          if (this._glowInner === v) return;
          this._glowInner = v;
          if (!this._comp) return;
          this._comp.updateTmpMatGlow(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "glowOuter", {
        get: function() {
          return this._glowOuter;
        },
        set: function(v) {
          if (this._glowOuter === v) return;
          this._glowOuter = v;
          if (!this._comp) return;
          this._comp.updateTmpMatGlow(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "glowPower", {
        get: function() {
          return this._glowPower;
        },
        set: function(v) {
          if (this._glowPower === v) return;
          this._glowPower = v;
          if (!this._comp) return;
          this._comp.updateTmpMatGlow(this._comp.getMaterial(0));
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpUniform.prototype, "comp", {
        get: function() {
          return this._comp;
        },
        enumerable: false,
        configurable: true
      });
      TmpUniform.prototype.init = function(text) {
        this._comp = text;
        false;
        var material = this._comp.getMaterial(0);
        this._comp.updateTmpMatFace(material);
        this._comp.updateTmpMatOutline(material);
        this._comp.updateTmpMatUnderlay(material);
        this._comp.updateTmpMatGlow(material);
      };
      __decorate([ property(cc.Color) ], TmpUniform.prototype, "_faceColor", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Color
      }) ], TmpUniform.prototype, "faceColor", null);
      __decorate([ property() ], TmpUniform.prototype, "_faceDilate", void 0);
      __decorate([ property({
        tooltip: false,
        range: [ 0, 1, .01 ]
      }) ], TmpUniform.prototype, "faceDilate", null);
      __decorate([ property() ], TmpUniform.prototype, "_faceSoftness", void 0);
      __decorate([ property({
        tooltip: false,
        range: [ 0, 1, .01 ]
      }) ], TmpUniform.prototype, "faceSoftness", null);
      __decorate([ property() ], TmpUniform.prototype, "_enableOutline", void 0);
      __decorate([ property({
        tooltip: false
      }) ], TmpUniform.prototype, "enableOutline", null);
      __decorate([ property(cc.Color) ], TmpUniform.prototype, "_outlineColor", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Color,
        visible: function() {
          return this._enableOutline;
        }
      }) ], TmpUniform.prototype, "outlineColor", null);
      __decorate([ property() ], TmpUniform.prototype, "_outlineThickness", void 0);
      __decorate([ property({
        tooltip: false,
        range: [ 0, 1, .01 ],
        visible: function() {
          return this._enableOutline;
        }
      }) ], TmpUniform.prototype, "outlineThickness", null);
      __decorate([ property() ], TmpUniform.prototype, "_enableUnderlay", void 0);
      __decorate([ property({
        tooltip: false
      }) ], TmpUniform.prototype, "enableUnderlay", null);
      __decorate([ property(cc.Color) ], TmpUniform.prototype, "_underlayColor", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Color,
        visible: function() {
          return this._enableUnderlay;
        }
      }) ], TmpUniform.prototype, "underlayColor", null);
      __decorate([ property(cc.Vec2) ], TmpUniform.prototype, "_underlayOffset", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Vec2,
        range: [ -1, 1 ],
        visible: function() {
          return this._enableUnderlay;
        }
      }) ], TmpUniform.prototype, "underlayOffset", null);
      __decorate([ property() ], TmpUniform.prototype, "_underlayDilate", void 0);
      __decorate([ property({
        tooltip: false,
        range: [ 0, 1, .01 ],
        visible: function() {
          return this._enableUnderlay;
        }
      }) ], TmpUniform.prototype, "underlayDilate", null);
      __decorate([ property() ], TmpUniform.prototype, "_underlaySoftness", void 0);
      __decorate([ property({
        tooltip: false,
        range: [ 0, 1, .01 ],
        visible: function() {
          return this._enableUnderlay;
        }
      }) ], TmpUniform.prototype, "underlaySoftness", null);
      __decorate([ property() ], TmpUniform.prototype, "_enableGlow", void 0);
      __decorate([ property({
        tooltip: false
      }) ], TmpUniform.prototype, "enableGlow", null);
      __decorate([ property(cc.Color) ], TmpUniform.prototype, "_glowColor", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Color,
        visible: function() {
          return this._enableGlow;
        }
      }) ], TmpUniform.prototype, "glowColor", null);
      __decorate([ property() ], TmpUniform.prototype, "_glowOffset", void 0);
      __decorate([ property({
        tooltip: false,
        range: [ 0, 1, .01 ],
        visible: function() {
          return this._enableGlow;
        }
      }) ], TmpUniform.prototype, "glowOffset", null);
      __decorate([ property() ], TmpUniform.prototype, "_glowInner", void 0);
      __decorate([ property({
        tooltip: false,
        range: [ 0, 1, .01 ],
        visible: function() {
          return this._enableGlow;
        }
      }) ], TmpUniform.prototype, "glowInner", null);
      __decorate([ property() ], TmpUniform.prototype, "_glowOuter", void 0);
      __decorate([ property({
        tooltip: false,
        range: [ 0, 1, .01 ],
        visible: function() {
          return this._enableGlow;
        }
      }) ], TmpUniform.prototype, "glowOuter", null);
      __decorate([ property() ], TmpUniform.prototype, "_glowPower", void 0);
      __decorate([ property({
        tooltip: false,
        range: [ 0, 1, .01 ],
        visible: function() {
          return this._enableGlow;
        }
      }) ], TmpUniform.prototype, "glowPower", null);
      TmpUniform = __decorate([ ccclass("TmpUniform") ], TmpUniform);
      return TmpUniform;
    }();
    exports.TmpUniform = TmpUniform;
    var TextMeshPro = function(_super) {
      __extends(TextMeshPro, _super);
      function TextMeshPro() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._string = "";
        _this._font = null;
        _this._horizontalAlign = cc.Label.HorizontalAlign.LEFT;
        _this._verticalAlign = cc.Label.VerticalAlign.TOP;
        _this._actualFontSize = 0;
        _this._fontSize = 32;
        _this._lineHeight = 32;
        _this._spacingX = 0;
        _this._overflow = TmpOverflow.NONE;
        _this._enableWrapText = true;
        _this._enableItalic = false;
        _this._enableUnderline = false;
        _this._underlineOffset = 0;
        _this._enableStrikethrough = false;
        _this._strikethroughOffset = 0;
        _this._colorGradient = false;
        _this._colorLB = cc.Color.WHITE;
        _this._colorRB = cc.Color.WHITE;
        _this._colorLT = cc.Color.WHITE;
        _this._colorRT = cc.Color.WHITE;
        _this.tmpUniform = new TmpUniform();
        _this.textures = [];
        _this._fontConfig = null;
        _this._assembler = null;
        _this._worldVertsDirty = false;
        _this._colorExtraDirty = false;
        _this._richTextDeltaX = 0;
        return _this;
      }
      Object.defineProperty(TextMeshPro.prototype, "string", {
        get: function() {
          return this._string;
        },
        set: function(v) {
          if (this._string === v) return;
          this._string = v;
          this["setVertsDirty"]();
          this._checkStringEmpty();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "font", {
        get: function() {
          return this._font;
        },
        set: function(v) {
          if (this._font === v) return;
          this._font = v;
          false;
          if (!this.enabledInHierarchy) return;
          this.forceUpdateRenderData();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "horizontalAlign", {
        get: function() {
          return this._horizontalAlign;
        },
        set: function(v) {
          if (this._horizontalAlign === v) return;
          this._horizontalAlign = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "verticalAlign", {
        get: function() {
          return this._verticalAlign;
        },
        set: function(v) {
          if (this._verticalAlign === v) return;
          this._verticalAlign = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "actualFontSize", {
        get: function() {
          return this._actualFontSize;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "bmfontOriginalSize", {
        get: function() {
          return this.font ? this.font.json.size : -1;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "fontSize", {
        get: function() {
          return this._fontSize;
        },
        set: function(v) {
          if (this._fontSize === v) return;
          this._fontSize = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "lineHeight", {
        get: function() {
          return this._lineHeight;
        },
        set: function(v) {
          if (this._lineHeight === v) return;
          this._lineHeight = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "spacingX", {
        get: function() {
          return this._spacingX;
        },
        set: function(v) {
          if (this._spacingX === v) return;
          this._spacingX = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "overflow", {
        get: function() {
          return this._overflow;
        },
        set: function(v) {
          if (this._overflow === v) return;
          this._overflow = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "enableWrapText", {
        get: function() {
          return this._enableWrapText;
        },
        set: function(v) {
          if (this._enableWrapText === v) return;
          this._enableWrapText = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "enableItalic", {
        get: function() {
          return this._enableItalic;
        },
        set: function(v) {
          if (this._enableItalic === v) return;
          this._enableItalic = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "enableUnderline", {
        get: function() {
          return this._enableUnderline;
        },
        set: function(v) {
          if (this._enableUnderline === v) return;
          this._enableUnderline = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "underlineOffset", {
        get: function() {
          return this._underlineOffset;
        },
        set: function(v) {
          if (this._underlineOffset === v) return;
          this._underlineOffset = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "enableStrikethrough", {
        get: function() {
          return this._enableStrikethrough;
        },
        set: function(v) {
          if (this._enableStrikethrough === v) return;
          this._enableStrikethrough = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "strikethroughOffset", {
        get: function() {
          return this._strikethroughOffset;
        },
        set: function(v) {
          if (this._strikethroughOffset === v) return;
          this._strikethroughOffset = v;
          this["setVertsDirty"]();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "colorGradient", {
        get: function() {
          return this._colorGradient;
        },
        set: function(v) {
          if (this._colorGradient === v) return;
          this._colorGradient = v;
          this._colorExtraDirty = true;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "colorLB", {
        get: function() {
          return this._colorLB;
        },
        set: function(v) {
          if (true, this._colorLB === v) return;
          this._colorLB = v;
          this._colorExtraDirty = true;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "colorRB", {
        get: function() {
          return this._colorRB;
        },
        set: function(v) {
          if (true, this._colorRB === v) return;
          this._colorRB = v;
          this._colorExtraDirty = true;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "colorLT", {
        get: function() {
          return this._colorLT;
        },
        set: function(v) {
          if (true, this._colorLT === v) return;
          this._colorLT = v;
          this._colorExtraDirty = true;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "colorRT", {
        get: function() {
          return this._colorRT;
        },
        set: function(v) {
          if (true, this._colorRT === v) return;
          this._colorRT = v;
          this._colorExtraDirty = true;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "fontConfig", {
        get: function() {
          return this._fontConfig;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextMeshPro.prototype, "richTextDeltaX", {
        get: function() {
          return this._richTextDeltaX;
        },
        enumerable: false,
        configurable: true
      });
      TextMeshPro.prototype.editorInit = function() {
        var _this = this;
        false;
      };
      TextMeshPro.prototype.resetInEditor = function() {
        var _this = this;
        false;
      };
      TextMeshPro.prototype.onLoad = function() {
        this.editorInit();
        this.tmpUniform.init(this);
        !this._fontConfig && this.font && this.textures.length > 0 && (this._fontConfig = new TmpFontConfig_1.default(this._font.json, this.textures));
      };
      TextMeshPro.prototype.onEnable = function() {
        _super.prototype.onEnable.call(this);
        this.node.on(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
        this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this["setVertsDirty"], this);
        this.forceUpdateRenderData();
      };
      TextMeshPro.prototype.onDisable = function() {
        _super.prototype.onDisable.call(this);
        this.node.off(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
        this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this["setVertsDirty"], this);
      };
      TextMeshPro.prototype.lateUpdate = function(dt) {
        if (this._worldVertsDirty) {
          this._worldVertsDirty = false;
          this._assembler.updateWorldVerts(this);
        }
        if (this._colorExtraDirty) {
          this._colorExtraDirty = false;
          this._assembler.updateColorExtra(this);
        }
      };
      TextMeshPro.prototype._nodeSizeChanged = function() {
        (false, this.overflow !== TmpOverflow.NONE) && this["setVertsDirty"]();
      };
      TextMeshPro.prototype._validateRender = function() {
        if (!this.string) {
          this["disableRender"]();
          return;
        }
        if (this.getMaterial(0) && this.textures.length > 0) return;
        this["disableRender"]();
      };
      TextMeshPro.prototype._resetAssembler = function() {
        cc.RenderComponent.prototype["_resetAssembler"].call(this);
      };
      TextMeshPro.prototype._checkStringEmpty = function() {
        this["markForRender"](!!this.string);
      };
      TextMeshPro.prototype._on3DNodeChanged = function() {
        this._resetAssembler();
        this._applyFontTexture();
      };
      TextMeshPro.prototype._onBMFontTextureLoaded = function() {
        this["markForRender"](true);
        this._updateMaterial();
      };
      TextMeshPro.prototype._onBlendChanged = function() {
        if (!this.enabledInHierarchy) return;
        this.forceUpdateRenderData();
      };
      TextMeshPro.prototype._applyFontTexture = function() {
        this["markForValidate"]();
      };
      TextMeshPro.prototype._updateMaterial = function() {
        var material = this.getMaterial(0);
        if (!material) return;
        cc.BlendFunc.prototype["_updateMaterialBlendFunc"].call(this, material);
        this._updateTmpMatTexture(material);
        if (!this.tmpUniform || !this.tmpUniform.comp) return;
        this.updateTmpMatFace(material);
        this.updateTmpMatOutline(material);
        this.updateTmpMatUnderlay(material);
        this.updateTmpMatGlow(material);
      };
      TextMeshPro.prototype._updateTmpMatTexture = function(material) {
        if (!material || this.textures.length <= 0) return;
        material.define("USE_TEXTURE_LEVEL_1", this.textures.length > 0);
        material.define("USE_TEXTURE_LEVEL_2", this.textures.length > 1);
        material.define("USE_TEXTURE_LEVEL_3", this.textures.length > 2);
        material.define("USE_TEXTURE_LEVEL_4", this.textures.length > 4);
        for (var i = 0; i < this.textures.length; i++) material.setProperty("texture" + i, this.textures[i]);
        material["_effect"]._dirty = true;
      };
      TextMeshPro.prototype.updateTmpMatFace = function(material) {
        if (!material) return;
        material.setProperty("faceColor", this.tmpUniform.faceColor);
        material.setProperty("faceDilate", this.tmpUniform.faceDilate);
        material.setProperty("faceSoftness", this.tmpUniform.faceSoftness);
        material["_effect"]._dirty = true;
      };
      TextMeshPro.prototype.updateTmpMatOutline = function(material) {
        if (!material) return;
        material.define("USE_OUTLINE", this.tmpUniform.enableOutline);
        if (this.tmpUniform.enableOutline) {
          material.setProperty("outlineColor", this.tmpUniform.outlineColor);
          material.setProperty("outlineThickness", this.tmpUniform.outlineThickness);
        }
        material["_effect"]._dirty = true;
      };
      TextMeshPro.prototype.updateTmpMatUnderlay = function(material) {
        if (!material) return;
        material.define("USE_UNDERLAY", this.tmpUniform.enableUnderlay);
        if (this.tmpUniform.enableUnderlay) {
          material.setProperty("underlayColor", this.tmpUniform.underlayColor);
          material.setProperty("underlayOffsetX", this.tmpUniform.underlayOffset.x);
          material.setProperty("underlayOffsetY", this.tmpUniform.underlayOffset.y);
          material.setProperty("underlayDilate", this.tmpUniform.underlayDilate);
          material.setProperty("underlaySoftness", this.tmpUniform.underlaySoftness);
        }
        material["_effect"]._dirty = true;
      };
      TextMeshPro.prototype.updateTmpMatGlow = function(material) {
        if (!material) return;
        material.define("USE_GLOW", this.tmpUniform.enableGlow);
        if (this.tmpUniform.enableGlow) {
          material.setProperty("glowColor", this.tmpUniform.glowColor);
          material.setProperty("glowOffset", this.tmpUniform.glowOffset);
          material.setProperty("glowInner", this.tmpUniform.glowInner);
          material.setProperty("glowOuter", this.tmpUniform.glowOuter);
          material.setProperty("glowPower", this.tmpUniform.glowPower);
        }
        material["_effect"]._dirty = true;
      };
      TextMeshPro.prototype.forceUpdateRenderData = function() {
        this["setVertsDirty"]();
        this._resetAssembler();
        this._applyFontTexture();
        this._assembler && this._assembler.updateRenderData(this);
        this.node["_renderFlag"] |= cc["RenderFlow"].FLAG_COLOR;
      };
      TextMeshPro.prototype.setFont = function(font, textures) {
        if (!font || textures.length < 0) {
          cc.error("please check your font!");
          return;
        }
        this._font = font;
        this.textures = textures;
        this._fontConfig = new TmpFontConfig_1.default(this._font.json, this.textures);
        if (!this.enabledInHierarchy) return;
        this.forceUpdateRenderData();
        this._onBMFontTextureLoaded();
      };
      TextMeshPro.prototype.isVisible = function(index) {
        if (!this.enabledInHierarchy) return false;
        return this._assembler.isVisble(index);
      };
      TextMeshPro.prototype.setVisible = function(index, visible) {
        if (!this.enabledInHierarchy) return;
        this._assembler.setVisible(this, index, visible);
      };
      TextMeshPro.prototype.getColorExtraVertices = function(index) {
        if (!this.enabledInHierarchy) return null;
        return this._assembler.getColorExtraVertices(index);
      };
      TextMeshPro.prototype.setColorExtraVertices = function(index, data) {
        if (!this.enabledInHierarchy) return;
        this._assembler.setColorExtraVertices(index, data);
      };
      TextMeshPro.prototype.getPosVertices = function(index) {
        if (!this.enabledInHierarchy) return null;
        return this._assembler.getPosVertices(index);
      };
      TextMeshPro.prototype.setPosVertices = function(index, data) {
        if (!this.enabledInHierarchy) return;
        this._assembler.setPosVertices(index, data);
        this._worldVertsDirty = true;
      };
      __decorate([ property ], TextMeshPro.prototype, "_string", void 0);
      __decorate([ property({
        multiline: true
      }) ], TextMeshPro.prototype, "string", null);
      __decorate([ property(cc.JsonAsset) ], TextMeshPro.prototype, "_font", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.JsonAsset
      }) ], TextMeshPro.prototype, "font", null);
      __decorate([ property({
        type: cc.Label.HorizontalAlign
      }) ], TextMeshPro.prototype, "_horizontalAlign", void 0);
      __decorate([ property({
        type: cc.Label.HorizontalAlign
      }) ], TextMeshPro.prototype, "horizontalAlign", null);
      __decorate([ property({
        type: cc.Label.VerticalAlign
      }) ], TextMeshPro.prototype, "_verticalAlign", void 0);
      __decorate([ property({
        type: cc.Label.VerticalAlign
      }) ], TextMeshPro.prototype, "verticalAlign", null);
      __decorate([ property ], TextMeshPro.prototype, "_actualFontSize", void 0);
      __decorate([ property({
        visible: function() {
          return this._overflow === TmpOverflow.SHRINK;
        }
      }) ], TextMeshPro.prototype, "actualFontSize", null);
      __decorate([ property ], TextMeshPro.prototype, "bmfontOriginalSize", null);
      __decorate([ property ], TextMeshPro.prototype, "_fontSize", void 0);
      __decorate([ property({
        range: [ 0, 1024 ]
      }) ], TextMeshPro.prototype, "fontSize", null);
      __decorate([ property ], TextMeshPro.prototype, "_lineHeight", void 0);
      __decorate([ property ], TextMeshPro.prototype, "lineHeight", null);
      __decorate([ property ], TextMeshPro.prototype, "_spacingX", void 0);
      __decorate([ property ], TextMeshPro.prototype, "spacingX", null);
      __decorate([ property({
        type: cc.Enum(TmpOverflow)
      }) ], TextMeshPro.prototype, "_overflow", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Enum(TmpOverflow)
      }) ], TextMeshPro.prototype, "overflow", null);
      __decorate([ property ], TextMeshPro.prototype, "_enableWrapText", void 0);
      __decorate([ property({
        tooltip: false,
        visible: function() {
          return this._overflow === TmpOverflow.CLAMP || this._overflow === TmpOverflow.ELLIPSIS;
        }
      }) ], TextMeshPro.prototype, "enableWrapText", null);
      __decorate([ property ], TextMeshPro.prototype, "_enableItalic", void 0);
      __decorate([ property({
        tooltip: false
      }) ], TextMeshPro.prototype, "enableItalic", null);
      __decorate([ property ], TextMeshPro.prototype, "_enableUnderline", void 0);
      __decorate([ property({
        tooltip: false
      }) ], TextMeshPro.prototype, "enableUnderline", null);
      __decorate([ property ], TextMeshPro.prototype, "_underlineOffset", void 0);
      __decorate([ property({
        tooltip: false,
        visible: function() {
          return this._enableUnderline;
        }
      }) ], TextMeshPro.prototype, "underlineOffset", null);
      __decorate([ property ], TextMeshPro.prototype, "_enableStrikethrough", void 0);
      __decorate([ property({
        tooltip: false
      }) ], TextMeshPro.prototype, "enableStrikethrough", null);
      __decorate([ property ], TextMeshPro.prototype, "_strikethroughOffset", void 0);
      __decorate([ property({
        tooltip: false,
        visible: function() {
          return this._enableStrikethrough;
        }
      }) ], TextMeshPro.prototype, "strikethroughOffset", null);
      __decorate([ property ], TextMeshPro.prototype, "_colorGradient", void 0);
      __decorate([ property({
        tooltip: false
      }) ], TextMeshPro.prototype, "colorGradient", null);
      __decorate([ property(cc.Color) ], TextMeshPro.prototype, "_colorLB", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Color,
        visible: function() {
          return this._colorGradient;
        }
      }) ], TextMeshPro.prototype, "colorLB", null);
      __decorate([ property(cc.Color) ], TextMeshPro.prototype, "_colorRB", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Color,
        visible: function() {
          return this._colorGradient;
        }
      }) ], TextMeshPro.prototype, "colorRB", null);
      __decorate([ property(cc.Color) ], TextMeshPro.prototype, "_colorLT", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Color,
        visible: function() {
          return this._colorGradient;
        }
      }) ], TextMeshPro.prototype, "colorLT", null);
      __decorate([ property(cc.Color) ], TextMeshPro.prototype, "_colorRT", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Color,
        visible: function() {
          return this._colorGradient;
        }
      }) ], TextMeshPro.prototype, "colorRT", null);
      __decorate([ property({
        tooltip: false,
        type: TmpUniform
      }) ], TextMeshPro.prototype, "tmpUniform", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Texture2D,
        readonly: true
      }) ], TextMeshPro.prototype, "textures", void 0);
      TextMeshPro = __decorate([ ccclass, executeInEditMode, menu("TextMeshPro\u7ec4\u4ef6/TextMeshPro") ], TextMeshPro);
      return TextMeshPro;
    }(cc.RenderComponent);
    exports.default = TextMeshPro;
    cc["Assembler"].register(TextMeshPro, {
      getConstructor: function(comp) {
        return TmpAssembler_1.default;
      }
    });
    cc._RF.pop();
  }, {
    "./utils/TmpAssembler": "TmpAssembler",
    "./utils/TmpFontConfig": "TmpFontConfig",
    "./utils/TmpUtils": "TmpUtils"
  } ],
  Thunder_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f0402G4imBEBK5YeBSKTkyP", "Thunder_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Smoke: cc.Prefab,
        Particle: cc.Prefab
      },
      Shake: function Shake() {
        this.Hero_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
        var Particle = cc.instantiate(this.Smoke);
        Particle.parent = this.Hero_Bullet_Common.Battle_Controller.Particle_Parent;
        Particle.setPosition(this.node.x, -924.061);
        var Particle = cc.instantiate(this.Particle);
        Particle.parent = this.Hero_Bullet_Common.Battle_Controller.Particle_Parent;
        Particle.setPosition(this.node.x, -924.061);
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Thunder_Red: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6ab80w5sQtC9a75lfWWmjz7", "Thunder_Red");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Attack: 0,
        Jing_Jie: 0,
        Battle_Controller: cc.Node,
        Bullet_Prefab: cc.Prefab
      },
      Thunder: function Thunder() {
        var Bullet = cc.instantiate(this.Bullet_Prefab);
        Bullet.parent = this.Battle_Controller.Enemy_Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y;
        var Bullet_Common_Script = Bullet.getComponent("Enemy_Bullet_Common");
        Bullet_Common_Script.Attack = this.Attack;
        Bullet_Common_Script.Jing_Jie = this.Jing_Jie;
        Bullet_Common_Script.Battle_Controller = this.Battle_Controller;
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Title_Click_Area: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a28a8lVr41ID5F3nmzQvcxf", "Title_Click_Area");
    "use strict";
    var Main_Controller = require("Main_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Main_Controller: Main_Controller,
        Title_Animation: cc.Animation,
        Title_Tips_Animation: cc.Animation,
        Title_Tips: cc.Node,
        Main_UI_Animation: cc.Animation
      },
      start: function start() {
        if (0 == From_Where_To_Main) this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          var _this = this;
          this.Title_Animation.play("Title_Out_Animation");
          this.Title_Tips_Animation.pause("Title_Tips");
          cc.tween(this.Title_Tips).to(.3, {
            opacity: 0
          }).delay(.3).call(function() {
            _this.Main_UI_Animation.node.active = true;
            _this.Main_UI_Animation.play();
          }).start();
          this.Main_Controller.Main_Stage = 2;
          From_Where_To_Main = 1;
          this.node.active = false;
        }, this); else {
          this.Main_UI_Animation.node.active = true;
          this.Main_UI_Animation.play();
          this.Main_Controller.Main_Stage = 2;
          this.Title_Animation.node.active = false;
        }
      }
    });
    cc._RF.pop();
  }, {
    Main_Controller: "Main_Controller"
  } ],
  TmpAssembler: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9193fC84H5POoNKD9ArVsQ0", "TmpAssembler");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TextMeshPro_1 = require("../TextMeshPro");
    var gfx = cc["gfx"];
    var vfmt = new gfx.VertexFormat([ {
      name: gfx.ATTR_POSITION,
      type: gfx.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: gfx.ATTR_UV0,
      type: gfx.ATTR_TYPE_FLOAT32,
      num: 2
    }, {
      name: gfx.ATTR_COLOR,
      type: gfx.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }, {
      name: "a_color_extra",
      type: gfx.ATTR_TYPE_UINT8,
      num: 4,
      normalize: true
    }, {
      name: "a_texture_idx",
      type: gfx.ATTR_TYPE_FLOAT32,
      num: 1
    } ]);
    var WHITE = cc.Color.WHITE;
    var ITALIC_REDIANS = cc.misc.degreesToRadians(15);
    var UNDERLINE_CODE = 95;
    var ELLIPSIS_CODE = 46;
    var ELLIPSIS_CHAR = ".";
    var ELLIPSIS_NUM = 3;
    var shareLabelInfo = {
      fontAtlas: null,
      fontSize: 0,
      lineHeight: 0,
      hAlign: 0,
      vAlign: 0,
      hash: "",
      margin: 0
    };
    var _comp = null;
    var _tmpUvRect = cc.rect();
    var _tmpPosRect = cc.rect();
    var _horizontalKernings = [];
    var _linesWidth = [];
    var _linesOffsetX = [];
    var _fntConfig = null;
    var _numberOfLines = 0;
    var _textDesiredHeight = 0;
    var _letterOffsetY = 0;
    var _tailoredTopY = 0;
    var _tailoredBottomY = 0;
    var _bmfontScale = 1;
    var _lineBreakWithoutSpaces = false;
    var _lineSpacing = 0;
    var _contentSize = cc.size(0, 0);
    var _string = "";
    var _fontSize = 0;
    var _originFontSize = 0;
    var _hAlign = 0;
    var _vAlign = 0;
    var _spacingX = 0;
    var _lineHeight = 0;
    var _overflow = 0;
    var _isWrapText = false;
    var _labelWidth = 0;
    var _labelHeight = 0;
    var _maxLineWidth = 0;
    var _dataOffset = 0;
    var _italicVec = cc.v2();
    var _extraLinesData = {};
    var _extraLineDef = null;
    var _ellipsisDef = null;
    var _ellipsisWidth = 0;
    var LetterInfo = function() {
      function LetterInfo() {
        this.valid = true;
        this.char = "";
        this.x = 0;
        this.y = 0;
        this.line = 0;
        this.hash = "";
        this.quadsIndex = 0;
        this.visible = true;
      }
      return LetterInfo;
    }();
    var TmpAssembler = function(_super) {
      __extends(TmpAssembler, _super);
      function TmpAssembler() {
        var _this = _super.call(this) || this;
        _this.floatsPerVert = 7;
        _this.verticesCount = 4;
        _this.indicesCount = 6;
        _this.uvOffset = 2;
        _this.colorOffset = 4;
        _this.colorExtraOffset = 5;
        _this.textureIdxOffset = 6;
        _this._renderData = null;
        _this._local = [];
        _this._lettersInfo = [];
        _this._renderData = new cc["RenderData"]();
        _this._renderData.init(_this);
        _this.initData();
        _this.initLocal();
        return _this;
      }
      Object.defineProperty(TmpAssembler.prototype, "verticesFloats", {
        get: function() {
          return this.verticesCount * this.floatsPerVert;
        },
        enumerable: false,
        configurable: true
      });
      TmpAssembler.prototype.initData = function() {
        var data = this._renderData;
        data.createFlexData(0, this.verticesCount, this.indicesCount, this.getVfmt());
        var indices = data.iDatas[0];
        var count = indices.length / 6;
        for (var i = 0, idx = 0; i < count; i++) {
          var vertextID = 4 * i;
          indices[idx++] = vertextID;
          indices[idx++] = vertextID + 1;
          indices[idx++] = vertextID + 2;
          indices[idx++] = vertextID + 1;
          indices[idx++] = vertextID + 3;
          indices[idx++] = vertextID + 2;
        }
      };
      TmpAssembler.prototype.initLocal = function() {
        this._local = [];
        this._local.length = 4;
      };
      TmpAssembler.prototype.getBuffer = function(v) {
        return cc.renderer["_handle"].getBuffer("mesh", this.getVfmt());
      };
      TmpAssembler.prototype.getVfmt = function() {
        return vfmt;
      };
      TmpAssembler.prototype.fillBuffers = function(comp, renderer) {
        renderer.worldMatDirty && this.updateWorldVerts(comp);
        var renderData = this._renderData;
        var vData = renderData.vDatas[0];
        var iData = renderData.iDatas[0];
        var buffer = this.getBuffer(renderer);
        var offsetInfo = buffer.request(this.verticesCount, this.indicesCount);
        var vertexOffset = offsetInfo.byteOffset >> 2, vbuf = buffer._vData;
        vData.length + vertexOffset > vbuf.length ? vbuf.set(vData.subarray(0, vbuf.length - vertexOffset), vertexOffset) : vbuf.set(vData, vertexOffset);
        var ibuf = buffer._iData, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
        for (var i = 0, l = iData.length; i < l; i++) ibuf[indiceOffset++] = vertexId + iData[i];
      };
      TmpAssembler.prototype.updateRenderData = function(comp) {
        if (!comp["_vertsDirty"]) return;
        if (_comp === comp) return;
        if (!comp.fontConfig) return;
        _comp = comp;
        this._lettersInfo.length = 0;
        this._updateProperties(comp);
        this._updateContent();
        this.updateWorldVerts(comp);
        _comp["_actualFontSize"] = _fontSize;
        _comp.node.setContentSize(_contentSize);
        _comp["_vertsDirty"] = false;
        _comp = null;
        this._resetProperties();
      };
      TmpAssembler.prototype._updateProperties = function(comp) {
        _fntConfig = comp.fontConfig;
        _string = comp.string.toString();
        _fontSize = comp.fontSize;
        _originFontSize = _fntConfig ? _fntConfig.json.size : comp.fontSize;
        _bmfontScale = _fontSize / _originFontSize;
        _hAlign = comp.horizontalAlign;
        _vAlign = comp.verticalAlign;
        _spacingX = comp.spacingX;
        _overflow = comp.overflow;
        _lineHeight = comp.lineHeight;
        _contentSize.width = comp.node.width;
        _contentSize.height = comp.node.height;
        shareLabelInfo.fontAtlas = comp.fontConfig;
        shareLabelInfo.lineHeight = _lineHeight;
        shareLabelInfo.fontSize = _fontSize;
        shareLabelInfo.hash = "";
        shareLabelInfo.margin = 0;
        if (_overflow === TextMeshPro_1.TmpOverflow.NONE) {
          _isWrapText = false;
          _contentSize.width += 2 * shareLabelInfo.margin;
          _contentSize.height += 2 * shareLabelInfo.margin;
        } else if (_overflow === TextMeshPro_1.TmpOverflow.RESIZE_HEIGHT) {
          _isWrapText = true;
          _contentSize.height += 2 * shareLabelInfo.margin;
        } else _isWrapText = _overflow !== TextMeshPro_1.TmpOverflow.SHRINK && comp.enableWrapText;
        this._setupBMFontOverflowMetrics();
        if (comp.enableItalic) {
          _italicVec.x = 0;
          _italicVec.y = _contentSize.height / 2;
          _italicVec.rotateSelf(ITALIC_REDIANS);
          _contentSize.width += 2 * Math.abs(_italicVec.x);
          _contentSize.height -= 2 * Math.abs(_contentSize.height / 2 - _italicVec.y);
        }
        if (comp.enableUnderline || comp.enableStrikethrough) {
          _extraLineDef = shareLabelInfo.fontAtlas.getLetter(UNDERLINE_CODE + shareLabelInfo.hash);
          _extraLineDef || cc.log("Can't find letter definition in textures. letter: _");
        }
        if (comp.overflow === TextMeshPro_1.TmpOverflow.ELLIPSIS) {
          _ellipsisDef = shareLabelInfo.fontAtlas.getLetter(ELLIPSIS_CODE + shareLabelInfo.hash);
          if (_ellipsisDef) _ellipsisWidth = (_ellipsisDef.xAdvance * _bmfontScale + _spacingX) * ELLIPSIS_NUM; else {
            _ellipsisWidth = 0;
            cc.log("Can't find letter definition in textures. letter: " + ELLIPSIS_CHAR);
          }
        }
      };
      TmpAssembler.prototype._resetProperties = function() {
        _fntConfig = null;
        shareLabelInfo.hash = "";
        shareLabelInfo.margin = 0;
      };
      TmpAssembler.prototype._updateContent = function() {
        this._computeHorizontalKerningForText();
        this._alignText();
      };
      TmpAssembler.prototype._computeHorizontalKerningForText = function() {
        var string = _string;
        var stringLen = string.length;
        var horizontalKernings = _horizontalKernings;
        var kerningDict;
        horizontalKernings.length = 0;
      };
      TmpAssembler.prototype._alignText = function() {
        _textDesiredHeight = 0;
        _linesWidth.length = 0;
        _extraLinesData = {};
        _lineBreakWithoutSpaces ? this._multilineTextWrapByChar() : this._multilineTextWrapByWord();
        if (_overflow === TextMeshPro_1.TmpOverflow.SHRINK && _fontSize > 0) {
          var scaleHeight = _bmfontScale;
          var scaleWidth = _bmfontScale;
          var needReset = false;
          if (_textDesiredHeight > _contentSize.height) {
            scaleHeight = _contentSize.height / _textDesiredHeight * _bmfontScale;
            needReset = true;
          }
          var maxWidth_1 = 0;
          _linesWidth.forEach(function(v) {
            v > maxWidth_1 && (maxWidth_1 = v);
          });
          if (maxWidth_1 > _contentSize.width) {
            scaleWidth = _contentSize.width / maxWidth_1 * _bmfontScale;
            needReset = true;
          }
          _bmfontScale = Math.min(scaleHeight, scaleWidth);
          if (needReset) {
            _fontSize = _bmfontScale * _originFontSize;
            _textDesiredHeight = 0;
            _linesWidth.length = 0;
            _extraLinesData = {};
            _lineBreakWithoutSpaces ? this._multilineTextWrapByChar() : this._multilineTextWrapByWord();
          }
        }
        this._computeAlignmentOffset();
        this._reserveQuads(_comp, this._lettersInfo.length);
        this._updateQuads();
      };
      TmpAssembler.prototype._multilineTextWrapByWord = function() {
        return this._multilineTextWrap(this._getFirstWordLen);
      };
      TmpAssembler.prototype._multilineTextWrapByChar = function() {
        return this._multilineTextWrap(this._getFirstCharLen);
      };
      TmpAssembler.prototype._multilineTextWrap = function(nextTokenFunc) {
        var ellipsisMaxLines = 0;
        var useEllipsis = false;
        _overflow === TextMeshPro_1.TmpOverflow.ELLIPSIS && _ellipsisDef && (ellipsisMaxLines = Math.max(1, Math.floor(_contentSize.height / _lineHeight)));
        var textLen = _string.length;
        var lineIndex = 0;
        var nextTokenX = 0;
        var nextTokenY = 0;
        var longestLine = 0;
        var letterRight = 0;
        var highestY = 0;
        var lowestY = 0;
        var letterDef = null;
        var letterPosition = cc.v2(0, 0);
        for (var index = 0; index < textLen; ) {
          var character = _string.charAt(index);
          if ("\n" === character) {
            if (_overflow === TextMeshPro_1.TmpOverflow.ELLIPSIS && _ellipsisDef && lineIndex + 1 >= ellipsisMaxLines) {
              this._recordEllipsis(nextTokenY, letterPosition, lineIndex);
              useEllipsis = true;
              var ellipsisInfo = this._lettersInfo[this._lettersInfo.length - 1];
              letterRight = ellipsisInfo.x + (_ellipsisDef.xAdvance - _ellipsisDef.offsetX) * _bmfontScale + _spacingX - 2 * shareLabelInfo.margin;
              break;
            }
            _linesWidth.push(letterRight);
            letterRight = 0;
            lineIndex++;
            nextTokenX = 0;
            nextTokenY -= _lineHeight * this._getFontScale() + _lineSpacing;
            this._recordPlaceholderInfo(index, character);
            index++;
            continue;
          }
          var tokenLen = nextTokenFunc(_string, index, textLen);
          var tokenHighestY = highestY;
          var tokenLowestY = lowestY;
          var tokenRight = letterRight;
          var nextLetterX = nextTokenX;
          var newLine = false;
          for (var tmp = 0; tmp < tokenLen; ++tmp) {
            var letterIndex = index + tmp;
            character = _string.charAt(letterIndex);
            if ("\r" === character) {
              this._recordPlaceholderInfo(letterIndex, character);
              continue;
            }
            letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character);
            if (!letterDef) {
              this._recordPlaceholderInfo(letterIndex, character);
              cc.log("Can't find letter definition in textures. letter: " + character);
              continue;
            }
            var letterX = nextLetterX + letterDef.offsetX * _bmfontScale - shareLabelInfo.margin;
            if (_comp.enableItalic) {
              _italicVec.x = 0;
              _italicVec.y = letterDef.h * _bmfontScale / 2;
              _italicVec.rotateSelf(ITALIC_REDIANS);
              letterX += Math.abs(_italicVec.x);
            }
            if (_overflow === TextMeshPro_1.TmpOverflow.ELLIPSIS && _ellipsisDef && letterX + (letterDef.xAdvance - letterDef.offsetX) * _bmfontScale > _maxLineWidth && (!_isWrapText || lineIndex + 1 >= ellipsisMaxLines)) {
              this._recordEllipsis(nextTokenY, letterPosition, lineIndex);
              useEllipsis = true;
              var ellipsisInfo = this._lettersInfo[this._lettersInfo.length - 1];
              letterRight = ellipsisInfo.x + (_ellipsisDef.xAdvance - _ellipsisDef.offsetX) * _bmfontScale + _spacingX - 2 * shareLabelInfo.margin;
              break;
            }
            if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + (letterDef.xAdvance - letterDef.offsetX) * _bmfontScale > _maxLineWidth && !cc["textUtils"].isUnicodeSpace(character)) {
              _linesWidth.push(letterRight);
              letterRight = 0;
              lineIndex++;
              nextTokenX = 0;
              nextTokenY -= _lineHeight * this._getFontScale() + _lineSpacing;
              newLine = true;
              break;
            }
            letterPosition.x = letterX;
            letterPosition.y = nextTokenY - letterDef.offsetY * _bmfontScale + shareLabelInfo.margin;
            this._recordLetterInfo(letterPosition, character, letterIndex, lineIndex);
            letterIndex + 1 < _horizontalKernings.length && letterIndex < textLen - 1 && (nextLetterX += _horizontalKernings[letterIndex + 1]);
            nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX - 2 * shareLabelInfo.margin;
            tokenRight = nextLetterX;
            if (_comp.enableItalic) {
              _italicVec.x = 0;
              _italicVec.y = letterDef.h * _bmfontScale / 2;
              _italicVec.rotateSelf(ITALIC_REDIANS);
              tokenRight += Math.abs(_italicVec.x);
            }
            tokenHighestY < letterPosition.y && (tokenHighestY = letterPosition.y);
            tokenLowestY > letterPosition.y - letterDef.h * _bmfontScale && (tokenLowestY = letterPosition.y - letterDef.h * _bmfontScale);
          }
          if (useEllipsis) break;
          if (newLine) continue;
          nextTokenX = nextLetterX;
          letterRight = tokenRight;
          highestY < tokenHighestY && (highestY = tokenHighestY);
          lowestY > tokenLowestY && (lowestY = tokenLowestY);
          longestLine < letterRight && (longestLine = letterRight);
          index += tokenLen;
        }
        _linesWidth.push(letterRight);
        _numberOfLines = lineIndex + 1;
        _textDesiredHeight = _numberOfLines * _lineHeight * this._getFontScale();
        _numberOfLines > 1 && (_textDesiredHeight += (_numberOfLines - 1) * _lineSpacing);
        _contentSize.width = _labelWidth;
        _contentSize.height = _labelHeight;
        _labelWidth <= 0 && (_contentSize.width = parseFloat(longestLine.toFixed(2)) + 2 * shareLabelInfo.margin);
        _labelHeight <= 0 && (_contentSize.height = parseFloat(_textDesiredHeight.toFixed(2)) + 2 * shareLabelInfo.margin);
        _tailoredTopY = _contentSize.height;
        _tailoredBottomY = 0;
        if (_overflow !== TextMeshPro_1.TmpOverflow.CLAMP) {
          highestY > 0 && (_tailoredTopY = _contentSize.height + highestY);
          lowestY < -_textDesiredHeight && (_tailoredBottomY = _textDesiredHeight + lowestY);
        }
        _comp["_richTextDeltaX"] = nextTokenX - letterRight;
        return true;
      };
      TmpAssembler.prototype._getFirstCharLen = function() {
        return 1;
      };
      TmpAssembler.prototype._getFontScale = function() {
        return _overflow === TextMeshPro_1.TmpOverflow.SHRINK ? _bmfontScale : 1;
      };
      TmpAssembler.prototype._getFirstWordLen = function(text, startIndex, textLen) {
        var character = text.charAt(startIndex);
        if (cc["textUtils"].isUnicodeCJK(character) || "\n" === character || cc["textUtils"].isUnicodeSpace(character)) return 1;
        var len = 1;
        var letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character);
        if (!letterDef) return len;
        var nextLetterX = letterDef.xAdvance * _bmfontScale + _spacingX;
        var letterX;
        for (var index = startIndex + 1; index < textLen; ++index) {
          character = text.charAt(index);
          letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character);
          if (!letterDef) break;
          letterX = nextLetterX + letterDef.offsetX * _bmfontScale;
          if (letterX + (letterDef.xAdvance - letterDef.offsetX) * _bmfontScale > _maxLineWidth && !cc["textUtils"].isUnicodeSpace(character) && _maxLineWidth > 0) return len;
          nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;
          if ("\n" === character || cc["textUtils"].isUnicodeSpace(character) || cc["textUtils"].isUnicodeCJK(character)) break;
          len++;
        }
        return len;
      };
      TmpAssembler.prototype._recordEllipsis = function(nextTokenY, letterPosition, lineIndex) {
        var nextX = 0;
        var lastIndex = this._lettersInfo.length - 1;
        while (lastIndex >= 0) {
          var lastInfo = this._lettersInfo[lastIndex];
          var lastDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(lastInfo.char);
          var lastW = lastDef ? lastDef.w : 0;
          var lastXAdvance = lastDef ? lastDef.xAdvance : 0;
          var lastOffsetX = lastDef ? lastDef.offsetX : 0;
          var lastRightX = lastInfo.x + lastW * _bmfontScale - shareLabelInfo.margin;
          nextX = lastInfo.x + (lastXAdvance - lastOffsetX) * _bmfontScale + _spacingX - 2 * shareLabelInfo.margin;
          if (_maxLineWidth >= lastRightX + _ellipsisWidth) break;
          lastIndex--;
          this._lettersInfo.pop();
        }
        lastIndex < 0 && (nextX = 0);
        letterPosition.y = nextTokenY - _ellipsisDef.offsetY * _bmfontScale + shareLabelInfo.margin;
        for (var i = 1; i <= ELLIPSIS_NUM; i++) {
          letterPosition.x = nextX + _ellipsisDef.offsetX * _bmfontScale - shareLabelInfo.margin;
          this._recordLetterInfo(letterPosition, ELLIPSIS_CHAR, lastIndex + i, lineIndex);
          nextX += _ellipsisDef.xAdvance * _bmfontScale + _spacingX - 2 * shareLabelInfo.margin;
        }
      };
      TmpAssembler.prototype._recordPlaceholderInfo = function(letterIndex, char) {
        if (letterIndex >= this._lettersInfo.length) {
          var tmpInfo = new LetterInfo();
          this._lettersInfo.push(tmpInfo);
        }
        this._lettersInfo[letterIndex].char = char;
        this._lettersInfo[letterIndex].hash = char.charCodeAt(0) + shareLabelInfo.hash;
        this._lettersInfo[letterIndex].valid = false;
      };
      TmpAssembler.prototype._recordLetterInfo = function(letterPosition, character, letterIndex, lineIndex) {
        if (letterIndex >= this._lettersInfo.length) {
          var tmpInfo = new LetterInfo();
          this._lettersInfo.push(tmpInfo);
        }
        var char = character.charCodeAt(0);
        var key = char + shareLabelInfo.hash;
        this._lettersInfo[letterIndex].line = lineIndex;
        this._lettersInfo[letterIndex].char = character;
        this._lettersInfo[letterIndex].hash = key;
        this._lettersInfo[letterIndex].valid = shareLabelInfo.fontAtlas.getLetter(key).valid;
        this._lettersInfo[letterIndex].x = letterPosition.x;
        this._lettersInfo[letterIndex].y = letterPosition.y;
      };
      TmpAssembler.prototype._computeAlignmentOffset = function() {
        _linesOffsetX.length = 0;
        switch (_hAlign) {
         case cc.Label.HorizontalAlign.LEFT:
          for (var i = 0; i < _numberOfLines; ++i) _linesOffsetX.push(0);
          break;

         case cc.Label.HorizontalAlign.CENTER:
          for (var i = 0, l = _linesWidth.length; i < l; i++) _linesOffsetX.push((_contentSize.width - _linesWidth[i]) / 2);
          break;

         case cc.Label.HorizontalAlign.RIGHT:
          for (var i = 0, l = _linesWidth.length; i < l; i++) _linesOffsetX.push(_contentSize.width - _linesWidth[i]);
        }
        _letterOffsetY = _contentSize.height;
        if (_vAlign !== cc.Label.VerticalAlign.TOP) {
          var blank = _contentSize.height - _textDesiredHeight + _lineHeight * this._getFontScale() - _originFontSize * _bmfontScale;
          _vAlign === cc.Label.VerticalAlign.BOTTOM ? _letterOffsetY -= blank : _letterOffsetY -= blank / 2;
        }
      };
      TmpAssembler.prototype._setupBMFontOverflowMetrics = function() {
        var newWidth = _contentSize.width;
        var newHeight = _contentSize.height;
        _overflow === TextMeshPro_1.TmpOverflow.RESIZE_HEIGHT && (newHeight = 0);
        if (_overflow === TextMeshPro_1.TmpOverflow.NONE) {
          newWidth = 0;
          newHeight = 0;
        }
        _labelWidth = newWidth;
        _labelHeight = newHeight;
        _maxLineWidth = newWidth;
      };
      TmpAssembler.prototype._updateQuads = function() {
        var node = _comp.node;
        this.verticesCount = this.indicesCount = 0;
        this._renderData && (this._renderData.dataLength = 0);
        var contentSize = _contentSize, appx = node["_anchorPoint"].x * contentSize.width, appy = node["_anchorPoint"].y * contentSize.height;
        var quadsIndex = 0;
        for (var i = 0, l = this._lettersInfo.length; i < l; ++i) {
          var letterInfo = this._lettersInfo[i];
          if (!letterInfo) break;
          if (!letterInfo.valid) continue;
          letterInfo.quadsIndex = quadsIndex;
          var letterDef = shareLabelInfo.fontAtlas.getLetter(letterInfo.hash);
          _tmpUvRect.height = letterDef.h;
          _tmpUvRect.width = letterDef.w;
          _tmpUvRect.x = letterDef.u;
          _tmpUvRect.y = letterDef.v;
          var py = letterInfo.y + _letterOffsetY;
          if (_labelHeight > 0 && _overflow === TextMeshPro_1.TmpOverflow.CLAMP) {
            if (py > _tailoredTopY) {
              var clipTop = py - _tailoredTopY;
              _tmpUvRect.y += clipTop / _bmfontScale;
              _tmpUvRect.height -= clipTop / _bmfontScale;
              py -= clipTop;
            }
            py - _tmpUvRect.height * _bmfontScale < _tailoredBottomY && (_tmpUvRect.height = py < _tailoredBottomY ? 0 : (py - _tailoredBottomY) / _bmfontScale);
          }
          var px = letterInfo.x + _linesOffsetX[letterInfo.line];
          if (_labelWidth > 0 && _overflow === TextMeshPro_1.TmpOverflow.CLAMP) {
            if (px < 0) {
              _tmpUvRect.x += -px / _bmfontScale;
              _tmpUvRect.width -= -px / _bmfontScale;
              px = 0;
            }
            if (px + _tmpUvRect.width * _bmfontScale > _contentSize.width) {
              var clipRight = px + _tmpUvRect.width * _bmfontScale - _contentSize.width;
              _tmpUvRect.width -= clipRight / _bmfontScale;
            }
          }
          if (_tmpUvRect.height > 0 && _tmpUvRect.width > 0) {
            _tmpPosRect.x = px - appx;
            _tmpPosRect.y = py - appy;
            _tmpPosRect.width = _tmpUvRect.width * _bmfontScale;
            _tmpPosRect.height = _tmpUvRect.height * _bmfontScale;
            this.appendQuad(letterDef.textureId, _tmpUvRect, _tmpPosRect);
            quadsIndex++;
            if (_extraLineDef && (_comp.enableUnderline || _comp.enableStrikethrough) && !cc["textUtils"].isUnicodeSpace(letterInfo.char)) {
              var lineData = _extraLinesData[letterInfo.line];
              lineData ? lineData.last < i && (lineData.last = i) : _extraLinesData[letterInfo.line] = {
                lineIndex: letterInfo.line,
                first: i,
                last: i
              };
            }
          }
        }
        if (_extraLineDef) {
          _comp.enableUnderline && this._updateLineQuads(appx, appy, -_fontSize + _comp.underlineOffset * _bmfontScale);
          _comp.enableStrikethrough && this._updateLineQuads(appx, appy, -_fontSize / 2 + _comp.strikethroughOffset * _bmfontScale);
        }
        this.updateColorExtra(_comp);
        this._quadsUpdated();
      };
      TmpAssembler.prototype._updateLineQuads = function(appx, appy, offsetY) {
        for (var key in _extraLinesData) {
          var underlineInfo = _extraLinesData[key];
          var lineIdx = underlineInfo.lineIndex;
          var first = underlineInfo.first;
          var last = underlineInfo.last > 0 ? underlineInfo.last : first;
          var firstInfo = this._lettersInfo[first];
          if (!firstInfo.valid) continue;
          var lastInfo = this._lettersInfo[last];
          var firstDef = shareLabelInfo.fontAtlas.getLetter(firstInfo.hash);
          var lastDef = shareLabelInfo.fontAtlas.getLetter(lastInfo.hash);
          var maxWidth = lastInfo.x + lastDef.w * _bmfontScale - firstInfo.x;
          var wLeft = maxWidth >= _extraLineDef.w * _bmfontScale ? _extraLineDef.w * _bmfontScale / 3 : maxWidth / 2;
          var wRight = wLeft;
          var wMid = maxWidth - wLeft - wRight;
          var leftX = firstInfo.x + _linesOffsetX[lineIdx];
          var rightX = leftX + wLeft + wMid;
          var midX = leftX + wLeft;
          _tmpUvRect.height = _extraLineDef.h;
          _tmpUvRect.width = wLeft / _bmfontScale;
          _tmpUvRect.x = _extraLineDef.u;
          _tmpUvRect.y = _extraLineDef.v;
          var py = firstInfo.y + _letterOffsetY + firstDef.offsetY * _bmfontScale + offsetY;
          if (_labelHeight > 0) {
            if (py > _tailoredTopY) {
              var clipTop = py - _tailoredTopY;
              _tmpUvRect.y += clipTop;
              _tmpUvRect.height -= clipTop;
              py -= clipTop;
            }
            py - _extraLineDef.h * _bmfontScale < _tailoredBottomY && _overflow === TextMeshPro_1.TmpOverflow.CLAMP && (_tmpUvRect.height = py < _tailoredBottomY ? 0 : (py - _tailoredBottomY) / _bmfontScale);
          }
          if (_tmpUvRect.height > 0 && _tmpUvRect.width > 0) {
            _tmpPosRect.x = leftX - appx;
            _tmpPosRect.y = py - appy;
            _tmpPosRect.width = wLeft;
            _tmpPosRect.height = _tmpUvRect.height * _bmfontScale;
            this.appendQuad(_extraLineDef.textureId, _tmpUvRect, _tmpPosRect);
          }
          _tmpUvRect.width = wRight / _bmfontScale;
          _tmpUvRect.x = _extraLineDef.u + _extraLineDef.w - _tmpUvRect.width;
          if (_tmpUvRect.height > 0 && _tmpUvRect.width > 0) {
            _tmpPosRect.x = rightX - appx;
            _tmpPosRect.y = py - appy;
            _tmpPosRect.width = wRight;
            _tmpPosRect.height = _tmpUvRect.height * _bmfontScale;
            this.appendQuad(_extraLineDef.textureId, _tmpUvRect, _tmpPosRect);
          }
          if (wMid > 0) {
            _tmpUvRect.width = _extraLineDef.w - 2 * wLeft / _bmfontScale;
            _tmpUvRect.x = _extraLineDef.u + _tmpUvRect.width;
            if (_tmpUvRect.height > 0 && _tmpUvRect.width > 0) {
              _tmpPosRect.x = midX - appx;
              _tmpPosRect.y = py - appy;
              _tmpPosRect.width = wMid;
              _tmpPosRect.height = _tmpUvRect.height * _bmfontScale;
              this.appendQuad(_extraLineDef.textureId, _tmpUvRect, _tmpPosRect);
            }
          }
        }
      };
      TmpAssembler.prototype._reserveQuads = function(comp, count) {
        var extra = 0;
        comp.enableUnderline && extra++;
        comp.enableStrikethrough && extra++;
        count += extra * _numberOfLines * 3;
        var verticesCount = 4 * count;
        var indicesCount = 6 * count;
        var flexBuffer = this._renderData._flexBuffer;
        flexBuffer.reserve(verticesCount, indicesCount);
        flexBuffer.used(verticesCount, indicesCount);
        var iData = this._renderData.iDatas[0];
        for (var i = 0, vid = 0, l = indicesCount; i < l; i += 6, vid += 4) {
          iData[i] = vid;
          iData[i + 1] = vid + 1;
          iData[i + 2] = vid + 2;
          iData[i + 3] = vid + 1;
          iData[i + 4] = vid + 3;
          iData[i + 5] = vid + 2;
        }
        _dataOffset = 0;
      };
      TmpAssembler.prototype._quadsUpdated = function() {
        _dataOffset = 0;
        var flexBuffer = this._renderData._flexBuffer;
        flexBuffer.used(this.verticesCount, this.indicesCount);
      };
      TmpAssembler.prototype.appendQuad = function(textureId, uvRect, posRect) {
        var renderData = this._renderData;
        var verts = renderData.vDatas[0], uintVerts = renderData.uintVDatas[0];
        this.verticesCount += 4;
        this.indicesCount = this.verticesCount / 2 * 3;
        var texture = shareLabelInfo.fontAtlas.getTexture(textureId);
        var texw = texture.width, texh = texture.height, rectWidth = uvRect.width, rectHeight = uvRect.height, color = _comp.node["_color"]._val;
        var l, b, r, t;
        var floatsPerVert = this.floatsPerVert;
        var uvDataOffset = _dataOffset + this.uvOffset;
        l = uvRect.x / texw;
        r = (uvRect.x + rectWidth) / texw;
        b = (uvRect.y + rectHeight) / texh;
        t = uvRect.y / texh;
        verts[uvDataOffset] = l;
        verts[uvDataOffset + 1] = b;
        uvDataOffset += floatsPerVert;
        verts[uvDataOffset] = r;
        verts[uvDataOffset + 1] = b;
        uvDataOffset += floatsPerVert;
        verts[uvDataOffset] = l;
        verts[uvDataOffset + 1] = t;
        uvDataOffset += floatsPerVert;
        verts[uvDataOffset] = r;
        verts[uvDataOffset + 1] = t;
        l = posRect.x;
        r = posRect.x + posRect.width;
        b = posRect.y - posRect.height;
        t = posRect.y;
        this.appendVerts(_comp, _dataOffset, l, r, b, t);
        var colorOffset = _dataOffset + this.colorOffset;
        for (var i = 0; i < 4; i++) {
          uintVerts[colorOffset] = color;
          colorOffset += floatsPerVert;
        }
        var colorExtraOffset = _dataOffset + this.colorExtraOffset;
        for (var i = 0; i < 4; i++) {
          uintVerts[colorExtraOffset] = WHITE["_val"];
          colorExtraOffset += floatsPerVert;
        }
        var idOffset = _dataOffset + this.textureIdxOffset;
        for (var i = 0; i < 4; i++) {
          verts[idOffset] = textureId;
          idOffset += this.floatsPerVert;
        }
        _dataOffset += 4 * this.floatsPerVert;
      };
      TmpAssembler.prototype.appendVerts = function(comp, offset, l, r, b, t) {
        var local = this._local;
        var floatsPerVert = this.floatsPerVert;
        if (comp.enableItalic) {
          _italicVec.x = 0;
          _italicVec.y = (t - b) / 2;
          _italicVec.rotateSelf(ITALIC_REDIANS);
          local[offset] = l - Math.abs(_italicVec.x);
          local[offset + 1] = b + Math.abs((t - b) / 2 - _italicVec.y);
          offset += floatsPerVert;
          local[offset] = r - Math.abs(_italicVec.x);
          local[offset + 1] = b + Math.abs((t - b) / 2 - _italicVec.y);
          offset += floatsPerVert;
          local[offset] = l + Math.abs(_italicVec.x);
          local[offset + 1] = t - Math.abs((t - b) / 2 - _italicVec.y);
          offset += floatsPerVert;
          local[offset] = r + Math.abs(_italicVec.x);
          local[offset + 1] = t - Math.abs((t - b) / 2 - _italicVec.y);
        } else {
          local[offset] = l;
          local[offset + 1] = b;
          offset += floatsPerVert;
          local[offset] = r;
          local[offset + 1] = b;
          offset += floatsPerVert;
          local[offset] = l;
          local[offset + 1] = t;
          offset += floatsPerVert;
          local[offset] = r;
          local[offset + 1] = t;
        }
      };
      TmpAssembler.prototype.updateWorldVerts = function(comp) {
        var node = comp.node;
        var local = this._local;
        var world = this._renderData.vDatas[0];
        var floatsPerVert = this.floatsPerVert;
        var offset, l;
        false;
        var matrix = node["_worldMatrix"];
        var matrixm = matrix.m, a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5], tx = matrixm[12], ty = matrixm[13];
        for (var offset = 0; offset < local.length; offset += floatsPerVert) {
          var x = local[offset];
          var y = local[offset + 1];
          world[offset] = x * a + y * c + tx;
          world[offset + 1] = x * b + y * d + ty;
        }
      };
      TmpAssembler.prototype.updateColor = function(comp, color) {
        false;
        var uintVerts = this._renderData.uintVDatas[0];
        if (!uintVerts) return;
        color = null != color ? color : comp.node.color._val;
        var floatsPerVert = this.floatsPerVert;
        var colorOffset = this.colorOffset;
        for (var i = colorOffset, l = uintVerts.length; i < l; i += floatsPerVert) uintVerts[i] = color;
      };
      TmpAssembler.prototype.updateColorExtra = function(comp) {
        var uintVerts = this._renderData.uintVDatas[0];
        if (!uintVerts) return;
        var tmpColor = cc.color();
        for (var i = 0; i < this._lettersInfo.length; i++) {
          var info = this._lettersInfo[i];
          if (!info.valid || cc["textUtils"].isUnicodeSpace(info.char)) continue;
          var alpha = info.visible ? 1 : 0;
          var offset = this.colorExtraOffset + this.floatsPerVert * info.quadsIndex * 4;
          tmpColor.set(WHITE);
          tmpColor.setA(tmpColor.a * alpha);
          comp.colorGradient && tmpColor.multiply(comp.colorLB);
          uintVerts[offset] = tmpColor["_val"];
          offset += this.floatsPerVert;
          tmpColor.set(WHITE);
          tmpColor.setA(tmpColor.a * alpha);
          comp.colorGradient && tmpColor.multiply(comp.colorRB);
          uintVerts[offset] = tmpColor["_val"];
          offset += this.floatsPerVert;
          tmpColor.set(WHITE);
          tmpColor.setA(tmpColor.a * alpha);
          comp.colorGradient && tmpColor.multiply(comp.colorLT);
          uintVerts[offset] = tmpColor["_val"];
          offset += this.floatsPerVert;
          tmpColor.set(WHITE);
          tmpColor.setA(tmpColor.a * alpha);
          comp.colorGradient && tmpColor.multiply(comp.colorRT);
          uintVerts[offset] = tmpColor["_val"];
        }
      };
      TmpAssembler.prototype.isVisble = function(index) {
        var info = this._lettersInfo[index];
        return info && info.valid && info.visible && !cc["textUtils"].isUnicodeSpace(info.char);
      };
      TmpAssembler.prototype.setVisible = function(comp, index, visible) {
        var info = this._lettersInfo[index];
        if (!info || this.isVisble(index) === visible || info.visible === visible || cc["textUtils"].isUnicodeSpace(info.char)) return;
        info.visible = visible;
        var offset = this.colorExtraOffset + this.floatsPerVert * info.quadsIndex * 4;
        var color = cc.color();
        var alpha = visible ? 1 : 0;
        var uintVerts = this._renderData.uintVDatas[0];
        color.set(WHITE);
        color.setA(color.a * alpha);
        comp.colorGradient && color.multiply(comp.colorLB);
        uintVerts[offset] = color["_val"];
        offset += this.floatsPerVert;
        color.set(WHITE);
        color.setA(color.a * alpha);
        comp.colorGradient && color.multiply(comp.colorRB);
        uintVerts[offset] = color["_val"];
        offset += this.floatsPerVert;
        color.set(WHITE);
        color.setA(color.a * alpha);
        comp.colorGradient && color.multiply(comp.colorLT);
        uintVerts[offset] = color["_val"];
        offset += this.floatsPerVert;
        color.set(WHITE);
        color.setA(color.a * alpha);
        comp.colorGradient && color.multiply(comp.colorRT);
        uintVerts[offset] = color["_val"];
      };
      TmpAssembler.prototype.getColorExtraVertices = function(index) {
        var info = this._lettersInfo[index];
        if (!info || !info.valid) return null;
        var result = [];
        var uintVerts = this._renderData.uintVDatas[0];
        var offset = this.colorExtraOffset + this.floatsPerVert * info.quadsIndex * 4;
        for (var i = 0; i < 4; i++) {
          var color = cc.color();
          color["_val"] = uintVerts[offset];
          result.push(color);
          offset += this.floatsPerVert;
        }
        return result;
      };
      TmpAssembler.prototype.setColorExtraVertices = function(index, data) {
        var info = this._lettersInfo[index];
        if (!info || !info.valid || 4 !== data.length || cc["textUtils"].isUnicodeSpace(info.char)) return;
        var uintVerts = this._renderData.uintVDatas[0];
        var offset = this.colorExtraOffset + this.floatsPerVert * info.quadsIndex * 4;
        for (var i = 0; i < 4; i++) {
          uintVerts[offset] = data[i]["_val"];
          offset += this.floatsPerVert;
        }
      };
      TmpAssembler.prototype.getPosVertices = function(index) {
        var info = this._lettersInfo[index];
        if (!info || !info.valid) return null;
        var result = [];
        var local = this._local;
        var offset = this.floatsPerVert * info.quadsIndex * 4;
        for (var i = 0; i < 4; i++) {
          result.push(cc.v2(local[offset], local[offset + 1]));
          offset += this.floatsPerVert;
        }
        return result;
      };
      TmpAssembler.prototype.setPosVertices = function(index, data) {
        var info = this._lettersInfo[index];
        if (!info || !info.valid || 4 !== data.length || cc["textUtils"].isUnicodeSpace(info.char)) return;
        var local = this._local;
        var offset = this.floatsPerVert * info.quadsIndex * 4;
        for (var i = 0; i < 4; i++) {
          local[offset] = data[i].x;
          local[offset + 1] = data[i].y;
          offset += this.floatsPerVert;
        }
      };
      return TmpAssembler;
    }(cc["Assembler"]);
    exports.default = TmpAssembler;
    cc._RF.pop();
  }, {
    "../TextMeshPro": "TextMeshPro"
  } ],
  TmpFontConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "60b25NdgrJE3pHzGZ1EQQrT", "TmpFontConfig");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TmpFontLetter = void 0;
    var TmpFontLetter = function() {
      function TmpFontLetter() {
        this.u = 0;
        this.v = 0;
        this.w = 0;
        this.h = 0;
        this.offsetX = 0;
        this.offsetY = 0;
        this.textureId = 0;
        this.valid = false;
        this.xAdvance = 0;
      }
      return TmpFontLetter;
    }();
    exports.TmpFontLetter = TmpFontLetter;
    var TmpFontConfig = function() {
      function TmpFontConfig(json, textures) {
        var _this = this;
        this._letterDefinitions = {};
        this._textures = {};
        this._json = null;
        this._json = json;
        textures.forEach(function(v, id) {
          _this._textures[id] = v;
        });
        json.charData.forEach(function(v) {
          var letter = new TmpFontLetter();
          letter.offsetX = v.xoffset;
          letter.offsetY = v.yoffset;
          letter.w = v.width;
          letter.h = v.height;
          letter.u = v.x;
          letter.v = v.y;
          letter.textureId = v.page;
          letter.valid = true;
          letter.xAdvance = v.xadvance;
          _this.addLetterDefinitions(v.id, letter);
        });
      }
      Object.defineProperty(TmpFontConfig.prototype, "json", {
        get: function() {
          return this._json;
        },
        enumerable: false,
        configurable: true
      });
      TmpFontConfig.prototype.addTexture = function(id, texture) {
        this._textures[id] = texture;
      };
      TmpFontConfig.prototype.addLetterDefinitions = function(letter, letterDefinition) {
        this._letterDefinitions[letter] = letterDefinition;
      };
      TmpFontConfig.prototype.cloneLetterDefinition = function() {
        var copyLetterDefinitions = {};
        for (var key in this._letterDefinitions) {
          var value = new TmpFontLetter();
          cc.js.mixin(value, this._letterDefinitions[key]);
          copyLetterDefinitions[key] = value;
        }
        return copyLetterDefinitions;
      };
      TmpFontConfig.prototype.getTexture = function(id) {
        return this._textures[id];
      };
      TmpFontConfig.prototype.getLetter = function(key) {
        return this._letterDefinitions[key];
      };
      TmpFontConfig.prototype.getLetterDefinitionForChar = function(char) {
        var key = char.charCodeAt(0);
        var hasKey = this._letterDefinitions.hasOwnProperty(key);
        var letter;
        letter = hasKey ? this._letterDefinitions[key] : null;
        return letter;
      };
      TmpFontConfig.prototype.clear = function() {
        this._letterDefinitions = {};
      };
      return TmpFontConfig;
    }();
    exports.default = TmpFontConfig;
    cc._RF.pop();
  }, {} ],
  TmpRichText: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c4f1avKus9MM6INFfM10YV9", "TmpRichText");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TextMeshPro_1 = require("./TextMeshPro");
    var HtmlParser_1 = require("./utils/HtmlParser");
    var TmpUtils_1 = require("./utils/TmpUtils");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, disallowMultiple = _a.disallowMultiple, executeInEditMode = _a.executeInEditMode, menu = _a.menu;
    var RichTextChildName = "RICHTEXT_CHILD";
    var RichTextChildImageName = "RICHTEXT_Image_CHILD";
    var _htmlTextParser = new HtmlParser_1.HtmlTextParser();
    var pool = new cc.js.Pool(function(node) {
      false;
      false;
      if (!cc.isValid(node)) return false;
      return true;
    }, 20);
    pool.get = function(string, richtext) {
      var labelNode = this._get();
      if (!labelNode) {
        labelNode = new cc.PrivateNode(RichTextChildName);
        labelNode._objFlags |= cc.Object["Flags"].DontSave;
      }
      labelNode.setPosition(0, 0);
      labelNode.setAnchorPoint(.5, .5);
      var labelComponent = labelNode.getComponent(TextMeshPro_1.default);
      labelComponent || (labelComponent = labelNode.addComponent(TextMeshPro_1.default));
      labelComponent.string = "";
      labelComponent.horizontalAlign = cc.Label.HorizontalAlign.LEFT;
      labelComponent.verticalAlign = cc.Label.VerticalAlign.CENTER;
      return labelNode;
    };
    var TmpRichText = function(_super) {
      __extends(TmpRichText, _super);
      function TmpRichText() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._string = "";
        _this._font = null;
        _this._horizontalAlign = cc.Label.HorizontalAlign.LEFT;
        _this._verticalAlign = cc.Label.VerticalAlign.TOP;
        _this._fontSize = 32;
        _this._maxWidth = 0;
        _this._lineHeight = 32;
        _this._imageAtlas = null;
        _this._handleTouchEvent = true;
        _this.material = null;
        _this.textures = [];
        _this._textArray = null;
        _this._labelSegments = [];
        _this._labelSegmentsCache = [];
        _this._linesWidth = [];
        _this._lineOffsetX = 0;
        _this._lineCount = 1;
        _this._labelWidth = 0;
        _this._labelHeight = 0;
        _this._layoutDirty = true;
        _this._labelContent = null;
        _this._imageContent = null;
        return _this;
      }
      Object.defineProperty(TmpRichText.prototype, "string", {
        get: function() {
          return this._string;
        },
        set: function(v) {
          if (this._string === v) return;
          this._string = v;
          this._updateRichText();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "font", {
        get: function() {
          return this._font;
        },
        set: function(v) {
          if (this._font === v) return;
          this._font = v;
          false;
          this._layoutDirty = true;
          this._updateRichText();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "horizontalAlign", {
        get: function() {
          return this._horizontalAlign;
        },
        set: function(v) {
          if (this._horizontalAlign === v) return;
          this._horizontalAlign = v;
          this._layoutDirty = true;
          this._updateRichText();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "verticalAlign", {
        get: function() {
          return this._verticalAlign;
        },
        set: function(v) {
          if (this._verticalAlign === v) return;
          this._verticalAlign = v;
          this._layoutDirty = true;
          this._updateRichText();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "fontSize", {
        get: function() {
          return this._fontSize;
        },
        set: function(v) {
          if (this._fontSize === v) return;
          this._fontSize = v;
          this._layoutDirty = true;
          this._updateRichText();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "maxWidth", {
        get: function() {
          return this._maxWidth;
        },
        set: function(v) {
          if (this._maxWidth === v) return;
          this._maxWidth = v;
          this._layoutDirty = true;
          this._updateRichText();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "lineHeight", {
        get: function() {
          return this._lineHeight;
        },
        set: function(v) {
          if (this._lineHeight === v) return;
          this._lineHeight = v;
          this._layoutDirty = true;
          this._updateRichText();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "imageAtlas", {
        get: function() {
          return this._imageAtlas;
        },
        set: function(v) {
          if (this._imageAtlas === v) return;
          this._imageAtlas = v;
          this._layoutDirty = true;
          this._updateRichText();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "handleTouchEvent", {
        get: function() {
          return this._handleTouchEvent;
        },
        set: function(v) {
          if (this._handleTouchEvent === v) return;
          this._handleTouchEvent = v;
          this.enabledInHierarchy && (this.handleTouchEvent ? this._addEventListeners() : this._removeEventListeners());
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "labelContent", {
        get: function() {
          var _a;
          if (!this._labelContent) {
            var content = "TMP_LABEL_CONTENT";
            this._labelContent = null !== (_a = this.node.getChildByName(content)) && void 0 !== _a ? _a : new cc.PrivateNode(content);
            this._labelContent["_objFlags"] |= cc.Object["Flags"].DontSave;
            this.node.insertChild(this._labelContent, this._imageContent ? 1 : 0);
          }
          return this._labelContent;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TmpRichText.prototype, "imageContent", {
        get: function() {
          var _a;
          if (!this._imageContent) {
            var content = "TMP_IMAGE_CONTENT";
            this._imageContent = null !== (_a = this.node.getChildByName(content)) && void 0 !== _a ? _a : new cc.PrivateNode(content);
            this._imageContent["_objFlags"] |= cc.Object["Flags"].DontSave;
            this.node.insertChild(this._imageContent, 0);
          }
          return this._imageContent;
        },
        enumerable: false,
        configurable: true
      });
      TmpRichText.prototype.editorInit = function() {
        var _this = this;
        false;
      };
      TmpRichText.prototype.resetInEditor = function() {
        var _this = this;
        false;
      };
      TmpRichText.prototype.onRestore = function() {
        false;
      };
      TmpRichText.prototype.onEnable = function() {
        this.handleTouchEvent && this._addEventListeners();
        this._onFontLoaded();
        this._activateChildren(true);
      };
      TmpRichText.prototype.onDisable = function() {
        this.handleTouchEvent && this._removeEventListeners();
        this._activateChildren(false);
      };
      TmpRichText.prototype.onDestroy = function() {
        for (var i = 0; i < this._labelSegments.length; ++i) {
          this._labelSegments[i].removeFromParent();
          pool.put(this._labelSegments[i]);
        }
      };
      TmpRichText.prototype._onColorChanged = function(parentColor) {
        this.node.children.forEach(function(content) {
          content.children.forEach(function(childNode) {
            childNode.color = parentColor;
          });
        });
      };
      TmpRichText.prototype._addEventListeners = function() {
        this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
      };
      TmpRichText.prototype._removeEventListeners = function() {
        this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        this.node.off(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
      };
      TmpRichText.prototype._updateLabelSegmentTextAttributes = function() {
        this._labelSegments.forEach(function(item) {
          this._applyTextAttribute(item, null, true);
        }.bind(this));
      };
      TmpRichText.prototype._createFontLabel = function(string) {
        var node = pool.get(string, this);
        var tmp = node.getComponent(TextMeshPro_1.default);
        tmp && tmp.getMaterial(0) !== this.material && tmp.setMaterial(0, this.material);
        return node;
      };
      TmpRichText.prototype._onFontLoaded = function() {
        this._layoutDirty = true;
        this._updateRichText();
      };
      TmpRichText.prototype._measureText = function(styleIndex, string) {
        var self = this;
        var func = function(string) {
          var label;
          if (0 === self._labelSegmentsCache.length) {
            label = self._createFontLabel(string);
            self._labelSegmentsCache.push(label);
          } else label = self._labelSegmentsCache[0];
          label["_styleIndex"] = styleIndex;
          self._applyTextAttribute(label, string, true);
          var labelSize = label.getContentSize();
          return labelSize.width;
        };
        return string ? func(string) : func;
      };
      TmpRichText.prototype._onTouchEnded = function(event) {
        var components = this.node.getComponents(cc.Component);
        var _loop_1 = function(i) {
          var labelSegment = this_1._labelSegments[i];
          var clickHandler = labelSegment["_clickHandler"];
          var clickParam = labelSegment["_clickParam"];
          if (clickHandler && this_1._containsTouchLocation(labelSegment, event.touch.getLocation())) {
            components.forEach(function(component) {
              component.enabledInHierarchy && component[clickHandler] && component[clickHandler](event, clickParam);
            });
            event.stopPropagation();
          }
        };
        var this_1 = this;
        for (var i = 0; i < this._labelSegments.length; ++i) _loop_1(i);
      };
      TmpRichText.prototype._containsTouchLocation = function(label, point) {
        var myRect = label.getBoundingBoxToWorld();
        return myRect.contains(point);
      };
      TmpRichText.prototype._resetContent = function(node) {
        if (!node) return;
        var children = node.children;
        for (var i = children.length - 1; i >= 0; i--) {
          var child = children[i];
          if (child.name === RichTextChildName || child.name === RichTextChildImageName) {
            child.parent === node ? child.parent = null : children.splice(i, 1);
            child.name === RichTextChildName && pool.put(child);
          }
        }
      };
      TmpRichText.prototype._resetState = function() {
        for (var i = 0; i < this.node.childrenCount; i++) this._resetContent(this.node.children[i]);
        this._labelSegments.length = 0;
        this._labelSegmentsCache.length = 0;
        this._linesWidth.length = 0;
        this._lineOffsetX = 0;
        this._lineCount = 1;
        this._labelWidth = 0;
        this._labelHeight = 0;
        this._layoutDirty = true;
      };
      TmpRichText.prototype._activateChildren = function(active) {
        this.node.children.forEach(function(content) {
          for (var i = content.children.length - 1; i >= 0; i--) {
            var child = content.children[i];
            child.name !== RichTextChildName && child.name !== RichTextChildImageName || (child.active = active);
          }
        });
      };
      TmpRichText.prototype._addLabelSegment = function(stringToken, styleIndex) {
        var labelSegment;
        labelSegment = 0 === this._labelSegmentsCache.length ? this._createFontLabel(stringToken) : this._labelSegmentsCache.pop();
        var tmp = labelSegment.getComponent(TextMeshPro_1.default);
        tmp.verticalAlign !== this._verticalAlign && (tmp.verticalAlign = this._verticalAlign);
        labelSegment._styleIndex = styleIndex;
        labelSegment._lineCount = this._lineCount;
        labelSegment.active = this.node.active;
        labelSegment.setAnchorPoint(0, 0);
        this._applyTextAttribute(labelSegment, stringToken, false);
        this.labelContent.addChild(labelSegment);
        this._labelSegments.push(labelSegment);
        return labelSegment;
      };
      TmpRichText.prototype._updateRichTextWithMaxWidth = function(labelString, labelWidth, styleIndex) {
        var fragmentWidth = labelWidth;
        var labelSegment;
        if (this._lineOffsetX > 0 && fragmentWidth + this._lineOffsetX > this.maxWidth) {
          var checkStartIndex = 0;
          while (this._lineOffsetX <= this.maxWidth) {
            var checkEndIndex = this._getFirstWordLen(labelString, checkStartIndex, labelString.length);
            var checkString = labelString.substr(checkStartIndex, checkEndIndex);
            var checkStringWidth = this._measureText(styleIndex, checkString);
            if (!(this._lineOffsetX + checkStringWidth <= this.maxWidth)) {
              if (checkStartIndex > 0) {
                var remainingString = labelString.substr(0, checkStartIndex);
                this._addLabelSegment(remainingString, styleIndex);
                labelString = labelString.substr(checkStartIndex, labelString.length);
                fragmentWidth = this._measureText(styleIndex, labelString);
              }
              this._updateLineInfo();
              break;
            }
            this._lineOffsetX += checkStringWidth;
            checkStartIndex += checkEndIndex;
          }
        }
        if (fragmentWidth > this.maxWidth) {
          var fragments = cc["textUtils"].fragmentText(labelString, fragmentWidth, this.maxWidth, this._measureText(styleIndex));
          for (var k = 0; k < fragments.length; ++k) {
            var splitString = fragments[k];
            labelSegment = this._addLabelSegment(splitString, styleIndex);
            var labelSize = labelSegment.getContentSize();
            this._lineOffsetX += labelSize.width;
            fragments.length > 1 && k < fragments.length - 1 && this._updateLineInfo();
          }
        } else {
          this._lineOffsetX += fragmentWidth;
          this._addLabelSegment(labelString, styleIndex);
        }
      };
      TmpRichText.prototype._isLastComponentCR = function(stringToken) {
        return stringToken.length - 1 === stringToken.lastIndexOf("\n");
      };
      TmpRichText.prototype._updateLineInfo = function() {
        this._linesWidth.push(this._lineOffsetX);
        this._lineOffsetX = 0;
        this._lineCount++;
      };
      TmpRichText.prototype._needsUpdateTextLayout = function(newTextArray) {
        if (this._layoutDirty || !this._textArray || !newTextArray) return true;
        if (this._textArray.length !== newTextArray.length) return true;
        for (var i = 0; i < this._textArray.length; ++i) {
          var oldItem = this._textArray[i];
          var newItem = newTextArray[i];
          if (oldItem.text !== newItem.text) return true;
          var oldStyle = oldItem.style, newStyle = newItem.style;
          if (oldStyle) {
            if (newStyle) {
              if (!oldStyle.outline !== !newStyle.outline) return true;
              if (oldStyle.size !== newStyle.size || !oldStyle.italic !== !newStyle.italic || oldStyle.isImage !== newStyle.isImage) return true;
              if (oldStyle.src !== newStyle.src || oldStyle.imageAlign !== newStyle.imageAlign || oldStyle.imageHeight !== newStyle.imageHeight || oldStyle.imageWidth !== newStyle.imageWidth || oldStyle.imageOffset !== newStyle.imageOffset) return true;
            } else if (oldStyle.size || oldStyle.italic || oldStyle.isImage || oldStyle.outline) return true;
          } else if (newStyle && (newStyle.size || newStyle.italic || newStyle.isImage || newStyle.outline)) return true;
        }
        return false;
      };
      TmpRichText.prototype._addRichTextImageElement = function(richTextElement) {
        var spriteFrameName = richTextElement.style.src;
        var spriteFrame = this.imageAtlas.getSpriteFrame(spriteFrameName);
        if (spriteFrame) {
          var spriteNode = new cc.PrivateNode(RichTextChildImageName);
          spriteNode["_objFlags"] |= cc.Object["Flags"].DontSave;
          var spriteComponent = spriteNode.addComponent(cc.Sprite);
          switch (richTextElement.style.imageAlign) {
           case "top":
            spriteNode.setAnchorPoint(0, 1);
            break;

           case "center":
            spriteNode.setAnchorPoint(0, .5);
            break;

           default:
            spriteNode.setAnchorPoint(0, 0);
          }
          richTextElement.style.imageOffset && (spriteNode["_imageOffset"] = richTextElement.style.imageOffset);
          spriteComponent.type = cc.Sprite.Type.SLICED;
          spriteComponent.sizeMode = cc.Sprite.SizeMode.CUSTOM;
          this.imageContent.addChild(spriteNode);
          this._labelSegments.push(spriteNode);
          var spriteRect = spriteFrame.getRect();
          var scaleFactor = 1;
          var spriteWidth = spriteRect.width;
          var spriteHeight = spriteRect.height;
          var expectWidth = richTextElement.style.imageWidth;
          var expectHeight = richTextElement.style.imageHeight;
          if (expectHeight > 0) {
            scaleFactor = expectHeight / spriteHeight;
            spriteWidth *= scaleFactor;
            spriteHeight *= scaleFactor;
          } else {
            scaleFactor = this.lineHeight / spriteHeight;
            spriteWidth *= scaleFactor;
            spriteHeight *= scaleFactor;
          }
          expectWidth > 0 && (spriteWidth = expectWidth);
          if (this.maxWidth > 0) {
            this._lineOffsetX + spriteWidth > this.maxWidth && this._updateLineInfo();
            this._lineOffsetX += spriteWidth;
          } else {
            this._lineOffsetX += spriteWidth;
            this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX);
          }
          spriteComponent.spriteFrame = spriteFrame;
          spriteNode.setContentSize(spriteWidth, spriteHeight);
          spriteNode["_lineCount"] = this._lineCount;
          if (richTextElement.style.event) {
            richTextElement.style.event.click && (spriteNode["_clickHandler"] = richTextElement.style.event.click);
            richTextElement.style.event.param ? spriteNode["_clickParam"] = richTextElement.style.event.param : spriteNode["_clickParam"] = "";
          } else spriteNode["_clickHandler"] = null;
        } else cc["warnID"](4400);
      };
      TmpRichText.prototype._updateRichText = function() {
        if (!this.enabledInHierarchy) return;
        var newTextArray = _htmlTextParser.parse(this.string);
        if (!this._needsUpdateTextLayout(newTextArray)) {
          this._textArray = newTextArray.slice();
          this._updateLabelSegmentTextAttributes();
          return;
        }
        this._textArray = newTextArray.slice();
        this._resetState();
        var lastEmptyLine = false;
        var label;
        var labelSize;
        for (var i = 0; i < this._textArray.length; ++i) {
          var richTextElement = this._textArray[i];
          var text = richTextElement.text;
          if ("" === text) {
            if (richTextElement.style && richTextElement.style.newline) {
              this._updateLineInfo();
              continue;
            }
            if (richTextElement.style && richTextElement.style.isImage && this.imageAtlas) {
              this._addRichTextImageElement(richTextElement);
              continue;
            }
          }
          var multilineTexts = text.split("\n");
          for (var j = 0; j < multilineTexts.length; ++j) {
            var labelString = multilineTexts[j];
            if ("" === labelString) {
              if (this._isLastComponentCR(text) && j === multilineTexts.length - 1) continue;
              this._updateLineInfo();
              lastEmptyLine = true;
              continue;
            }
            lastEmptyLine = false;
            if (this.maxWidth > 0) {
              var labelWidth = this._measureText(i, labelString);
              this._updateRichTextWithMaxWidth(labelString, labelWidth, i);
              multilineTexts.length > 1 && j < multilineTexts.length - 1 && this._updateLineInfo();
            } else {
              label = this._addLabelSegment(labelString, i);
              labelSize = label.getContentSize();
              this._lineOffsetX += labelSize.width;
              this._lineOffsetX > this._labelWidth && (this._labelWidth = this._lineOffsetX);
              multilineTexts.length > 1 && j < multilineTexts.length - 1 && this._updateLineInfo();
            }
          }
        }
        lastEmptyLine || this._linesWidth.push(this._lineOffsetX);
        this.maxWidth > 0 && (this._labelWidth = this.maxWidth);
        this._labelHeight = (this._lineCount + cc["textUtils"].BASELINE_RATIO) * this.lineHeight;
        this.node.setContentSize(this._labelWidth, this._labelHeight);
        this._updateRichTextPosition();
        this._layoutDirty = false;
      };
      TmpRichText.prototype._getFirstWordLen = function(text, startIndex, textLen) {
        var character = text.charAt(startIndex);
        if (cc["textUtils"].isUnicodeCJK(character) || cc["textUtils"].isUnicodeSpace(character)) return 1;
        var len = 1;
        for (var index = startIndex + 1; index < textLen; ++index) {
          character = text.charAt(index);
          if (cc["textUtils"].isUnicodeSpace(character) || cc["textUtils"].isUnicodeCJK(character)) break;
          len++;
        }
        return len;
      };
      TmpRichText.prototype._updateRichTextPosition = function() {
        var nextTokenX = 0;
        var nextLineIndex = 1;
        var totalLineCount = this._lineCount;
        for (var i = 0; i < this._labelSegments.length; ++i) {
          var label = this._labelSegments[i];
          var lineCount = label["_lineCount"];
          if (lineCount > nextLineIndex) {
            nextTokenX = 0;
            nextLineIndex = lineCount;
          }
          var lineOffsetX = 0;
          switch (this.horizontalAlign) {
           case cc.Label.HorizontalAlign.LEFT:
            lineOffsetX = -this._labelWidth / 2;
            break;

           case cc.Label.HorizontalAlign.CENTER:
            lineOffsetX = -this._linesWidth[lineCount - 1] / 2;
            break;

           case cc.Label.HorizontalAlign.RIGHT:
            lineOffsetX = this._labelWidth / 2 - this._linesWidth[lineCount - 1];
          }
          label.x = nextTokenX + lineOffsetX;
          label.y = this.lineHeight * (totalLineCount - lineCount) - this._labelHeight / 2;
          if (lineCount === nextLineIndex) {
            var labelSize = label.getContentSize();
            nextTokenX += labelSize.width;
            var tmp = label.getComponent(TextMeshPro_1.default);
            tmp && tmp.richTextDeltaX && (nextTokenX += tmp.richTextDeltaX);
          }
          var sprite = label.getComponent(cc.Sprite);
          if (sprite) {
            var lineHeightSet = this.lineHeight;
            var lineHeightReal = this.lineHeight * (1 + cc["textUtils"].BASELINE_RATIO);
            switch (label.anchorY) {
             case 1:
              label.y += lineHeightSet + (lineHeightReal - lineHeightSet) / 2;
              break;

             case .5:
              label.y += lineHeightReal / 2;
              break;

             default:
              label.y += (lineHeightReal - lineHeightSet) / 2;
            }
            if (label["_imageOffset"]) {
              var offsets = label["_imageOffset"].split(",");
              if (1 === offsets.length && offsets[0]) {
                var offsetY = parseFloat(offsets[0]);
                Number.isInteger(offsetY) && (label.y += offsetY);
              } else if (2 === offsets.length) {
                var offsetX = parseFloat(offsets[0]);
                var offsetY = parseFloat(offsets[1]);
                Number.isInteger(offsetX) && (label.x += offsetX);
                Number.isInteger(offsetY) && (label.y += offsetY);
              }
            }
          }
        }
      };
      TmpRichText.prototype._convertLiteralColorValue = function(color) {
        var colorValue = color.toUpperCase();
        if (cc.Color[colorValue]) return cc.Color[colorValue];
        var hexString = 0 === color.indexOf("#") ? color.substring(1) : color;
        var r = parseInt(hexString.substring(0, 2), 16) || 0;
        var g = parseInt(hexString.substring(2, 4), 16) || 0;
        var b = parseInt(hexString.substring(4, 6), 16) || 0;
        var a = parseInt(hexString.substring(6, 8), 16);
        Number.isNaN(a) && (a = 255);
        return cc.color(r, g, b, a);
      };
      TmpRichText.prototype._applyTextAttribute = function(labelNode, string, force) {
        var labelComponent = labelNode.getComponent(TextMeshPro_1.default);
        if (!labelComponent) return;
        var index = labelNode["_styleIndex"];
        var textStyle = null;
        this._textArray[index] && (textStyle = this._textArray[index].style);
        textStyle && textStyle.color ? labelNode.color = this._convertLiteralColorValue(textStyle.color) : labelNode.color = this.node.color;
        labelComponent.setFont(this.font, this.textures);
        labelComponent.lineHeight = this.lineHeight;
        labelComponent.colorGradient = Boolean(textStyle && textStyle.colorGradient);
        if (labelComponent.colorGradient) {
          labelComponent.colorLB = this._convertLiteralColorValue(textStyle.colorGradient.lb);
          labelComponent.colorRB = this._convertLiteralColorValue(textStyle.colorGradient.rb);
          labelComponent.colorLT = this._convertLiteralColorValue(textStyle.colorGradient.lt);
          labelComponent.colorRT = this._convertLiteralColorValue(textStyle.colorGradient.rt);
        }
        if (textStyle && textStyle.face) {
          labelComponent.tmpUniform.faceColor = this._convertLiteralColorValue(textStyle.face.color);
          labelComponent.tmpUniform.faceDilate = textStyle.face.dilate;
          labelComponent.tmpUniform.faceSoftness = textStyle.face.softness;
        } else {
          labelComponent.tmpUniform.faceColor = cc.Color.WHITE;
          labelComponent.tmpUniform.faceDilate = .5;
          labelComponent.tmpUniform.faceSoftness = .01;
        }
        labelComponent.enableItalic = Boolean(textStyle && textStyle.italic);
        labelComponent.enableUnderline = Boolean(textStyle && textStyle.underline);
        labelComponent.enableUnderline && (labelComponent.underlineOffset = textStyle.offset || 0);
        labelComponent.enableStrikethrough = Boolean(textStyle && textStyle.strikethrough);
        labelComponent.enableStrikethrough && (labelComponent.strikethroughOffset = textStyle.offset || 0);
        labelComponent.tmpUniform.enableOutline = Boolean(textStyle && textStyle.outline);
        if (textStyle && textStyle.outline) {
          labelComponent.tmpUniform.outlineColor = this._convertLiteralColorValue(textStyle.outline.color);
          labelComponent.tmpUniform.outlineThickness = textStyle.outline.thickness;
        }
        labelComponent.tmpUniform.enableUnderlay = Boolean(textStyle && textStyle.underlay);
        if (labelComponent.tmpUniform.enableUnderlay) {
          labelComponent.tmpUniform.underlayColor = this._convertLiteralColorValue(textStyle.underlay.color);
          labelComponent.tmpUniform.underlayOffset = cc.v2(textStyle.underlay.x, textStyle.underlay.y);
          labelComponent.tmpUniform.underlayDilate = textStyle.underlay.dilate;
          labelComponent.tmpUniform.underlaySoftness = textStyle.underlay.softness;
        }
        labelComponent.tmpUniform.enableGlow = Boolean(textStyle && textStyle.glow);
        if (labelComponent.tmpUniform.enableGlow) {
          labelComponent.tmpUniform.glowColor = this._convertLiteralColorValue(textStyle.glow.color);
          labelComponent.tmpUniform.glowOffset = textStyle.glow.offset;
          labelComponent.tmpUniform.glowInner = textStyle.glow.inner;
          labelComponent.tmpUniform.glowOuter = textStyle.glow.outer;
          labelComponent.tmpUniform.glowPower = textStyle.glow.power;
        }
        textStyle && textStyle.size ? labelComponent.fontSize = textStyle.size : labelComponent.fontSize = this.fontSize;
        if (null !== string) {
          "string" !== typeof string && (string = "" + string);
          labelComponent.string = string;
        }
        force && labelComponent.forceUpdateRenderData();
        if (textStyle && textStyle.event) {
          textStyle.event.click && (labelNode["_clickHandler"] = textStyle.event.click);
          textStyle.event.param ? labelNode["_clickParam"] = textStyle.event.param : labelNode["_clickParam"] = "";
        } else labelNode["_clickHandler"] = null;
      };
      __decorate([ property ], TmpRichText.prototype, "_string", void 0);
      __decorate([ property({
        multiline: true
      }) ], TmpRichText.prototype, "string", null);
      __decorate([ property(cc.JsonAsset) ], TmpRichText.prototype, "_font", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.JsonAsset
      }) ], TmpRichText.prototype, "font", null);
      __decorate([ property({
        type: cc.Label.HorizontalAlign
      }) ], TmpRichText.prototype, "_horizontalAlign", void 0);
      __decorate([ property({
        type: cc.Label.HorizontalAlign
      }) ], TmpRichText.prototype, "horizontalAlign", null);
      __decorate([ property({
        type: cc.Label.VerticalAlign
      }) ], TmpRichText.prototype, "_verticalAlign", void 0);
      __decorate([ property({
        type: cc.Label.VerticalAlign
      }) ], TmpRichText.prototype, "verticalAlign", null);
      __decorate([ property ], TmpRichText.prototype, "_fontSize", void 0);
      __decorate([ property({
        range: [ 0, 1024 ]
      }) ], TmpRichText.prototype, "fontSize", null);
      __decorate([ property ], TmpRichText.prototype, "_maxWidth", void 0);
      __decorate([ property({
        tooltip: false
      }) ], TmpRichText.prototype, "maxWidth", null);
      __decorate([ property ], TmpRichText.prototype, "_lineHeight", void 0);
      __decorate([ property ], TmpRichText.prototype, "lineHeight", null);
      __decorate([ property(cc.SpriteAtlas) ], TmpRichText.prototype, "_imageAtlas", void 0);
      __decorate([ property(cc.SpriteAtlas) ], TmpRichText.prototype, "imageAtlas", null);
      __decorate([ property ], TmpRichText.prototype, "_handleTouchEvent", void 0);
      __decorate([ property ], TmpRichText.prototype, "handleTouchEvent", null);
      __decorate([ property(cc.Material) ], TmpRichText.prototype, "material", void 0);
      __decorate([ property({
        tooltip: false,
        type: cc.Texture2D,
        readonly: true
      }) ], TmpRichText.prototype, "textures", void 0);
      TmpRichText = __decorate([ ccclass, disallowMultiple, executeInEditMode, menu("TextMeshPro\u7ec4\u4ef6/TmpRichText") ], TmpRichText);
      return TmpRichText;
    }(cc.Component);
    exports.default = TmpRichText;
    cc._RF.pop();
  }, {
    "./TextMeshPro": "TextMeshPro",
    "./utils/HtmlParser": "HtmlParser",
    "./utils/TmpUtils": "TmpUtils"
  } ],
  TmpUtils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "afca7qBhjVE+Kv0IUWRakh1", "TmpUtils");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var TmpUtils = function() {
      function TmpUtils() {}
      TmpUtils.load = function(url) {
        return new Promise(function(resolve, reject) {
          true;
          resolve(null);
          return;
        });
      };
      TmpUtils.waitCmpt = function(cmpt, seconds) {
        return new Promise(function(resolve, reject) {
          cmpt.scheduleOnce(function() {
            resolve();
          }, seconds);
        });
      };
      TmpUtils.TMP_MAT = "textMeshPro/resources/shader/materials/textMeshPro.mtl";
      return TmpUtils;
    }();
    exports.default = TmpUtils;
    cc._RF.pop();
  }, {} ],
  Water_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9e031qzUu5GP6rwJ0mD4zY9", "Water_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {},
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        "Enemy" == otherCollider.node.group && otherCollider.node.getComponent("Enemy_Common").Start_Ice();
      }
    });
    cc._RF.pop();
  }, {} ],
  Wukong_5_Star_Next_Xiaoguanqia_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec771o4r3dOk5IY794H48IK", "Wukong_5_Star_Next_Xiaoguanqia_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Pet: cc.Node,
        Hero_Script: cc.Node
      },
      Check: function Check() {
        null != this.Pet && "" != this.Pet.name && this.Pet.destroy();
        var Number = Math.floor(3 * Math.random());
        switch (Number) {
         case 0:
          var node = cc.instantiate(this.Hero_Script.Pet_Bajie);
          break;

         case 1:
          var node = cc.instantiate(this.Hero_Script.Pet_Tangsen);
          break;

         case 2:
          var node = cc.instantiate(this.Hero_Script.Pet_Shasen);
        }
        node.parent = this.Hero_Script.Battle_Controller.Pet_Parent;
        node.setPosition(-459.189, 300.848);
        var Script = node.getComponent("Pet_Common");
        Script.Hero_Common = this.Hero_Common;
        this.Pet = node;
      }
    });
    cc._RF.pop();
  }, {} ],
  Wukong_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a544fFA/l5M7J4CuGBLA/j4", "Wukong_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Wukong_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "49309LtP4dEII9smrJDur6E", "Wukong_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Wukong").getComponent("Wukong");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Wukong_FS_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f44c3UiUaVAyKDEEbHuz4nn", "Wukong_FS_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Wukong_FS: cc.Prefab,
        Ini_Hp: 100,
        Have_Destroy_Bomb: 0
      },
      start: function start() {
        var _this = this;
        cc.tween(this.node).by(.3, {
          position: cc.v2(100, 0)
        }).call(function() {
          _this.Create_FS();
        }).start();
      },
      Create_FS: function Create_FS() {
        var Wukong_FS = cc.instantiate(this.Wukong_FS);
        Wukong_FS.parent = this.Battle_Controller.Wukong_FS_Father;
        Wukong_FS.x = this.node.x;
        Wukong_FS.y = this.node.y;
        var Wukong_FS_Script = Wukong_FS.getComponent("Wukong_FS");
        Wukong_FS_Script.Battle_Controller = this.Battle_Controller;
        this.Battle_Controller.Wukong_FS_Script.push(Wukong_FS_Script);
        Wukong_FS_Script.Ini_Hp = this.Ini_Hp;
        Wukong_FS_Script.Hp = this.Ini_Hp;
        Wukong_FS_Script.Have_Destroy_Bomb = this.Have_Destroy_Bomb;
      }
    });
    cc._RF.pop();
  }, {} ],
  Wukong_FS_Recovery_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "35bd4WYpAlEL6tBfSvyn3ok", "Wukong_FS_Recovery_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Target: cc.Node,
        ParticleSystem: cc.ParticleSystem
      },
      start: function start() {
        var _this = this;
        cc.tween(this.node).to(.3, {
          position: cc.v2(this.Target.x, this.Target.y)
        }, {
          easing: "quadOut"
        }).call(function() {
          _this.node.children[0].getComponent(cc.ParticleSystem).duration = .1;
        }).to(.5, {
          scale: 5,
          opacity: 0
        }).call(function() {
          _this.node.destroy();
        }).start();
      }
    });
    cc._RF.pop();
  }, {} ],
  Wukong_FS: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d47c7z3nDJISpTrL6ieTbUF", "Wukong_FS");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Ini_Hp: 100,
        Hp: 100,
        Hp_Line: cc.Node,
        Image: cc.Node,
        Battle_Controller: cc.Node,
        Animation: cc.Animation,
        Is_Borning: 1,
        Is_Dead: 0,
        Have_Destroy_Bomb: 0,
        Bomb_Bullet: cc.Prefab,
        Bomb_Particle: cc.Prefab,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Dead_Schdule: cc.Schdule,
        Recvory_Particle_Animation: cc.Animation,
        Dead_Particle: cc.ParticleSystem,
        Shoot_Stage: 0
      },
      start: function start() {
        this.Bullet_Parent = this.Battle_Controller.Hero_Bullet_Parent;
        this.Particle_Parent = this.Battle_Controller.Particle_Parent;
        this.Start_Dead_Schdule();
      },
      End_Born: function End_Born() {
        this.Animation.play("Wukong_FS_Stay");
        this.Is_Borning = 0;
      },
      Start_Attack: function Start_Attack() {
        0 == this.Is_Borning && 0 == this.Is_Dead && this.Animation.play("Wukong_FS_Attack");
      },
      Stop_Attack: function Stop_Attack() {
        0 == this.Is_Borning && 0 == this.Is_Dead && this.Animation.play("Wukong_FS_Stay");
      },
      Start_Dead_Schdule: function Start_Dead_Schdule() {
        this.Dead_Schdule = function() {
          this.Hp = this.Hp - 1;
          this.Hp_Line.scaleX = this.Hp / this.Ini_Hp;
          if (this.Hp <= 0) {
            this.Dead();
            this.unschedule(this.Dead_Schdule);
          }
        };
        this.schedule(this.Dead_Schdule, .1);
      },
      Dead: function Dead() {
        this.Is_Dead = 1;
        this.Animation.play("Wukong_FS_Dead");
      },
      DestroySelf: function DestroySelf() {
        1 == this.Have_Destroy_Bomb && this.Destroy_Bomb();
        this.Battle_Controller.Wukong_FS_Script.splice(this.Battle_Controller.Wukong_FS_Script.indexOf(this), 1);
        this.node.destroy();
      },
      Destroy_Bomb: function Destroy_Bomb() {
        this.Battle_Controller.Camera_Shake_Medium();
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Bomb_Particle);
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke_White.x = this.node.x;
        Attack_Fire_particle.x = this.node.x;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
        var Bullet_Speed_X = [ 0, 15e3, 3e4, 15e3, 0, -15e3, -3e4, -15e3 ];
        var Bullet_Speed_Y = [ 3e4, 15e3, 0, -15e3, -3e4, -15e3, 0, 15e3 ];
        var Bullet_Angle = [ 90, 45, 0, -45, -90, 45, 180, -45 ];
        for (var i = 0; i < 8; i++) {
          var Bullet = cc.instantiate(this.Bomb_Bullet);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          Bullet.angle = Bullet_Angle[i];
          Bullet.getComponent(cc.RigidBody).linearVelocity = cc.v2(Bullet_Speed_X[i], Bullet_Speed_Y[i]);
          this.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = -1;
          this.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
          this.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        }
        this.Battle_Controller.Battle_Audio_Controller.Attack(1, .8);
      },
      Recovery: function Recovery() {
        this.unschedule(this.Dead_Schdule);
        this.Recvory_Particle_Animation.play("Wukong_FS_Recovery_Particle");
        this.Hp = this.Ini_Hp;
        this.Hp_Line.scaleX = 1;
        this.Is_Dead = 0;
        this.Image.opacity = 255;
        this.Hp_Line.parent.opacity = 255;
        this.Dead_Particle.emissionRate = 0;
        this.Animation.play("Wukong_FS_Stay");
        this.Start_Dead_Schdule();
      },
      Set_Shoot_Stage: function Set_Shoot_Stage(Number) {
        this.Shoot_Stage = Number;
      },
      Hero_Shoot: function Hero_Shoot() {
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 106.993;
        Bullet.y = this.node.y;
        this.Battle_Controller.Hero_Script.Hero_Common.Count_Is_Skill = 0;
        this.Battle_Controller.Hero_Script.Hero_Common.Attack_Count();
        this.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Count();
        if (0 == this.Shoot_Stage) {
          Bullet.scaleX = .5 * this.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = .5 * this.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        } else {
          Bullet.scaleX = 2 * this.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = 2 * this.Battle_Controller.Hero_Script.Hero_Common.Bullet_Scale_Result;
        }
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Battle_Controller.Hero_Script.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Battle_Controller.Hero_Script.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Battle_Controller.Hero_Script.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Wukong_Pet_Born_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d2663mIx8lLF5FShctkV3cS", "Wukong_Pet_Born_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Common_Attack_Addition_Add(5);
      }
    });
    cc._RF.pop();
  }, {} ],
  Wukong_Pet_Dead_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3dd59p+N/ZDJJsPge8qqMSM", "Wukong_Pet_Dead_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Common_Attack_Addition_Reduce(5);
      }
    });
    cc._RF.pop();
  }, {} ],
  Wukong: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9efaaohyWNLZ5JCCZYUPvwE", "Wukong");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Max_FS_Number: 3,
        Skill_Bullet_Prefab: cc.Prefab,
        Wukong_FS_Recovery_Bullet: cc.Prefab,
        Wukong_Pet_Born_Extra_Check: cc.Prefab,
        Wukong_Pet_Dead_Extra_Check: cc.Prefab,
        Pet_Bajie: cc.Prefab,
        Pet_Tangsen: cc.Prefab,
        Pet_Shasen: cc.Prefab,
        Wukong_5_Star_Next_Xiaoguanqia_Extra_Check: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Create_Extra_Check();
        this.Battle_Controller.Hero_Star >= 4 && (this.Max_FS_Number = 5);
        console.log(this.Battle_Controller.Hero_Star);
        if (this.Battle_Controller.Hero_Star >= 5) {
          var Number = JSON.parse(cc.sys.localStorage.getItem("Wukkong_Friend"));
          console.log(Number);
          switch (Number) {
           case 0:
            var node = cc.instantiate(this.Pet_Bajie);
            break;

           case 1:
            var node = cc.instantiate(this.Pet_Tangsen);
            break;

           case 2:
            var node = cc.instantiate(this.Pet_Shasen);
          }
          node.parent = this.Battle_Controller.Pet_Parent;
          node.setPosition(-459.189, 300.848);
          var Script = node.getComponent("Pet_Common");
          Script.Hero_Common = this.Hero_Common;
          var Wukong_5_Star_Next_Xiaoguanqia_Extra_Check = cc.instantiate(this.Wukong_5_Star_Next_Xiaoguanqia_Extra_Check);
          Wukong_5_Star_Next_Xiaoguanqia_Extra_Check.parent = this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.node;
          var Script = Wukong_5_Star_Next_Xiaoguanqia_Extra_Check.getComponent("Wukong_5_Star_Next_Xiaoguanqia_Extra_Check");
          this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.Next_Xiaoguanqia_Extra_Check_Script.push(Script);
          Script.Pet = node;
          Script.Hero_Script = this;
        }
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
          if (this.Battle_Controller.Wukong_FS_Father.children.length > 0) for (var i = 0; i < this.Battle_Controller.Wukong_FS_Father.children.length; i++) null != this.Battle_Controller.Wukong_FS_Script[i] && this.Battle_Controller.Wukong_FS_Script[i].Start_Attack();
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 106.993;
        Bullet.y = this.node.y;
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        if (0 == this.Hero_Common.Shoot_Stage) {
          Bullet.scaleX = .5 * this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = .5 * this.Hero_Common.Bullet_Scale_Result;
        } else {
          this.Battle_Controller.Camera_Shake_Big();
          Bullet.scaleX = 2 * this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = 2 * this.Hero_Common.Bullet_Scale_Result;
        }
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        if (0 == this.Hero_Common.Shoot_Stage) {
          Bullet.scaleX = .5 * this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = .5 * this.Hero_Common.Bullet_Scale_Result;
        } else {
          this.Battle_Controller.Camera_Shake_Big();
          Bullet.scaleX = 2 * this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = 2 * this.Hero_Common.Bullet_Scale_Result;
          Bullet_Script.Bullet_Hp += 100;
        }
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Is_Doing_Something++;
        this.Animation.play("Wukong_Skill");
      },
      Skill_Shoot: function Skill_Shoot() {
        if (this.Battle_Controller.Wukong_FS_Father.children.length < this.Max_FS_Number) {
          var Bullet = cc.instantiate(this.Skill_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 60;
          Bullet.y = this.node.y;
          var Bullet_Script = Bullet.getComponent("Wukong_FS_Bullet");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          this.Battle_Controller.Hero_Star >= 2 && (Bullet_Script.Ini_Hp = 150);
          this.Battle_Controller.Hero_Star >= 3 && (Bullet_Script.Have_Destroy_Bomb = 1);
        } else {
          var Target = Math.floor(Math.random() * this.Battle_Controller.Wukong_FS_Father.children.length);
          if (null != this.Battle_Controller.Wukong_FS_Script[Target]) {
            this.Battle_Controller.Wukong_FS_Script[Target].Recovery();
            var Bullet = cc.instantiate(this.Wukong_FS_Recovery_Bullet);
            Bullet.parent = this.Bullet_Parent;
            Bullet.x = this.node.x + 60;
            Bullet.y = this.node.y;
            var Bullet_Script = Bullet.getComponent("Wukong_FS_Recovery_Bullet");
            Bullet_Script.Target = this.Battle_Controller.Wukong_FS_Script[Target].node;
          }
        }
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
        if (this.Battle_Controller.Wukong_FS_Father.children.length > 0) for (var i = 0; i < this.Battle_Controller.Wukong_FS_Father.children.length; i++) null != this.Battle_Controller.Wukong_FS_Script[i] && this.Battle_Controller.Wukong_FS_Script[i].Stop_Attack();
      },
      Create_Extra_Check: function Create_Extra_Check() {
        var Extra_Item = cc.instantiate(this.Wukong_Pet_Born_Extra_Check);
        Extra_Item.parent = this.Battle_Controller.Pet_Born_Extra_Check.node;
        var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Pet_Born_Extra_Check.Pet_Born_Extra_Check_Script.push(Extra_Item_Script);
        Extra_Item_Script.Battle_Controller = this.Battle_Controller;
        var Extra_Item = cc.instantiate(this.Wukong_Pet_Dead_Extra_Check);
        Extra_Item.parent = this.Battle_Controller.Pet_Dead_Extra_Check.node;
        var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Pet_Dead_Extra_Check.Pet_Dead_Extra_Check_Script.push(Extra_Item_Script);
        Extra_Item_Script.Battle_Controller = this.Battle_Controller;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Xiake_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e17b0cQnYRGPJRNM+PaRKaR", "Xiake_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiake_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fefd9NRVNNNGYV5jG4hPM1c", "Xiake_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Xiake").getComponent("Xiake");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiake_Five_Star_Sprint_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9d580q05MhJY5TEveFrz2Cv", "Xiake_Five_Star_Sprint_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Hero_Script: cc.Node
      },
      Check: function Check() {
        this.Hero_Script.Create_Fire_Star_Sprint_Sword();
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiake_Five_Star_Sprint_Sword: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b5ccxEKEBNVryjydwVpjAm", "Xiake_Five_Star_Sprint_Sword");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Speed: 1500,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Particle_Parent: cc.Node,
        Enemy_Parent: cc.Node,
        Target: cc.Node,
        Follow_Enemy_Schedule: cc.Schedule,
        RigidBody: cc.RigidBody,
        PhysicsBoxCollider: cc.PhysicsBoxCollider,
        Time_Too_Long: 0
      },
      start: function start() {
        this.Particle_Parent = this.Hero_Bullet_Common.Battle_Controller.Particle_Parent;
        this.Enemy_Parent = this.Hero_Bullet_Common.Battle_Controller.Enemy_Parent;
        this.Follow_Enemy_Schedule = function() {
          if (null == this.Target || "" == this.Target.name) if (this.Enemy_Parent.children.length > 0) this.Target = this.Enemy_Parent.children[Math.floor(Math.random() * this.Enemy_Parent.children.length)]; else {
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
            cc.tween(this.node).delay(1e-5).to(Math.abs(0 - this.node.angle) / 80, {
              angle: 0
            }, {
              easing: "quadOut"
            }).start();
          } else if (0 == this.Time_Too_Long) {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
            cc.tween(this.node).delay(1e-5).to(Math.abs(radian / Math.PI * 180 - 180 - this.node.angle) / 80, {
              angle: radian / Math.PI * 180 - 180
            }, {
              easing: "quadOut"
            }).start();
          } else {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.node.angle = radian / Math.PI * 180 - 180;
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
          }
        };
        this.Shoot();
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      },
      Shoot: function Shoot() {
        this.node.parent = this.Hero_Bullet_Common.Battle_Controller.Hero_Bullet_Parent;
        this.PhysicsBoxCollider.enabled = true;
        this.schedule(this.Follow_Enemy_Schedule, .01);
        this.scheduleOnce(function() {
          this.Time_Too_Long = 1;
        }, 3);
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Xiake_Skill_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "683e4wQGQRL+5gTtsFxGDg0", "Xiake_Skill_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Shoot_Particle: cc.Prefab,
        RigidBody: cc.RigidBody,
        PhysicsBoxCollider: cc.PhysicsBoxCollider
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Go: function Go() {
        this.RigidBody.linearVelocity = cc.v2(3e4, 0);
        this.PhysicsBoxCollider.enabled = true;
        this.Hero_Bullet_Common.Battle_Controller.Camera_Shake_Medium();
        var Hit_Smoke = cc.instantiate(this.Shoot_Particle);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x - 60;
        Hit_Smoke.y = this.node.y;
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Xiake_Sprint_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2469d3fF5ZE74lqc3+Q0ZCr", "Xiake_Sprint_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Hero_Script: cc.Node
      },
      Check: function Check() {
        this.Hero_Script.Create_Sprint_Sword();
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiake_Sprint_Sword: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "90759oKgY1KZK6yHzpO0Nk3", "Xiake_Sprint_Sword");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    var Follow_Hero_Item_Common = require("Follow_Hero_Item_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Speed: 1500,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Particle_Parent: cc.Node,
        Enemy_Parent: cc.Node,
        Target: cc.Node,
        Follow_Enemy_Schedule: cc.Schedule,
        RigidBody: cc.RigidBody,
        Follow_Hero_Item_Common: Follow_Hero_Item_Common,
        PhysicsBoxCollider: cc.PhysicsBoxCollider,
        Time_Too_Long: 0
      },
      start: function start() {
        this.Particle_Parent = this.Hero_Bullet_Common.Battle_Controller.Particle_Parent;
        this.Enemy_Parent = this.Hero_Bullet_Common.Battle_Controller.Enemy_Parent;
        this.Follow_Enemy_Schedule = function() {
          if (null == this.Target || "" == this.Target.name) if (this.Enemy_Parent.children.length > 0) this.Target = this.Enemy_Parent.children[Math.floor(Math.random() * this.Enemy_Parent.children.length)]; else {
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
            cc.tween(this.node).delay(1e-5).to(Math.abs(0 - this.node.angle) / 80, {
              angle: 0
            }, {
              easing: "quadOut"
            }).start();
          } else if (0 == this.Time_Too_Long) {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
            cc.tween(this.node).delay(1e-5).to(Math.abs(radian / Math.PI * 180 - 180 - this.node.angle) / 80, {
              angle: radian / Math.PI * 180 - 180
            }, {
              easing: "quadOut"
            }).start();
          } else {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.node.angle = radian / Math.PI * 180 - 180;
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
          }
        };
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      },
      Shoot: function Shoot() {
        this.node.parent = this.Hero_Bullet_Common.Battle_Controller.Hero_Bullet_Parent;
        this.Follow_Hero_Item_Common.Stop_Follow();
        this.PhysicsBoxCollider.enabled = true;
        this.schedule(this.Follow_Enemy_Schedule, .01);
        this.scheduleOnce(function() {
          this.Time_Too_Long = 1;
        }, 3);
      }
    });
    cc._RF.pop();
  }, {
    Follow_Hero_Item_Common: "Follow_Hero_Item_Common",
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Xiake: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7e5bbqpFkJLwLO8fMhU1PdV", "Xiake");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Skill_Bullet_Prefab: cc.Prefab,
        Xiake_Sprint_Extra_Check_Prefab: cc.Prefab,
        Sprint_Sword_Prefab: cc.Prefab,
        Sprint_Swrod: [ cc.Node ],
        Max_Sprint_Sword_Number: 5,
        Xiake_Five_Star_Sprint_Extra_Check_Prefab: cc.Prefab,
        Xiake_Five_Star_Sprint_Sword_Prefab: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Create_Sprint_Extra_Check();
        this.Battle_Controller.Hero_Star >= 3 && (this.Battle_Controller.Sprint_Time = (10 * this.Battle_Controller.Sprint_Time + 2) / 10);
        this.Battle_Controller.Hero_Star >= 4 && (this.Max_Sprint_Sword_Number = 10);
        if (this.Battle_Controller.Hero_Star >= 5) {
          var Extra_Item = cc.instantiate(this.Xiake_Five_Star_Sprint_Extra_Check_Prefab);
          Extra_Item.parent = this.Battle_Controller.Sprint_Extra_Check.node;
          var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
          this.Battle_Controller.Sprint_Extra_Check.Sprint_Extra_Check_Script.push(Extra_Item_Script);
          Extra_Item_Script.Battle_Controller = this.Battle_Controller;
          Extra_Item_Script.Hero_Script = this;
        }
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        var _this = this;
        this.Battle_Controller.Camera_Shake_Shoot();
        if (0 == this.Hero_Common.Shoot_Stage) {
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y - 10;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
          var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
          Attack_Smoke.parent = this.Particle_Parent;
          Attack_Smoke_White.parent = this.Particle_Parent;
          Attack_Fire_particle.parent = this.Particle_Parent;
          Attack_Smoke.x = this.node.x + 80;
          Attack_Smoke_White.x = this.node.x + 80;
          Attack_Fire_particle.x = this.node.x + 80;
          Attack_Smoke.y = this.node.y;
          Attack_Smoke_White.y = this.node.y;
          Attack_Fire_particle.y = this.node.y;
        } else cc.tween(this.node).call(function() {
          _this.Second_Normal_Shoot(_this.node.x + 251.399, _this.node.y);
        }).delay(.1).call(function() {
          _this.Second_Normal_Shoot(_this.node.x + 195.979, _this.node.y + 48.191);
          _this.Second_Normal_Shoot(_this.node.x + 195.979, _this.node.y - 48.191);
        }).delay(.1).call(function() {
          _this.Second_Normal_Shoot(_this.node.x + 195.979, _this.node.y);
        }).delay(.1).call(function() {
          _this.Second_Normal_Shoot(_this.node.x + 104.415, _this.node.y + 48.191);
          _this.Second_Normal_Shoot(_this.node.x + 104.415, _this.node.y - 48.191);
        }).delay(.1).call(function() {
          _this.Second_Normal_Shoot(_this.node.x + 104.415, _this.node.y + 90);
          _this.Second_Normal_Shoot(_this.node.x + 104.415, _this.node.y - 90);
        }).start();
        this.Sprint_Sword_Shoot();
      },
      Second_Normal_Shoot: function Second_Normal_Shoot(x, y) {
        var Bullet = cc.instantiate(this.Skill_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = x;
        Bullet.y = y;
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = Math.ceil(1.2 * this.Hero_Common.Attack_Result);
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Is_Doing_Something++;
        this.Hero_Common.Skill_Picture();
      },
      Skill_Shoot: function Skill_Shoot() {
        this.Animation.play("Xiake_Skill");
      },
      Skill_Shoot_Sword: function Skill_Shoot_Sword() {
        var y = this.node.y + Math.floor(176 * Math.random() - 95);
        var Bullet = cc.instantiate(this.Skill_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 30;
        Bullet.y = y;
        this.Hero_Common.Count_Is_Skill = 1;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = Math.ceil(1.2 * this.Hero_Common.Attack_Result);
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
      },
      Skill_End: function Skill_End() {
        this.Animation.play("Xiake_Skill_End");
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      },
      Create_Sprint_Extra_Check: function Create_Sprint_Extra_Check() {
        var Extra_Item = cc.instantiate(this.Xiake_Sprint_Extra_Check_Prefab);
        Extra_Item.parent = this.Battle_Controller.Sprint_Extra_Check.node;
        var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Sprint_Extra_Check.Sprint_Extra_Check_Script.push(Extra_Item_Script);
        Extra_Item_Script.Battle_Controller = this.Battle_Controller;
        Extra_Item_Script.Hero_Script = this;
      },
      Create_Sprint_Sword: function Create_Sprint_Sword() {
        if (this.Sprint_Swrod.length < this.Max_Sprint_Sword_Number) {
          var Bullet = cc.instantiate(this.Sprint_Sword_Prefab);
          Bullet.parent = this.Battle_Controller.Follow_Hero_Item;
          var Position = Bullet.parent.children.indexOf(Bullet) + 1;
          Bullet.x = this.node.x - 80 * Position;
          Bullet.y = this.node.y;
          this.Hero_Common.Count_Is_Skill = -1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          this.Battle_Controller.Hero_Star >= 2 && (Bullet_Script.Attack += Math.ceil(.5 * Bullet_Script.Attack));
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Xiake_Sprint_Sword = Bullet.getComponent("Xiake_Sprint_Sword");
          this.Sprint_Swrod.push(Xiake_Sprint_Sword);
          Xiake_Sprint_Sword.Follow_Hero_Item_Common.Hero_Target = this.node;
          if (this.Sprint_Swrod.length < this.Max_Sprint_Sword_Number && this.Battle_Controller.Hero_Star >= 4) {
            var Bullet = cc.instantiate(this.Sprint_Sword_Prefab);
            Bullet.parent = this.Battle_Controller.Follow_Hero_Item;
            var Position = Bullet.parent.children.indexOf(Bullet) + 1;
            Bullet.x = this.node.x - 80 * Position;
            Bullet.y = this.node.y;
            this.Hero_Common.Count_Is_Skill = -1;
            this.Hero_Common.Attack_Count();
            this.Hero_Common.Bullet_Scale_Count();
            Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
            Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
            var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
            Bullet_Script.Battle_Controller = this.Battle_Controller;
            Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
            Bullet_Script.Attack = this.Hero_Common.Attack_Result;
            this.Battle_Controller.Hero_Star >= 4 && (Bullet_Script.Attack += Math.ceil(.5 * Bullet_Script.Attack));
            Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
            Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
            var Xiake_Sprint_Sword = Bullet.getComponent("Xiake_Sprint_Sword");
            this.Sprint_Swrod.push(Xiake_Sprint_Sword);
            Xiake_Sprint_Sword.Follow_Hero_Item_Common.Hero_Target = this.node;
          }
        }
      },
      Create_Fire_Star_Sprint_Sword: function Create_Fire_Star_Sprint_Sword() {
        var Bullet = cc.instantiate(this.Xiake_Five_Star_Sprint_Sword_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 50;
        Bullet.y = this.node.y;
        Bullet.angle = 0;
        this.Hero_Common.Count_Is_Skill = -1;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        this.Battle_Controller.Hero_Star >= 2 && (Bullet_Script.Attack += Math.ceil(.5 * Bullet_Script.Attack));
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Bullet = cc.instantiate(this.Xiake_Five_Star_Sprint_Sword_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 50;
        Bullet.y = this.node.y;
        Bullet.angle = 45;
        this.Hero_Common.Count_Is_Skill = -1;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        this.Battle_Controller.Hero_Star >= 2 && (Bullet_Script.Attack += Math.ceil(.5 * Bullet_Script.Attack));
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Bullet = cc.instantiate(this.Xiake_Five_Star_Sprint_Sword_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 50;
        Bullet.y = this.node.y;
        Bullet.angle = -45;
        this.Hero_Common.Count_Is_Skill = -1;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        this.Battle_Controller.Hero_Star >= 2 && (Bullet_Script.Attack += Math.ceil(.5 * Bullet_Script.Attack));
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
      },
      Sprint_Sword_Shoot: function Sprint_Sword_Shoot() {
        if (this.Sprint_Swrod.length > 0) {
          for (var i = 0; i < this.Sprint_Swrod.length; i++) this.Sprint_Swrod[i].Shoot();
          this.Sprint_Swrod.splice(0, this.Sprint_Swrod.length);
        }
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Xiaoguanqia_End_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e9ce1/n4vZLRIijpAcdxNWX", "Xiaoguanqia_End_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Xiaoguanqia_End_Extra_Check_Prefab: [ cc.Prefab ],
        Xiaoguanqia_End_Extra_Check_Script: [ cc.Node ]
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiaoming_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a97fFKo9VLQrAZ8H6I2Fs3", "Xiaoming_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiaoming_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b8e5J1LL9PEb7qmVozC4Yl", "Xiaoming_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Xiaoming").getComponent("Xiaoming");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiaoming_Be_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3c8f4+WLw9NAb2xklvBgMWS", "Xiaoming_Be_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Attack_Addition: 5,
        Attack_Addition_Accumulate: 0
      },
      Check: function Check() {
        this.Battle_Controller.Common_Attack_Addition_Add(this.Attack_Addition);
        this.Attack_Addition_Accumulate += this.Attack_Addition;
        var Particle = cc.instantiate(this.Battle_Controller.Red_Up_Particle);
        Particle.parent = this.Battle_Controller.Hero_Script.Hero_Common.Buff_Particle;
        Particle.x = 0;
        Particle.y = 0;
        var Particle = cc.instantiate(this.Battle_Controller.Up_Power_Particle);
        Particle.parent = this.Battle_Controller.Hero_Script.Hero_Common.Buff_Particle;
        Particle.x = 0;
        Particle.y = 0;
        var Particle = cc.instantiate(this.Battle_Controller.Surround_Thunder);
        Particle.parent = this.Battle_Controller.Hero_Script.Hero_Common.Buff_Particle;
        Particle.x = 0;
        Particle.y = 0;
        var Number = cc.instantiate(this.Battle_Controller.Recovery_Number_Label);
        Number.parent = this.Battle_Controller.Hero_Script.Hero_Common.Buff_Particle;
        Number.color = cc.color(203, 78, 78);
        Number.getComponent(cc.Label).string = "\u653b\u51fb\u529b\u63d0\u5347";
        Number.x = 0;
        Number.y = 100;
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiaoming_Extra_Skill_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e9be3WPuupOuYiVbbWhRmyk", "Xiaoming_Extra_Skill_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        BG_Sprite: cc.Sprite,
        Is_Cooling: 0,
        Cold_Time: 1
      },
      Skill_Start: function Skill_Start() {
        this.Battle_Controller.Hero_Script.Is_Doing_Something++;
        this.Battle_Controller.Hero_Script.Animation.play("Xiaoming_Special_Skill");
        this.Battle_Controller.Hero_Script.Special_Skill_Picture_Show();
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiaoming_Next_Xiaoguanqia_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a9f8dBB9DFKrrWhNx98ZBt/", "Xiaoming_Next_Xiaoguanqia_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Xiaoming_Be_Hit_Extra_Check: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Common_Attack_Addition_Reduce(this.Xiaoming_Be_Hit_Extra_Check.Attack_Addition_Accumulate);
        this.Xiaoming_Be_Hit_Extra_Check.Attack_Addition_Accumulate = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiaoming_Recovery_Bullet_Hit_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9e605AZR/1MO4ubj03pGfc1", "Xiaoming_Recovery_Bullet_Hit_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check(Enemy) {
        this.Battle_Controller.Hero_Script.Hero_Common.Recovery(2);
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiaoming_Skill_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "aad17BNjrdB8JSSyVThU4Ux", "Xiaoming_Skill_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Hero_Bullet_Common: Hero_Bullet_Common,
        Xiaoming_Skill_Star_Prefab: cc.Prefab,
        Star_SpeedX: [ cc.Integer ],
        Star_SpeedY: [ cc.Integer ],
        Speed: 2e4,
        RigidBody: cc.RigidBody
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Star_SpeedX = [ -1500, -1500, 0, 1500, 1500, 1500, 0, -1500 ];
        this.Star_SpeedY = [ 0, 1500, 1500, 1500, 0, -1500, -1500, -1500 ];
      },
      Set_Speed: function Set_Speed() {
        this.RigidBody.enabledContactListener = true;
        this.RigidBody.linearVelocity = cc.v2(this.Speed, 0);
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
        var Gold_Shoot_Fire = cc.instantiate(this.Battle_Controller.Gold_Shoot_Fire);
        Gold_Shoot_Fire.parent = this.Particle_Parent;
        Gold_Shoot_Fire.x = this.node.x - 100;
        Gold_Shoot_Fire.y = this.node.y;
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
        for (var i = 0; i < 8; i++) {
          var Bullet = cc.instantiate(this.Xiaoming_Skill_Star_Prefab);
          Bullet.parent = this.Battle_Controller.Hero_Bullet_Parent;
          Bullet.x = this.node.x;
          Bullet.y = this.node.y;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Bullet_Common.Jing_Jie;
          Bullet_Script.Attack = this.Hero_Bullet_Common.Attack;
          Bullet_Script.Crit_Rate = this.Hero_Bullet_Common.Crit_Rate;
          Bullet_Script.Crit_Mult = this.Hero_Bullet_Common.Crit_Mult;
          var RigidBody = Bullet.getComponent(cc.RigidBody);
          RigidBody.linearVelocity = cc.v2(this.Star_SpeedX[i], this.Star_SpeedY[i]);
        }
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        "Enemy_Bullet" == otherCollider.node.group && otherCollider.node.getComponent("Enemy_Bullet_Common").Be_Destroy();
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Xiaoming_Skill_Star_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4c0f2Kjz6xOJK2Yd/jjbMLj", "Xiaoming_Skill_Star_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Collider: cc.PhysicsBoxCollider,
        Destroy_Progress: 0
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      Star_Destroy_Self: function Star_Destroy_Self() {
        this.Destroy_Progress++;
        3 == this.Destroy_Progress && this.node.destroy();
      },
      Open_Collider: function Open_Collider() {
        this.Collider.enabled = true;
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Xiaoming: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4717dEkowVGVpkzCP7ZTHq4", "Xiaoming");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Skill_Bullet_Prefab: cc.Prefab,
        Extra_Skill_Prefab: cc.Prefab,
        Is_Open_Area: 0,
        Area_Time: 10,
        Area_Tween: cc.Tween,
        Xiaoming_Recovery_Bullet_Hit_Extra_Check: cc.Prefab,
        Extra_Check_Item: cc.Node,
        Extra_Check_Item_Script: cc.Node,
        Xiaoming_Be_Hit_Extra_Check: cc.Prefab,
        Xiaoming_Next_Xiaoguanqia_Extra_Check: cc.Prefab,
        Old_Camera_X: 0,
        Old_Camera_Y: 0,
        Special_Skill_Picture_Prefab: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Create_Extra_Skill();
        this.Battle_Controller.Hero_Star >= 2 && (this.Area_Time += 5);
        if (this.Battle_Controller.Hero_Star >= 3) {
          var Xiaoming_Be_Hit_Extra_Check = cc.instantiate(this.Xiaoming_Be_Hit_Extra_Check);
          Xiaoming_Be_Hit_Extra_Check.parent = this.Battle_Controller.Hero_Be_Hit_Extra_Check.node;
          var Xiaoming_Be_Hit_Extra_Check_Script = Xiaoming_Be_Hit_Extra_Check.getComponent(Xiaoming_Be_Hit_Extra_Check.name);
          this.Battle_Controller.Hero_Be_Hit_Extra_Check.Hero_Be_Hit_Extra_Check_Script.push(Xiaoming_Be_Hit_Extra_Check_Script);
          Xiaoming_Be_Hit_Extra_Check_Script.Battle_Controller = this.Battle_Controller;
          var Xiaoming_Next_Xiaoguanqia_Extra_Check = cc.instantiate(this.Xiaoming_Next_Xiaoguanqia_Extra_Check);
          Xiaoming_Next_Xiaoguanqia_Extra_Check.parent = this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.node;
          var Xiaoming_Next_Xiaoguanqia_Extra_Check_Script = Xiaoming_Next_Xiaoguanqia_Extra_Check.getComponent(Xiaoming_Next_Xiaoguanqia_Extra_Check.name);
          this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.Next_Xiaoguanqia_Extra_Check_Script.push(Xiaoming_Next_Xiaoguanqia_Extra_Check_Script);
          Xiaoming_Next_Xiaoguanqia_Extra_Check_Script.Battle_Controller = this.Battle_Controller;
          Xiaoming_Next_Xiaoguanqia_Extra_Check_Script.Xiaoming_Be_Hit_Extra_Check = Xiaoming_Be_Hit_Extra_Check_Script;
        }
        this.Battle_Controller.Hero_Star >= 4 && (this.Battle_Controller.Recovery_Extra_Percentage += 5);
        if (this.Battle_Controller.Hero_Star >= 5) {
          this.Battle_Controller.Full_Hp *= 2;
          this.Battle_Controller.Hp *= 2;
          this.Battle_Controller.Ini_Hp *= 2;
        }
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x;
        Bullet.y = this.node.y - 10;
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Is_Doing_Something++;
        this.Animation.play("Xiaoming_Skill");
        this.Can_Injured--;
        this.Battle_Controller.Stop_Enemy_Bullet();
        this.Battle_Controller.Stop_Enemy_Move();
        this.Can_Move--;
        this.Battle_Controller.Camera_Can_Follow = 0;
        this.Old_Camera_X = this.Battle_Controller.Camera.node.x;
        this.Old_Camera_Y = this.Battle_Controller.Camera.node.y;
        cc.Tween.stopAllByTarget(this.Battle_Controller.Camera.node);
        cc.tween(this.Battle_Controller.Camera.node).to(.2, {
          position: cc.v2(this.node.x, this.node.y)
        }, {
          easing: "quadOut"
        }).start();
        cc.Tween.stopAllByTarget(this.Battle_Controller.Camera);
        cc.tween(this.Battle_Controller.Camera).to(.2, {
          zoomRatio: 2
        }, {
          easing: "quadOut"
        }).start();
        var Air_Sbsorption = cc.instantiate(this.Battle_Controller.Air_Sbsorption);
        Air_Sbsorption.parent = this.Battle_Controller.Particle_Parent;
        Air_Sbsorption.setPosition(this.node.x, this.node.y);
        this.schedule(function() {
          var Skill_Up_Fire = cc.instantiate(this.Battle_Controller.Skill_Up_Fire);
          Skill_Up_Fire.parent = this.Battle_Controller.Particle_Parent;
          Skill_Up_Fire.setPosition(this.node.x + Math.floor(112 * Math.random() - 33), this.node.y - Math.floor(38 * Math.random() + 7));
          var Skill_Up_Fire_Script = Skill_Up_Fire.getComponent("Skill_Up_Fire");
          Skill_Up_Fire_Script.Start_Set();
          var Skill_Up_Fire = cc.instantiate(this.Battle_Controller.Skill_Up_Fire);
          Skill_Up_Fire.parent = this.Battle_Controller.Particle_Parent;
          Skill_Up_Fire.setPosition(this.node.x + Math.floor(112 * Math.random() - 33), this.node.y - Math.floor(38 * Math.random() + 7));
          var Skill_Up_Fire_Script = Skill_Up_Fire.getComponent("Skill_Up_Fire");
          Skill_Up_Fire_Script.Start_Set();
          var Skill_Up_Fire = cc.instantiate(this.Battle_Controller.Skill_Up_Fire);
          Skill_Up_Fire.parent = this.Battle_Controller.Particle_Parent;
          Skill_Up_Fire.setPosition(this.node.x + Math.floor(112 * Math.random() - 33), this.node.y - Math.floor(38 * Math.random() + 7));
          var Skill_Up_Fire_Script = Skill_Up_Fire.getComponent("Skill_Up_Fire");
          Skill_Up_Fire_Script.Start_Set();
          var Skill_Up_Fire = cc.instantiate(this.Battle_Controller.Skill_Up_Fire);
          Skill_Up_Fire.parent = this.Battle_Controller.Particle_Parent;
          Skill_Up_Fire.setPosition(this.node.x + Math.floor(112 * Math.random() - 33), this.node.y - Math.floor(38 * Math.random() + 7));
          var Skill_Up_Fire_Script = Skill_Up_Fire.getComponent("Skill_Up_Fire");
          Skill_Up_Fire_Script.Start_Set();
          var Skill_Up_Fire = cc.instantiate(this.Battle_Controller.Skill_Up_Fire);
          Skill_Up_Fire.parent = this.Battle_Controller.Particle_Parent;
          Skill_Up_Fire.setPosition(this.node.x + Math.floor(231 * Math.random() - 80), this.node.y - Math.floor(194 * Math.random() + 7));
          var Skill_Up_Fire_Script = Skill_Up_Fire.getComponent("Skill_Up_Fire");
          Skill_Up_Fire_Script.Start_Set();
          this.Battle_Controller.Camera_Shake_Big();
          var node = cc.instantiate(this.Battle_Controller.Skill_Follow_Smoke);
          node.parent = this.Battle_Controller.Particle_Parent;
          node.setPosition(this.node.x + Math.floor(2001 * Math.random() - 1e3), this.node.y + Math.floor(2001 * Math.random() - 1e3));
          var node_Script = node.getComponent("Skill_Follow_Smoke");
          node_Script.Target = this.node;
          node_Script.Start_Set();
          var Particle = cc.instantiate(this.Battle_Controller.Skill_Follow_Particle);
          Particle.parent = this.Battle_Controller.Particle_Parent;
          Particle.setPosition(this.node.x + Math.floor(2001 * Math.random() - 1e3), this.node.y + Math.floor(2001 * Math.random() - 1e3));
          var Particle_Script = Particle.getComponent("Skill_Follow_Particle");
          Particle_Script.Target = this.node;
          Particle_Script.Start_Set();
        }, .025, 20, 0);
        this.schedule(function() {
          var Bo = cc.instantiate(this.Battle_Controller.Bo_White);
          Bo.parent = this.Battle_Controller.Particle_Parent;
          Bo.setPosition(this.node.x, this.node.y);
        }, .1, 5, 0);
        this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
        this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 200));
      },
      Skill_Shoot: function Skill_Shoot() {
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Skill_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 444.966;
        Bullet.y = this.node.y - 10;
        this.Hero_Common.Count_Is_Skill = 1;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Xiaoming_Skill_Bullet_Script = Bullet.getComponent("Xiaoming_Skill_Bullet");
        Xiaoming_Skill_Bullet_Script.Battle_Controller = this.Battle_Controller;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke.x = this.node.x + 80;
        Attack_Smoke_White.x = this.node.x + 80;
        Attack_Fire_particle.x = this.node.x + 80;
        Attack_Smoke.y = this.node.y;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      },
      Restore_Camera_And_BG: function Restore_Camera_And_BG() {
        var _this = this;
        this.Battle_Controller.Restore_Enemy_Bullet();
        this.Battle_Controller.Restore_Enemy_Move();
        this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
        this.Battle_Controller.BG_Black_Animation.node.runAction(cc.fadeTo(.3, 0));
        cc.Tween.stopAllByTarget(this.Battle_Controller.Camera.node);
        cc.tween(this.Battle_Controller.Camera.node).to(.2, {
          position: cc.v2(this.Old_Camera_X, this.Old_Camera_Y)
        }, {
          easing: "quadOut"
        }).call(function() {
          _this.Can_Move++;
          _this.Can_Injured++;
          _this.Battle_Controller.Camera_Can_Follow = 1;
        }).start();
        cc.Tween.stopAllByTarget(this.Battle_Controller.Camera);
        cc.tween(this.Battle_Controller.Camera).to(.05, {
          zoomRatio: .5
        }, {
          easing: "quadOut"
        }).to(.1, {
          zoomRatio: 1.3
        }, {
          easing: "quadOut"
        }).to(.2, {
          zoomRatio: .8
        }, {
          easing: "quadOut"
        }).to(1, {
          zoomRatio: 1
        }, {
          easing: "quadOut"
        }).start();
        this.Battle_Controller.Camera_Follow.Follow_Start();
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      },
      Create_Extra_Skill: function Create_Extra_Skill() {
        if (this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Number < this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Limit) {
          var Extra_Skill_Button = cc.instantiate(this.Extra_Skill_Prefab);
          var Script = Extra_Skill_Button.getComponent("Xiaoming_Extra_Skill_Button");
          Script.Battle_Controller = this.Battle_Controller;
          switch (this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Number) {
           case 0:
            this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_1.parent.active = true;
            Extra_Skill_Button.parent = this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_1;
            this.Battle_Controller.Extra_Skill_Script.U_Skill = Script;
            this.Battle_Controller.Extra_Skill_Script.Set_U_Skill();
            break;

           case 1:
            this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_2.parent.active = true;
            Extra_Skill_Button.parent = this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_2;
            this.Battle_Controller.Extra_Skill_Script.I_Skill = Script;
            this.Battle_Controller.Extra_Skill_Script.Set_I_Skill();
            break;

           case 2:
            this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_3.parent.active = true;
            Extra_Skill_Button.parent = this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Parent_3;
            this.Battle_Controller.Extra_Skill_Script.O_Skill = Script;
            this.Battle_Controller.Extra_Skill_Script.Set_O_Skill();
            break;

           default:
            console.log("Extra_Skill_Error");
          }
          Extra_Skill_Button.setPosition(0, 0);
          this.Battle_Controller.Extra_Skill_Script.Extra_Skill_Number++;
        }
      },
      Special_Skill_Picture_Show: function Special_Skill_Picture_Show() {
        this.Battle_Controller.Stop_Enemy_Bullet();
        this.Battle_Controller.Stop_Enemy_Move();
        this.Can_Injured--;
        var Skill_Picture = cc.instantiate(this.Special_Skill_Picture_Prefab);
        Skill_Picture.parent = this.Battle_Controller.Hero_Skill_Picture_Parent;
        Skill_Picture.setPosition(0, 0);
        Skill_Picture.getComponent("Hero_Skill_Picture_Common").Hero_Script = this;
      },
      Skill_Picture_End: function Skill_Picture_End() {
        this.Battle_Controller.Restore_Enemy_Bullet();
        this.Battle_Controller.Restore_Enemy_Move();
        this.Can_Injured++;
        this.Special_Skill();
      },
      Special_Skill: function Special_Skill() {
        var _this2 = this;
        if (0 == this.Is_Open_Area) {
          this.Is_Open_Area = 1;
          this.Battle_Controller.Enemy_Bullet_Speed_Ratio = .5 * this.Battle_Controller.Enemy_Bullet_Speed_Ratio;
          if (null != this.Battle_Controller.Enemy_Bullet_Parent.children) for (var i = 0; i < this.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) this.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common").Set_Speed();
          this.Extra_Check_Item = cc.instantiate(this.Xiaoming_Recovery_Bullet_Hit_Extra_Check);
          this.Extra_Check_Item.parent = this.Battle_Controller.Bullet_Hit_Extra_Check.node;
          this.Extra_Check_Item_Script = this.Extra_Check_Item.getComponent(this.Extra_Check_Item.name);
          this.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script.push(this.Extra_Check_Item_Script);
          this.Extra_Check_Item_Script.Battle_Controller = this.Battle_Controller;
        }
        this.Battle_Controller.Area_Parent.children[0].active = true;
        this.Battle_Controller.Area_Parent.children[0].opacity = 0;
        null != this.Area_Tween && this.Area_Tween.stop();
        this.Area_Tween = cc.tween(this.Battle_Controller.Area_Parent.children[0]).to(1, {
          opacity: 255
        }).delay(this.Area_Time - 1.5).to(.5, {
          opacity: 0
        }).call(function() {
          _this2.Is_Open_Area = 0;
          _this2.Battle_Controller.Enemy_Bullet_Speed_Ratio = 2 * _this2.Battle_Controller.Enemy_Bullet_Speed_Ratio;
          if (null != _this2.Battle_Controller.Enemy_Bullet_Parent.children) for (var i = 0; i < _this2.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) _this2.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common").Set_Speed();
          _this2.Battle_Controller.Area_Parent.children[0].active = false;
          if (null != _this2.Extra_Check_Item) {
            _this2.Extra_Check_Item.destroy();
            for (var i = 0; i < _this2.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script.length; i++) if (_this2.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script[i] == _this2.Extra_Check_Item_Script) {
              _this2.Battle_Controller.Bullet_Hit_Extra_Check.Normal_Bullet_Extra_Check_Script.splice(i, 1);
              break;
            }
          }
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Yumo_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7410e9Ez9pHx4MAsDGt69Cv", "Yumo_Attack_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Sprite: cc.Sprite,
        SpriteFrame: [ cc.SpriteFrame ],
        Ice_Probability: 20,
        Yumo_4_Star: 0
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Sprite.spriteFrame = this.SpriteFrame[Math.floor(Math.random() * this.SpriteFrame.length)];
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy" == otherCollider.node.group) {
          var Enemy_Common = otherCollider.node.getComponent("Enemy_Common");
          this.Hero_Bullet_Common.Battle_Controller.Battle_Audio_Controller.Other(1, .05);
          this.Hero_Bullet_Common.Battle_Controller.Probability_Result_Create();
          this.Hero_Bullet_Common.Battle_Controller.Probability_Result < this.Ice_Probability && Enemy_Common.Start_Ice();
          this.Hero_Bullet_Common.Battle_Controller.Hero_Star >= 3 && 1 == Enemy_Common.Is_Ice && Enemy_Common.Injured(this.Hero_Bullet_Common.Jing_Jie, Math.ceil(.5 * this.Hero_Bullet_Common.Attack), 0, 1, 0);
        } else if (1 == this.Yumo_4_Star && "Enemy_Bullet" == otherCollider.node.group) {
          var Enemy_Bullet_Common = otherCollider.node.getComponent("Enemy_Bullet_Common");
          null != Enemy_Bullet_Common && Enemy_Bullet_Common.Be_Destroy();
        }
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Yumo_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "18be3kHTEZCnYo/YCU3jYYI", "Yumo_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Yumo").getComponent("Yumo");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  "Yumo_Dragon_Bullet - 001": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c2638n86MVPKqRj7EruuwbA", "Yumo_Dragon_Bullet - 001");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Speed: 1500,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Bo_Blue: cc.Prefab,
        Particle_Parent: cc.Node,
        Ice_Probability: 20,
        Yumo_4_Star: 0,
        Angle_Change: 5,
        Is_Turn: 0,
        Scale_Change: .01
      },
      start: function start() {
        this.Particle_Parent = this.Hero_Bullet_Common.Battle_Controller.Particle_Parent;
        this.Enemy_Parent = this.Hero_Bullet_Common.Battle_Controller.Enemy_Parent;
        this.Hero_Bullet_Common.Ini_Speed = 0;
        this.Hero_Bullet_Common.Ini_Speed_Y = 4e3;
        this.Hero_Bullet_Common.Set_Speed();
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onBeginContact: function onBeginContact(contact, selfCollider, otherCollider) {
        if ("Enemy" == otherCollider.node.group) {
          var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
          Hit_Efffect.parent = this.Particle_Parent;
          Hit_Efffect.x = otherCollider.node.x;
          Hit_Efffect.y = otherCollider.node.y;
          var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
          Hit_Particle.parent = this.Particle_Parent;
          Hit_Particle.x = otherCollider.node.x;
          Hit_Particle.y = otherCollider.node.y;
          var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
          Hit_Smoke.parent = this.Particle_Parent;
          Hit_Smoke.x = otherCollider.node.x;
          Hit_Smoke.y = otherCollider.node.y;
          var Hit_Efffect = cc.instantiate(this.Bo_Blue);
          Hit_Efffect.parent = this.Particle_Parent;
          Hit_Efffect.angle = 90;
          Hit_Efffect.x = otherCollider.node.x;
          Hit_Efffect.y = otherCollider.node.y;
          var Enemy_Common = otherCollider.node.getComponent("Enemy_Common");
          this.Hero_Bullet_Common.Battle_Controller.Battle_Audio_Controller.Other(1, .05);
          this.Hero_Bullet_Common.Battle_Controller.Probability_Result_Create();
          this.Hero_Bullet_Common.Battle_Controller.Probability_Result < this.Ice_Probability && Enemy_Common.Start_Ice();
          this.Hero_Bullet_Common.Battle_Controller.Hero_Star >= 3 && 1 == Enemy_Common.Is_Ice && Enemy_Common.Injured(this.Hero_Bullet_Common.Jing_Jie, Math.ceil(.5 * this.Hero_Bullet_Common.Attack), 0, 1, 0);
        } else if (1 == this.Yumo_4_Star && "Enemy_Bullet" == otherCollider.node.group) {
          var Enemy_Bullet_Common = otherCollider.node.getComponent("Enemy_Bullet_Common");
          null != Enemy_Bullet_Common && Enemy_Bullet_Common.Be_Destroy();
        }
      },
      update: function update(dt) {
        if (this.node.y >= 16978.508 && 0 == this.Is_Turn) {
          this.Is_Turn = 1;
          this.node.x = 1450;
          this.node.angle = -90;
        }
        console.log(this.Hero_Bullet_Common.RigidBody.linearVelocity.y);
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Yumo_Dragon_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "07712A/oGNIgKedbWEtHJgr", "Yumo_Dragon_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Jing_Jie: 0,
        Attack: 0,
        Crit_Rate: 0,
        Crit_Mult: 0,
        Particle: [ cc.ParticleSystem ],
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Particle_Parent: cc.Node,
        Ice_Probability: 20,
        Yumo_4_Star: 0,
        Is_Turn: 0,
        Is_Bomb: 0,
        Light_Beam: cc.Prefab,
        Bomb_Particle: cc.Prefab,
        Bomb_Smoke: cc.Prefab,
        Camera_Shake_Medium: cc.Schedule,
        Camera_Shake_Big: cc.Schedule,
        Attack_Schedule: cc.Schedule
      },
      start: function start() {
        this.Particle_Parent = this.Battle_Controller.Particle_Parent;
        this.Camera_Shake_Medium = function() {
          this.Battle_Controller.Camera_Shake_Medium();
        };
        this.schedule(this.Camera_Shake_Medium, .05);
        this.Camera_Shake_Big = function() {
          this.Battle_Controller.Camera_Shake_Big();
        };
        this.Attack_Schedule = function() {
          if (this.Battle_Controller.Enemy_Bullet_Parent.children.length > 0) for (var i = 0; i < this.Battle_Controller.Enemy_Bullet_Parent.children.length; i++) if (null != this.Battle_Controller.Enemy_Bullet_Parent.children[i]) {
            var Enemy_Bullet_Common = this.Battle_Controller.Enemy_Bullet_Parent.children[i].getComponent("Enemy_Bullet_Common");
            null != Enemy_Bullet_Common && Enemy_Bullet_Common.Be_Destroy();
          }
          if (this.Battle_Controller.Enemy_Parent.children.length > 0) for (var i = 0; i < this.Battle_Controller.Enemy_Parent.children.length; i++) if (null != this.Battle_Controller.Enemy_Parent.children[i]) {
            var Enemy_Common = this.Battle_Controller.Enemy_Parent.children[i].getComponent("Enemy_Common");
            null != Enemy_Common && Enemy_Common.Injured(this.Jing_Jie, this.Attack, this.Crit_Rate, this.Crit_Mult, 10);
            var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
            Hit_Efffect.parent = this.Particle_Parent;
            Hit_Efffect.x = this.Battle_Controller.Enemy_Parent.children[i].x + Enemy_Common.Image_Offset_X;
            Hit_Efffect.y = this.Battle_Controller.Enemy_Parent.children[i].y + Enemy_Common.Image_Offset_Y;
            var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
            Hit_Particle.parent = this.Particle_Parent;
            Hit_Particle.x = this.Battle_Controller.Enemy_Parent.children[i].x + Enemy_Common.Image_Offset_X;
            Hit_Particle.y = this.Battle_Controller.Enemy_Parent.children[i].y + Enemy_Common.Image_Offset_Y;
            var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
            Hit_Smoke.parent = this.Particle_Parent;
            Hit_Smoke.x = this.Battle_Controller.Enemy_Parent.children[i].x + Enemy_Common.Image_Offset_X;
            Hit_Smoke.y = this.Battle_Controller.Enemy_Parent.children[i].y + Enemy_Common.Image_Offset_Y;
          }
        };
      },
      update: function update(dt) {
        if (this.node.y >= 3e4 && 0 == this.Is_Turn) {
          this.Is_Turn = 1;
          this.node.angle = -90;
        }
        0 == this.Is_Turn ? this.node.y += 300 : this.node.y -= 800;
        if (this.node.y <= 11600 && 1 == this.Is_Turn && 0 == this.Is_Bomb) {
          this.Is_Bomb = 1;
          this.schedule(this.Camera_Shake_Big, .05);
          var Particle = cc.instantiate(this.Bomb_Particle);
          Particle.parent = this.Battle_Controller.Particle_Parent;
          Particle.setPosition(448.659, -924.061);
          var Particle = cc.instantiate(this.Bomb_Smoke);
          Particle.parent = this.Battle_Controller.Particle_Parent;
          Particle.setPosition(448.659, -924.061);
          var Particle = cc.instantiate(this.Light_Beam);
          Particle.parent = this.Battle_Controller.Particle_Parent;
          Particle.setPosition(448.659, -895.894);
          this.schedule(this.Attack_Schedule, .1, 10, 0);
        }
        if (this.node.y <= -17100 && 1 == this.Is_Bomb) {
          for (var i = 0; i < this.Particle.length; i++) {
            this.Particle[i].node.parent = this.Battle_Controller.Particle_Parent;
            this.Particle[i].duration = .5;
            console.log(this.Particle[i].node.parent);
            console.log(this.Battle_Controller.Particle_Parent);
          }
          this.unschedule(this.Camera_Shake_Big);
          this.unschedule(this.Camera_Shake_Medium);
          this.node.destroy();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Yumo_Next_Xiaoguanqia_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7cc9dBxxJVK3onhK82TQpAg", "Yumo_Next_Xiaoguanqia_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Yumo: cc.Node
      },
      start: function start() {},
      Check: function Check() {
        this.Yumo.Restore_Addition();
      }
    });
    cc._RF.pop();
  }, {} ],
  Yumo_Normal_Attack_After_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec7caH/KORNa7w4+Oe2jx51", "Yumo_Normal_Attack_After_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Yumo: cc.Node
      },
      start: function start() {},
      Check: function Check() {
        this.Yumo.Restore_Addition();
      }
    });
    cc._RF.pop();
  }, {} ],
  Yumo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c46bbOpWIRCVrxbK40E0gCj", "Yumo");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Particle: cc.Prefab,
        Ice_Probability: 20,
        Attack_Addition: 0,
        Ice_Probability_Addition: 0,
        Normal_Crit_Rate_Addition: 0,
        Normal_Bullet_Scale_Addition: 0,
        Fu_Water_Dragon: cc.Prefab,
        Yumo_Normal_Attack_After_Extra_Check: cc.Prefab,
        Yumo_Next_Xiaoguanqia_Extra_Check: cc.Prefab,
        Yumo_4_Star: 0,
        Dragon_Bullet: cc.Prefab,
        Skill_Schedule: cc.Schedule,
        Skill_Number: 0,
        Dragon_Smoke: cc.Prefab,
        Dragon_Coin: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        if (this.Battle_Controller.Hero_Star >= 2) {
          this.schedule(function() {
            for (var i = 0; i < 3; i++) {
              var Fu = cc.instantiate(this.Fu_Water_Dragon);
              Fu.parent = this.Battle_Controller.Fu_Parent;
              Fu.setPosition(Math.floor(1001 * Math.random() - 1500), Math.floor(1200 * Math.random() - 600));
              var Script = Fu.getComponent("Fu_Common");
              Script.Battle_Controller = this.Battle_Controller;
            }
          }, 10);
          var Yumo_Next_Xiaoguanqia_Extra_Check = cc.instantiate(this.Yumo_Next_Xiaoguanqia_Extra_Check);
          Yumo_Next_Xiaoguanqia_Extra_Check.parent = this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.node;
          var Script = Yumo_Next_Xiaoguanqia_Extra_Check.getComponent("Yumo_Next_Xiaoguanqia_Extra_Check");
          this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.Next_Xiaoguanqia_Extra_Check_Script.push(Script);
          Script.Yumo = this;
          var Yumo_Normal_Attack_After_Extra_Check = cc.instantiate(this.Yumo_Normal_Attack_After_Extra_Check);
          Yumo_Normal_Attack_After_Extra_Check.parent = this.Battle_Controller.Normal_Attack_After_Extra_Check.node;
          var Script = Yumo_Normal_Attack_After_Extra_Check.getComponent("Yumo_Normal_Attack_After_Extra_Check");
          this.Battle_Controller.Normal_Attack_After_Extra_Check.Normal_Attack_After_Extra_Check_Script.push(Script);
          Script.Yumo = this;
        }
        this.Battle_Controller.Hero_Star >= 4 && (this.Yumo_4_Star = 1);
        this.Skill_Schedule = function() {
          this.Battle_Controller.Battle_Audio_Controller.Attack(2, 1);
          this.Battle_Controller.Camera_Shake_Shoot();
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = 3513 * Math.random() - 1700;
          Bullet.y = 1021;
          Bullet.angle = -80 * Math.random();
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result * (3 * Math.random() + 1);
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result * (2 * Math.random() + .5);
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Speed = 5e3 * Math.random() + 1e3;
          Bullet_Script.Ini_Speed = Speed * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = Speed * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Yumo_Attack_Bullet = Bullet.getComponent("Yumo_Attack_Bullet");
          20 != this.Ice_Probability && (Yumo_Attack_Bullet.Ice_Probability = this.Ice_Probability);
          Yumo_Attack_Bullet.Yumo_4_Star = this.Yumo_4_Star;
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = 3513 * Math.random() - 1700;
          Bullet.y = 1021;
          Bullet.angle = -80 * Math.random();
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result * (3 * Math.random() + 1);
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result * (2 * Math.random() + .5);
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Speed = 5e3 * Math.random() + 1e3;
          Bullet_Script.Ini_Speed = Speed * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = Speed * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Yumo_Attack_Bullet = Bullet.getComponent("Yumo_Attack_Bullet");
          20 != this.Ice_Probability && (Yumo_Attack_Bullet.Ice_Probability = this.Ice_Probability);
          Yumo_Attack_Bullet.Yumo_4_Star = this.Yumo_4_Star;
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = 3513 * Math.random() - 1700;
          Bullet.y = 1021;
          Bullet.angle = -80 * Math.random();
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result * (3 * Math.random() + 1);
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result * (2 * Math.random() + .5);
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Speed = 5e3 * Math.random() + 1e3;
          Bullet_Script.Ini_Speed = Speed * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = Speed * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Yumo_Attack_Bullet = Bullet.getComponent("Yumo_Attack_Bullet");
          20 != this.Ice_Probability && (Yumo_Attack_Bullet.Ice_Probability = this.Ice_Probability);
          Yumo_Attack_Bullet.Yumo_4_Star = this.Yumo_4_Star;
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = 3513 * Math.random() - 1700;
          Bullet.y = 1021;
          Bullet.angle = -80 * Math.random();
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result * (3 * Math.random() + 1);
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result * (2 * Math.random() + .5);
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Speed = 5e3 * Math.random() + 1e3;
          Bullet_Script.Ini_Speed = Speed * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = Speed * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Yumo_Attack_Bullet = Bullet.getComponent("Yumo_Attack_Bullet");
          20 != this.Ice_Probability && (Yumo_Attack_Bullet.Ice_Probability = this.Ice_Probability);
          Yumo_Attack_Bullet.Yumo_4_Star = this.Yumo_4_Star;
          var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = 3513 * Math.random() - 1700;
          Bullet.y = 1021;
          Bullet.angle = -80 * Math.random();
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result * (3 * Math.random() + 1);
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result * (2 * Math.random() + .5);
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          var Speed = 5e3 * Math.random() + 1e3;
          Bullet_Script.Ini_Speed = Speed * Math.cos(Bullet.angle * Math.PI / 180);
          Bullet_Script.Ini_Speed_Y = Speed * Math.sin(Bullet.angle * Math.PI / 180);
          Bullet_Script.Set_Speed();
          var Yumo_Attack_Bullet = Bullet.getComponent("Yumo_Attack_Bullet");
          20 != this.Ice_Probability && (Yumo_Attack_Bullet.Ice_Probability = this.Ice_Probability);
          Yumo_Attack_Bullet.Yumo_4_Star = this.Yumo_4_Star;
          this.Skill_Number += 1;
          if (this.Skill_Number >= 50) {
            this.unschedule(this.Skill_Schedule);
            this.Skill_Number = 0;
          }
        };
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Battle_Audio_Controller.Attack(2, 1);
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x + 50;
        Bullet.y = this.node.y;
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result * (3 * Math.random() + 1);
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result * (2 * Math.random() + .5);
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = 2 * this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        if (20 != this.Ice_Probability) {
          var Yumo_Attack_Bullet = Bullet.getComponent("Yumo_Attack_Bullet");
          Yumo_Attack_Bullet.Ice_Probability = this.Ice_Probability;
        }
        var Particle = cc.instantiate(this.Attack_Particle);
        Particle.parent = this.Particle_Parent;
        Particle.x = this.node.x + 100;
        Particle.y = this.node.y - 10;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Hero_Common.Skill_Picture();
      },
      Skill_Shoot: function Skill_Shoot() {
        this.Battle_Controller.BG_Black_Animation.node.stopAllActions();
        this.Battle_Controller.Hero_Star < 5 ? this.Battle_Controller.BG_Black_Animation.node.runAction(cc.sequence(cc.fadeTo(.3, 200), cc.moveBy(3, 1, 0), cc.moveBy(3, -1, 0), cc.fadeTo(.3, 0))) : this.Battle_Controller.BG_Black_Animation.node.runAction(cc.sequence(cc.fadeTo(.3, 200), cc.moveBy(1, 1, 0), cc.moveBy(1, -1, 0), cc.callFunc(function() {
          var Particle = cc.instantiate(this.Dragon_Smoke);
          Particle.parent = this.Particle_Parent;
          Particle.x = this.node.x + 13.076;
          Particle.y = this.node.y - 1891.868;
          var Particle = cc.instantiate(this.Dragon_Coin);
          Particle.parent = this.Particle_Parent;
          Particle.x = this.node.x + 13.076;
          Particle.y = this.node.y - 1891.868;
          var Bullet = cc.instantiate(this.Dragon_Bullet);
          Bullet.parent = this.Particle_Parent;
          Bullet.x = 350;
          Bullet.y = -40000.062;
          this.Hero_Common.Count_Is_Skill = 1;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          var Yumo_Attack_Bullet = Bullet.getComponent("Yumo_Dragon_Bullet");
          Yumo_Attack_Bullet.Battle_Controller = this.Battle_Controller;
          Yumo_Attack_Bullet.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Yumo_Attack_Bullet.Attack = this.Hero_Common.Attack_Result;
          Yumo_Attack_Bullet.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
          Yumo_Attack_Bullet.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
          Yumo_Attack_Bullet.Ice_Probability = this.Ice_Probability;
          Yumo_Attack_Bullet.Yumo_4_Star = this.Yumo_4_Star;
        }, this, 0), cc.moveBy(3, 1, 0), cc.fadeTo(.3, 0)));
        this.schedule(this.Skill_Schedule, .1);
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      },
      Restore_Addition: function Restore_Addition() {
        this.Battle_Controller.Normal_Attack_Addition_Reduce(this.Attack_Addition);
        this.Attack_Addition = 0;
        this.Ice_Probability -= this.Ice_Probability_Addition;
        this.Ice_Probability_Addition = 0;
        this.Battle_Controller.Normal_Crit_Rate_Addition_Deduce(this.Normal_Crit_Rate_Addition);
        this.Normal_Crit_Rate_Addition = 0;
        this.Battle_Controller.Normal_Bullet_Scale_Addition -= this.Normal_Bullet_Scale_Addition;
        this.Normal_Bullet_Scale_Addition = 0;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Zhaoyun_5_Star_Hp_Change_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "761c0DdlKBIbbLXK43IEIa8", "Zhaoyun_5_Star_Hp_Change_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        if (1 == this.Battle_Controller.Hero_Script.Is_Yiboyuntian) {
          if (this.Battle_Controller.Hp >= .1 * this.Battle_Controller.Full_Hp) {
            this.Battle_Controller.Hero_Script.Is_Yiboyuntian = 0;
            this.Battle_Controller.Hero_Script.Yiboyuntian_Effect.active = false;
            this.Battle_Controller.Common_Attack_Addition_Reduce(100);
            this.Battle_Controller.Common_Bullet_Scale_Addition_Reduce(50);
          }
        } else if (this.Battle_Controller.Hp <= .1 * this.Battle_Controller.Full_Hp) {
          this.Battle_Controller.Hero_Script.Is_Yiboyuntian = 1;
          this.Battle_Controller.Hero_Script.Yiboyuntian_Effect.active = true;
          this.Battle_Controller.Common_Attack_Addition_Add(100);
          this.Battle_Controller.Common_Bullet_Scale_Addition_Add(50);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhaoyun_5_Star_Injured_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c24b1rYL49MlZ7/dAgv4/jz", "Zhaoyun_5_Star_Injured_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        if (0 == this.Battle_Controller.Hero_Script.Is_Yiboyuntian && this.Battle_Controller.Hp <= .1 * this.Battle_Controller.Full_Hp) {
          this.Battle_Controller.Hero_Script.Is_Yiboyuntian = 1;
          this.Battle_Controller.Hero_Script.Yiboyuntian_Effect.active = true;
          this.Battle_Controller.Common_Attack_Addition_Add(100);
          this.Battle_Controller.Common_Bullet_Scale_Addition_Add(50);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhaoyun_5_Star_Recovery_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "30369uepj5Oz6YY2wkugCSF", "Zhaoyun_5_Star_Recovery_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        if (1 == this.Battle_Controller.Hero_Script.Is_Yiboyuntian && this.Battle_Controller.Hp >= .1 * this.Battle_Controller.Full_Hp) {
          this.Battle_Controller.Hero_Script.Is_Yiboyuntian = 0;
          this.Battle_Controller.Hero_Script.Yiboyuntian_Effect.active = false;
          this.Battle_Controller.Common_Attack_Addition_Reduce(100);
          this.Battle_Controller.Common_Bullet_Scale_Addition_Reduce(50);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhaoyun_Attack_Bullet_New: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "49fa698wAxF65ptnn5hRrJf", "Zhaoyun_Attack_Bullet_New");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhaoyun_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "44633aP1tpLLZ1r2duMyK4d", "Zhaoyun_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhaoyun_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "560bbz2ZwNBt7tsIPFP8d3U", "Zhaoyun_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Zhaoyun").getComponent("Zhaoyun");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhaoyun_Dragon_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19e8eypQ4ROaoJ2GElJQp/d", "Zhaoyun_Dragon_Bullet");
    "use strict";
    var Hero_Bullet_Common = require("Hero_Bullet_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Bullet_Common: Hero_Bullet_Common,
        Speed: 1500,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Particle_Parent: cc.Node,
        Enemy_Parent: cc.Node,
        Target: cc.Node,
        Follow_Enemy_Schedule: cc.Schedule,
        RigidBody: cc.RigidBody,
        PhysicsBoxCollider: cc.PhysicsBoxCollider,
        Time_Too_Long: 0
      },
      start: function start() {
        this.Particle_Parent = this.Hero_Bullet_Common.Battle_Controller.Particle_Parent;
        this.Enemy_Parent = this.Hero_Bullet_Common.Battle_Controller.Enemy_Parent;
        this.Follow_Enemy_Schedule = function() {
          if (null == this.Target || "" == this.Target.name) if (this.Enemy_Parent.children.length > 0) this.Target = this.Enemy_Parent.children[Math.floor(Math.random() * this.Enemy_Parent.children.length)]; else {
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
            cc.tween(this.node).delay(1e-5).to(Math.abs(0 - this.node.angle) / 100, {
              angle: 0
            }, {
              easing: "quadOut"
            }).start();
          } else if (0 == this.Time_Too_Long) {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
            cc.tween(this.node).delay(1e-5).to(Math.abs(radian / Math.PI * 180 - 180 - this.node.angle) / 100, {
              angle: radian / Math.PI * 180 - 180
            }, {
              easing: "quadOut"
            }).start();
          } else {
            var dir = cc.v2(this.node.x - this.Target.x, this.node.y - this.Target.y);
            var radian = Math.atan2(dir.y, dir.x);
            this.node.angle = radian / Math.PI * 180 - 180;
            this.RigidBody.linearVelocity = cc.v2(this.Speed * Math.cos(this.node.angle * Math.PI / 180), this.Speed * Math.sin(this.node.angle * Math.PI / 180));
          }
        };
        this.Shoot();
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      },
      Shoot: function Shoot() {
        this.node.parent = this.Hero_Bullet_Common.Battle_Controller.Hero_Bullet_Parent;
        this.PhysicsBoxCollider.enabled = true;
        this.schedule(this.Follow_Enemy_Schedule, .01);
        this.scheduleOnce(function() {
          this.Time_Too_Long = 1;
        }, 3);
        this.scheduleOnce(function() {
          this.node.destroy();
        }, 10);
      }
    });
    cc._RF.pop();
  }, {
    Hero_Bullet_Common: "Hero_Bullet_Common"
  } ],
  Zhaoyun_Dragon_Shield: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c5ff3mUjKhJHa/sZYXT5P/y", "Zhaoyun_Dragon_Shield");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Animation: cc.Animation,
        CircleCollider: cc.CircleCollider,
        Sprite: cc.Sprite,
        SpriteFrame: [ cc.SpriteFrame ],
        Hp: 3,
        Alive: 1,
        Re_Born_Shedule: cc.Schedule,
        Hero_Common: Hero_Common
      },
      start: function start() {
        this.Re_Born_Shedule = function() {
          this.Hp = 3;
          this.Alive = 1;
          this.Animation.play("Zhaoyun_Dragon_Shield_Born");
          this.Sprite.spriteFrame = this.SpriteFrame[2];
        };
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if (1 == this.Alive && "Enemy_Bullet" == other.node.group && 0 == this.Hero_Common.Is_Sprint) {
          other.node.getComponent("Enemy_Bullet_Common").Be_Destroy();
          this.Hp--;
          if (this.Hp <= 0) {
            this.node.opacity = 0;
            this.Alive = 0;
            this.Animation.stop("Zhaoyun_Dragon_Shield_Born");
            this.unschedule(this.Re_Born_Shedule);
            this.scheduleOnce(this.Re_Born_Shedule, 8);
          } else null != this.SpriteFrame[this.Hp - 1] && "" != this.SpriteFrame[this.Hp - 1].name && (this.Sprite.spriteFrame = this.SpriteFrame[this.Hp - 1]);
        }
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Zhaoyun_Skill_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2353cgYCcJPEqAEfhFM5bxl", "Zhaoyun_Skill_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab,
        Particle_2: cc.ParticleSystem
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
        if (null != this.Particle_2) {
          this.Particle_2.node.parent = this.Particle_Parent;
          this.Particle_2.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhaoyun_Weapon_Parent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "02575npp3dHsr//srfqa6x9", "Zhaoyun_Weapon_Parent");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Common: Hero_Common,
        Animation: cc.Animation
      },
      Set_Shoot_Stage: function Set_Shoot_Stage(Number) {
        this.Hero_Common.Set_Shoot_Stage(Number);
      },
      Shoot: function Shoot() {
        this.Hero_Common.Shoot();
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        this.Hero_Common.Battle_Controller.Hero_Script.Continue_Attack_Check();
      },
      Dragon_Shoot: function Dragon_Shoot() {
        this.Hero_Common.Battle_Controller.Hero_Script.Dragon_Shoot();
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Animation.play("Zhaoyun_Weapon_Parent_Stay");
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Zhaoyun: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "db04ev5U8dPeot+FyI14Gun", "Zhaoyun");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Ex_Hit_Particle: cc.Prefab,
        Skill_Bullet_Prefab: cc.Prefab,
        Is_Ex: 0,
        Ex_Bomb_Particle: cc.Prefab,
        Ex_Schdule: cc.Ex_Schdule,
        Ex_Particle_1: cc.ParticleSystem,
        Ex_Particle_2: cc.ParticleSystem,
        Weapon_Parent_Animation: cc.Animation,
        Zhao_Attack_Particle: cc.Prefab,
        Dragon_Bullet: cc.Prefab,
        Dragon_Shoot_Number: 0,
        Dragon_Shield: cc.Node,
        Zhaoyun_5_Star_Injured_Extra_Check: cc.Prefab,
        Zhaoyun_5_Star_Recovery_Extra_Check: cc.Prefab,
        Zhaoyun_5_Star_Hp_Change_Extra_Check: cc.Prefab,
        Yiboyuntian_Effect: cc.Node,
        Is_Yiboyuntian: 0
      },
      Start_Set: function Start_Set() {
        this.Animation = this.node.getComponent(cc.Animation);
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        this.Ex_Schdule = function() {
          this.Is_Ex = 0;
          if (0 == this.Hero_Common.Is_Dead) {
            this.Animation.play("Zhaoyun_Ex_Back");
            0 == this.Is_Attacking ? this.Weapon_Parent_Animation.play("Zhaoyun_Weapon_Parent_Ex_Back") : this.Weapon_Parent_Animation.play("Zhaoyun_Weapon_Parent_Attack");
          }
        };
        this.Battle_Controller.Hero_Star >= 2 && (this.Dragon_Shield.active = true);
        this.Battle_Controller.Hero_Star >= 3 && this.Battle_Controller.Common_Attack_Addition_Add(20);
        if (this.Battle_Controller.Hero_Star >= 4) {
          this.Battle_Controller.Full_Hp = Math.ceil(1.5 * this.Battle_Controller.Full_Hp);
          this.Battle_Controller.Hp = this.Battle_Controller.Full_Hp;
          this.Battle_Controller.Ini_Hp = this.Battle_Controller.Full_Hp;
        }
        if (this.Battle_Controller.Hero_Star >= 5) {
          var node = cc.instantiate(this.Zhaoyun_5_Star_Injured_Extra_Check);
          node.parent = this.Battle_Controller.Hero_Be_Hit_Extra_Check.node;
          var Script = node.getComponent(node.name);
          this.Battle_Controller.Hero_Be_Hit_Extra_Check.Hero_Be_Hit_Extra_Check_Script.push(Script);
          Script.Battle_Controller = this.Battle_Controller;
          var node = cc.instantiate(this.Zhaoyun_5_Star_Recovery_Extra_Check);
          node.parent = this.Battle_Controller.Recovery_Extra_Check.node;
          var Script = node.getComponent(node.name);
          this.Battle_Controller.Recovery_Extra_Check.Recovery_Extra_Check_Script.push(Script);
          Script.Battle_Controller = this.Battle_Controller;
          var node = cc.instantiate(this.Zhaoyun_5_Star_Hp_Change_Extra_Check);
          node.parent = this.Battle_Controller.Hp_Change_Extra_Check.node;
          var Script = node.getComponent(node.name);
          this.Battle_Controller.Hp_Change_Extra_Check.Hp_Change_Extra_Check_Script.push(Script);
          Script.Battle_Controller = this.Battle_Controller;
        }
      },
      Ex_Back: function Ex_Back() {
        this.Can_Injured++;
        this.Animation.play("Zhaoyun_Stay");
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          0 == this.Is_Ex ? this.Weapon_Parent_Animation.play("Zhaoyun_Weapon_Parent_Attack") : this.Weapon_Parent_Animation.play("Zhaoyun_Weapon_Parent_Ex_Attack");
          if (this.Battle_Controller.Wukong_FS_Father.children.length > 0) for (var i = 0; i < this.Battle_Controller.Wukong_FS_Father.children.length; i++) null != this.Battle_Controller.Wukong_FS_Script[i] && this.Battle_Controller.Wukong_FS_Script[i].Start_Attack();
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Camera_Shake_Shoot();
        var Zhao_Attack_Particle = cc.instantiate(this.Zhao_Attack_Particle);
        Zhao_Attack_Particle.parent = this.Particle_Parent;
        var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke.parent = this.Particle_Parent;
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        if (0 == this.Is_Ex) {
          if (0 == this.Hero_Common.Shoot_Stage) {
            Zhao_Attack_Particle.setPosition(this.node.x + 171.509, this.node.y + 12.138);
            Attack_Smoke.x = this.node.x + 175.964 - 50;
            Attack_Smoke_White.x = this.node.x + 175.964 - 50;
            Attack_Fire_particle.x = this.node.x + 175.964 - 50;
            Attack_Smoke.y = this.node.y + 12.138;
            Attack_Smoke_White.y = this.node.y + 12.138;
            Attack_Fire_particle.y = this.node.y + 12.138;
            Bullet.x = this.node.x + 170.32;
            Bullet.y = this.node.y + 12.138;
          } else if (1 == this.Hero_Common.Shoot_Stage) {
            Zhao_Attack_Particle.setPosition(this.node.x + 170.32, this.node.y + 42.119);
            Zhao_Attack_Particle.angle = 24;
            Attack_Smoke.x = this.node.x + 170.32 - 25;
            Attack_Smoke_White.x = this.node.x + 170.32 - 25;
            Attack_Fire_particle.x = this.node.x + 170.32 - 25;
            Attack_Smoke.y = this.node.y + 42.119 - 25;
            Attack_Smoke_White.y = this.node.y + 42.119 - 25;
            Attack_Fire_particle.y = this.node.y + 42.119 - 25;
            Attack_Smoke.angle = 24;
            Attack_Smoke_White.angle = 24;
            Attack_Fire_particle.angle = 24;
            Bullet.x = this.node.x + 170.32;
            Bullet.y = this.node.y + 42.119;
            Bullet.angle = 15;
          } else if (2 == this.Hero_Common.Shoot_Stage) {
            Zhao_Attack_Particle.setPosition(this.node.x + 175.964, this.node.y - 20.895);
            Zhao_Attack_Particle.angle = -18;
            Attack_Smoke.x = this.node.x + 175.964 - 26;
            Attack_Smoke_White.x = this.node.x + 175.964 - 25;
            Attack_Fire_particle.x = this.node.x + 175.964 - 25;
            Attack_Smoke.y = this.node.y - 20.895 + 25;
            Attack_Smoke_White.y = this.node.y - 20.895 + 25;
            Attack_Fire_particle.y = this.node.y - 20.895 + 25;
            Attack_Smoke.angle = -18;
            Attack_Smoke_White.angle = -18;
            Attack_Fire_particle.angle = -18;
            Bullet.x = this.node.x + 175.964;
            Bullet.y = this.node.y - 20.895;
            Bullet.angle = -15;
          }
        } else if (0 == this.Hero_Common.Shoot_Stage) {
          Zhao_Attack_Particle.setPosition(this.node.x + 324.881, this.node.y + 105.825);
          Attack_Smoke.x = this.node.x + 324.881 - 50;
          Attack_Smoke_White.x = this.node.x + 324.881 - 50;
          Attack_Fire_particle.x = this.node.x + 324.881 - 50;
          Attack_Smoke.y = this.node.y + 105.825;
          Attack_Smoke_White.y = this.node.y + 105.825;
          Attack_Fire_particle.y = this.node.y + 105.825;
          Bullet.x = this.node.x + 324.881;
          Bullet.y = this.node.y + 105.825;
        } else if (1 == this.Hero_Common.Shoot_Stage) {
          Zhao_Attack_Particle.setPosition(this.node.x + 304.774, this.node.y + 134.398);
          Zhao_Attack_Particle.angle = 24;
          Attack_Smoke.x = this.node.x + 304.774 - 50;
          Attack_Smoke_White.x = this.node.x + 304.774 - 50;
          Attack_Fire_particle.x = this.node.x + 304.774 - 50;
          Attack_Smoke.y = this.node.y + 134.398;
          Attack_Smoke_White.y = this.node.y + 134.398;
          Attack_Fire_particle.y = this.node.y + 134.398;
          Bullet.x = this.node.x + 304.774;
          Bullet.y = this.node.y + 134.398;
          Bullet.angle = 15;
        } else if (2 == this.Hero_Common.Shoot_Stage) {
          Zhao_Attack_Particle.setPosition(this.node.x + 304.774, this.node.y + 85.691);
          Zhao_Attack_Particle.angle = -18;
          Attack_Smoke.x = this.node.x + 304.774;
          Attack_Smoke_White.x = this.node.x + 304.774;
          Attack_Fire_particle.x = this.node.x + 304.774;
          Attack_Smoke.y = this.node.y - 85.691 + 25;
          Attack_Smoke_White.y = this.node.y + 85.691 + 25;
          Attack_Fire_particle.y = this.node.y + 85.691 + 25;
          Attack_Smoke.angle = -18;
          Attack_Smoke_White.angle = -18;
          Attack_Fire_particle.angle = -18;
          Bullet.x = this.node.x + 304.774;
          Bullet.y = this.node.y + 85.691;
          Bullet.angle = -15;
        }
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Ini_Speed = 1e4 * Math.cos(Bullet.angle * Math.PI / 180);
        Bullet_Script.Ini_Speed_Y = 1e4 * Math.sin(Bullet.angle * Math.PI / 180);
        Bullet_Script.Set_Speed();
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        0 == this.Is_Ex ? Bullet_Script.Attack = Math.ceil(this.Hero_Common.Attack_Result * (1 + (this.Battle_Controller.Full_Hp - this.Battle_Controller.Hp) / this.Battle_Controller.Full_Hp)) : Bullet_Script.Attack = Math.ceil(this.Hero_Common.Attack_Result * (1 + 3 * (this.Battle_Controller.Full_Hp - this.Battle_Controller.Hp) / this.Battle_Controller.Full_Hp));
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        if (0 == this.Is_Ex) {
          this.Is_Doing_Something++;
          this.Is_Ex = 1;
          this.Can_Injured--;
          this.Hero_Common.Skill_Picture();
        }
      },
      Dragon_Shoot: function Dragon_Shoot() {
        if (0 == this.Dragon_Shoot_Number) {
          this.Battle_Controller.Camera_Shake_Small();
          var Bullet = cc.instantiate(this.Dragon_Bullet);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 128.868;
          Bullet.y = this.node.y + 177.551;
          Bullet.angle = 45;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          var Bullet = cc.instantiate(this.Dragon_Bullet);
          Bullet.parent = this.Bullet_Parent;
          Bullet.x = this.node.x + 128.868;
          Bullet.y = this.node.y + 55.843;
          Bullet.angle = -45;
          this.Hero_Common.Count_Is_Skill = 0;
          this.Hero_Common.Attack_Count();
          this.Hero_Common.Bullet_Scale_Count();
          Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
          Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
          var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
          Bullet_Script.Battle_Controller = this.Battle_Controller;
          Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
          Bullet_Script.Attack = this.Hero_Common.Attack_Result;
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
          var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
          Attack_Smoke.parent = this.Particle_Parent;
          Attack_Smoke_White.parent = this.Particle_Parent;
          Attack_Fire_particle.parent = this.Particle_Parent;
          Attack_Smoke.x = this.node.x + 128.868;
          Attack_Smoke_White.x = this.node.x + 128.868;
          Attack_Fire_particle.x = this.node.x + 128.868;
          Attack_Smoke.y = this.node.y + 177.551;
          Attack_Smoke_White.y = this.node.y + 177.551;
          Attack_Fire_particle.y = this.node.y + 177.551;
          var Attack_Smoke = cc.instantiate(this.Attack_Smoke);
          var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
          var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
          Attack_Smoke.parent = this.Particle_Parent;
          Attack_Smoke_White.parent = this.Particle_Parent;
          Attack_Fire_particle.parent = this.Particle_Parent;
          Attack_Smoke.x = this.node.x + 128.868;
          Attack_Smoke_White.x = this.node.x + 128.868;
          Attack_Fire_particle.x = this.node.x + 128.868;
          Attack_Smoke.y = this.node.y + 55.843;
          Attack_Smoke_White.y = this.node.y + 55.843;
          Attack_Fire_particle.y = this.node.y + 55.843;
        }
        this.Dragon_Shoot_Number++;
        this.Dragon_Shoot_Number >= 3 && (this.Dragon_Shoot_Number = 0);
      },
      Camera_Small_Shake: function Camera_Small_Shake() {
        this.Battle_Controller.Camera_Shake_Small();
      },
      Camera_Big_Shake: function Camera_Big_Shake() {
        this.Battle_Controller.Camera_Shake_Big();
        var Bomb_Particle = cc.instantiate(this.Ex_Bomb_Particle);
        Bomb_Particle.parent = this.Particle_Parent;
        Bomb_Particle.x = this.node.x + 20;
        Bomb_Particle.y = this.node.y;
      },
      To_Ex_Stay: function To_Ex_Stay() {
        this.Animation.play("Zhaoyun_Ex_Stay");
        this.Weapon_Parent_Animation.play("Zhaoyun_Weapon_Parent_Ex_Stay");
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
      },
      Skill_Shoot: function Skill_Shoot() {
        this.Weapon_Parent_Animation.stop();
        this.Animation.play("Zhaoyun_Skill");
        this.scheduleOnce(this.Ex_Schdule, 10);
      },
      Back_To_Stay: function Back_To_Stay() {
        if (0 == this.Is_Ex) {
          this.Weapon_Parent_Animation.play("Zhaoyun_Weapon_Parent_Stay");
          this.Animation.play(this.node.name + "_Stay");
        } else {
          this.Weapon_Parent_Animation.play("Zhaoyun_Weapon_Parent_Ex_Stay");
          this.Animation.play("Zhaoyun_Ex_Stay");
        }
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
      },
      Create_Extra_Check: function Create_Extra_Check() {
        var Extra_Item = cc.instantiate(this.Wukong_Pet_Born_Extra_Check);
        Extra_Item.parent = this.Battle_Controller.Pet_Born_Extra_Check.node;
        var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Pet_Born_Extra_Check.Pet_Born_Extra_Check_Script.push(Extra_Item_Script);
        Extra_Item_Script.Battle_Controller = this.Battle_Controller;
        var Extra_Item = cc.instantiate(this.Wukong_Pet_Dead_Extra_Check);
        Extra_Item.parent = this.Battle_Controller.Pet_Dead_Extra_Check.node;
        var Extra_Item_Script = Extra_Item.getComponent(Extra_Item.name);
        this.Battle_Controller.Pet_Dead_Extra_Check.Pet_Dead_Extra_Check_Script.push(Extra_Item_Script);
        Extra_Item_Script.Battle_Controller = this.Battle_Controller;
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  Zhiqing_Attack_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6297b6AMHZEC75vcAivGY0Q", "Zhiqing_Attack_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Particle_Parent: cc.Node,
        Hit_Efffect_Prefab: cc.Prefab,
        Hit_Particle_Prefab: cc.Prefab,
        Hit_Smoke_Prefab: cc.Prefab
      },
      start: function start() {
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
      },
      Destroy_Particle: function Destroy_Particle() {
        var ParticleSystem = this.node.children[0].getComponent(cc.ParticleSystem);
        if (null != ParticleSystem) {
          ParticleSystem.node.parent = this.Particle_Parent;
          ParticleSystem.duration = .01;
        }
      },
      onDestroy: function onDestroy() {
        var Hit_Efffect = cc.instantiate(this.Hit_Efffect_Prefab);
        Hit_Efffect.parent = this.Particle_Parent;
        Hit_Efffect.x = this.node.x + 20;
        Hit_Efffect.y = this.node.y;
        var Hit_Particle = cc.instantiate(this.Hit_Particle_Prefab);
        Hit_Particle.parent = this.Particle_Parent;
        Hit_Particle.x = this.node.x + 20;
        Hit_Particle.y = this.node.y;
        var Hit_Smoke = cc.instantiate(this.Hit_Smoke_Prefab);
        Hit_Smoke.parent = this.Particle_Parent;
        Hit_Smoke.x = this.node.x + 20;
        Hit_Smoke.y = this.node.y;
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhiqing_Attack_Button: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f58b0tohdVKfLyDC2geUQkk", "Zhiqing_Attack_Button");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero: cc.Node
      },
      start: function start() {
        this.Hero = cc.find("Canvas/Hero/Zhiqing").getComponent("Zhiqing");
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          if (1 == this.Hero.Can_Attack) {
            this.Hero.Will_Attack = 1;
            this.Hero.Start_Attack_Check();
          }
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {
          this.Hero.Will_Attack = 0;
        }, this);
      },
      Cancle_Touch: function Cancle_Touch() {
        this.Hero.Will_Attack = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhiqing_Next_Xiaoguanqia_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eaa6839GEtNw6NKXfwnF7d7", "Zhiqing_Next_Xiaoguanqia_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Hero_Script: cc.Node
      },
      Check: function Check() {
        this.Battle_Controller.Normal_Attack_Addition_Reduce(this.Hero_Script.Common_Attack_Addition);
        this.Hero_Script.Common_Attack_Addition = 0;
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhiqing_Order: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce8ca0m4cNNd6FT2HJKGKE/", "Zhiqing_Order");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Animation: cc.Animation,
        Can_Collider: 0,
        Particle: [ cc.ParticleSystem ],
        End_Schedule: cc.Schedule,
        Skill_Button_Common: cc.Node
      },
      start: function start() {
        this.End_Schedule = function() {
          var _this = this;
          cc.tween(this.node).to(1, {
            scale: 0
          }).call(function() {
            for (var i = 0; i < _this.Particle.length; i++) {
              _this.Particle[i].node.parent = _this.Battle_Controller.Particle_Parent;
              _this.Particle[i].duration = .5;
            }
            _this.node.destroy();
          }).start();
        };
        this.scheduleOnce(this.End_Schedule, 5);
      },
      To_Stay: function To_Stay() {
        this.Animation.play("Fu_Stay");
        this.Can_Collider = 1;
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        var _this2 = this;
        if (1 == this.Can_Collider && "Hero" == other.node.group) {
          this.Can_Collider = 0;
          this.unschedule(this.End_Schedule);
          cc.Tween.stopAllByTarget(this.node);
          this.Skill_Button_Common.Reset_Cool();
          cc.tween(this.node).to(1, {
            scaleX: 5,
            scaleY: 5,
            opacity: 0
          }).call(function() {
            for (var i = 0; i < _this2.Particle.length; i++) {
              _this2.Particle[i].node.parent = _this2.Battle_Controller.Particle_Parent;
              _this2.Particle[i].duration = .5;
            }
            _this2.node.destroy();
          }).start();
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhiqing_Skill_Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "150bef6BWlPJrSij86/Ip4s", "Zhiqing_Skill_Bullet");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node,
        Hero_Script: cc.Node,
        Particle: cc.Prefab
      },
      onCollisionEnter: function onCollisionEnter(other, self) {
        if ("Enemy_Bullet" == other.node.group) {
          other.node.getComponent("Enemy_Bullet_Common").Be_Destroy();
          this.Battle_Controller.Normal_Attack_Addition_Add(this.Hero_Script.Attack_Add_Number);
          this.Hero_Script.Common_Attack_Addition += this.Hero_Script.Attack_Add_Number;
          var node = cc.instantiate(this.Particle);
          node.scaleX = .2 * node.scaleX;
          node.scaleY = .2 * node.scaleY;
          node.parent = this.Battle_Controller.Particle_Parent;
          null != other.node && node.setPosition(other.node.x, other.node.y);
          this.Battle_Controller.Battle_Audio_Controller.Other(0, .8);
        }
      },
      Destroy_Self: function Destroy_Self() {
        this.node.destroy();
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhiqing_Xiaoguanqia_End_Extra_Check: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7a603+fDSJDZau8CrzHlzs6", "Zhiqing_Xiaoguanqia_End_Extra_Check");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: cc.Node
      },
      Check: function Check() {
        if (this.Battle_Controller.Hp == this.Battle_Controller.Full_Hp) for (var i = 0; i < this.Battle_Controller.Normal_Initial_Data.Initial_Rogue_Level_Up_Need; i++) this.Battle_Controller.Rogue_Energy_Up();
      }
    });
    cc._RF.pop();
  }, {} ],
  Zhiqing: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9c12cDgP09LMbgpn7z58yI0", "Zhiqing");
    "use strict";
    var Hero_Common = require("Hero_Common");
    cc.Class({
      extends: cc.Component,
      properties: {
        Can_Move: 1,
        Can_Attack: 1,
        Can_Skill: 1,
        Can_Injured: 1,
        Is_Doing_Something: 0,
        Will_Attack: 0,
        Is_Attacking: 0,
        Is_Skilling: 0,
        Battle_Controller: cc.Node,
        Hero_Common: Hero_Common,
        Animation: cc.Animation,
        Attack_Bullet_Prefab: cc.Prefab,
        Bullet_Parent: cc.Node,
        Particle_Parent: cc.Node,
        Attack_Smoke: cc.Prefab,
        Attack_Smoke_White: cc.Prefab,
        Attack_Fire_particle: cc.Prefab,
        Skill_Bullet: cc.Prefab,
        Attack_Add_Number: 1,
        Common_Attack_Addition: 0,
        New_White_Particle_Long_Single: cc.Prefab,
        Next_Xiaoguanqia_Extra_Check: cc.Prefab,
        Order: cc.Prefab,
        Skill_Button_Common: cc.Node,
        Surround_Zhiqing_Shield: cc.Prefab,
        Zhiqing_Xiaoguanqia_End_Extra_Check: cc.Prefab
      },
      Start_Set: function Start_Set() {
        this.Battle_Controller = this.node.parent.parent.getComponent("Battle_Controller");
        this.Bullet_Parent = cc.find("Canvas/Hero_Bullet");
        this.Particle_Parent = cc.find("Canvas/Particle_Parent");
        var Next_Xiaoguanqia_Extra_Check = cc.instantiate(this.Next_Xiaoguanqia_Extra_Check);
        Next_Xiaoguanqia_Extra_Check.parent = this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.node;
        var Next_Xiaoguanqia_Extra_Check_Script = Next_Xiaoguanqia_Extra_Check.getComponent("Zhiqing_Next_Xiaoguanqia_Extra_Check");
        this.Battle_Controller.Next_Xiaoguanqia_Extra_Check.Next_Xiaoguanqia_Extra_Check_Script.push(Next_Xiaoguanqia_Extra_Check_Script);
        Next_Xiaoguanqia_Extra_Check_Script.Hero_Script = this;
        Next_Xiaoguanqia_Extra_Check_Script.Battle_Controller = this.Battle_Controller;
        this.Skill_Button_Common = this.Battle_Controller.Skill_Button.getComponent("Skill_Button_Common");
        this.schedule(function() {
          var Order = cc.instantiate(this.Order);
          Order.parent = this.Particle_Parent;
          Order.setPosition(Math.floor(1001 * Math.random() - 1500), Math.floor(1200 * Math.random() - 600));
          var Order_Script = Order.getComponent("Zhiqing_Order");
          Order_Script.Battle_Controller = this.Battle_Controller;
          Order_Script.Skill_Button_Common = this.Skill_Button_Common;
        }, 10);
        this.Battle_Controller.Hero_Star >= 2 && this.Attack_Add_Number++;
        if (this.Battle_Controller.Hero_Star >= 3) {
          var Item = cc.instantiate(this.Surround_Zhiqing_Shield);
          Item.parent = this.Hero_Common.Surround_Parent;
          this.Battle_Controller.Set_Surround_Position();
          Item.x = this.Battle_Controller.Surround_X;
          Item.y = this.Battle_Controller.Surround_Y;
          Item.angle = this.Battle_Controller.Surround_Angle;
          var Script = Item.getComponent("Surround_Zhiqing_Shield");
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Common = this.Hero_Common;
          var Item = cc.instantiate(this.Surround_Zhiqing_Shield);
          Item.parent = this.Hero_Common.Surround_Parent;
          this.Battle_Controller.Set_Surround_Position();
          Item.x = this.Battle_Controller.Surround_X;
          Item.y = this.Battle_Controller.Surround_Y;
          Item.angle = this.Battle_Controller.Surround_Angle;
          var Script = Item.getComponent("Surround_Zhiqing_Shield");
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Common = this.Hero_Common;
          var Item = cc.instantiate(this.Surround_Zhiqing_Shield);
          Item.parent = this.Hero_Common.Surround_Parent;
          this.Battle_Controller.Set_Surround_Position();
          Item.x = this.Battle_Controller.Surround_X;
          Item.y = this.Battle_Controller.Surround_Y;
          Item.angle = this.Battle_Controller.Surround_Angle;
          var Script = Item.getComponent("Surround_Zhiqing_Shield");
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Common = this.Hero_Common;
          var Item = cc.instantiate(this.Surround_Zhiqing_Shield);
          Item.parent = this.Hero_Common.Surround_Parent;
          this.Battle_Controller.Set_Surround_Position();
          Item.x = this.Battle_Controller.Surround_X;
          Item.y = this.Battle_Controller.Surround_Y;
          Item.angle = this.Battle_Controller.Surround_Angle;
          var Script = Item.getComponent("Surround_Zhiqing_Shield");
          Script.Battle_Controller = this.Battle_Controller;
          Script.Hero_Common = this.Hero_Common;
        }
        if (this.Battle_Controller.Hero_Star >= 5) {
          var Zhiqing_Xiaoguanqia_End_Extra_Check = cc.instantiate(this.Zhiqing_Xiaoguanqia_End_Extra_Check);
          Zhiqing_Xiaoguanqia_End_Extra_Check.parent = this.Battle_Controller.Xiaoguanqia_End_Extra_Check.node;
          var Script = Zhiqing_Xiaoguanqia_End_Extra_Check.getComponent("Zhiqing_Xiaoguanqia_End_Extra_Check");
          this.Battle_Controller.Xiaoguanqia_End_Extra_Check.Xiaoguanqia_End_Extra_Check_Script.push(Script);
          console.log(Script);
          Script.Battle_Controller = this.Battle_Controller;
        }
      },
      Start_Attack_Check: function Start_Attack_Check() {
        if (0 == this.Is_Doing_Something) {
          this.Is_Doing_Something++;
          this.Is_Attacking = 1;
          this.Animation.play(this.node.name + "_Attack");
        }
      },
      Continue_Attack_Check: function Continue_Attack_Check() {
        if (0 == this.Will_Attack) {
          this.Back_To_Stay();
          for (var i = 0; i < this.Battle_Controller.Stop_Attack_Extra_Check.Script.length; i++) this.Battle_Controller.Stop_Attack_Extra_Check.Script[i].Check();
        }
      },
      Hero_Shoot: function Hero_Shoot() {
        this.Battle_Controller.Battle_Audio_Controller.Attack(3, .1);
        this.Battle_Controller.Camera_Shake_Shoot();
        var Bullet = cc.instantiate(this.Attack_Bullet_Prefab);
        Bullet.parent = this.Bullet_Parent;
        Bullet.x = this.node.x - 10;
        Bullet.y = this.node.y - 10;
        this.Hero_Common.Count_Is_Skill = 0;
        this.Hero_Common.Attack_Count();
        this.Hero_Common.Bullet_Scale_Count();
        Bullet.scaleX = this.Hero_Common.Bullet_Scale_Result;
        Bullet.scaleY = this.Hero_Common.Bullet_Scale_Result;
        var Bullet_Script = Bullet.getComponent("Hero_Bullet_Common");
        Bullet_Script.Battle_Controller = this.Battle_Controller;
        Bullet_Script.Jing_Jie = this.Hero_Common.Jing_Jie_Result;
        Bullet_Script.Attack = this.Hero_Common.Attack_Result;
        Bullet_Script.Crit_Rate = this.Hero_Common.Crit_Rate_Result;
        Bullet_Script.Crit_Mult = this.Hero_Common.Crit_Mult_Result;
        var Attack_Smoke_White = cc.instantiate(this.Attack_Smoke_White);
        var Attack_Fire_particle = cc.instantiate(this.Attack_Fire_particle);
        Attack_Smoke_White.parent = this.Particle_Parent;
        Attack_Fire_particle.parent = this.Particle_Parent;
        Attack_Smoke_White.x = this.node.x + 50;
        Attack_Fire_particle.x = this.node.x + 50;
        Attack_Smoke_White.y = this.node.y;
        Attack_Fire_particle.y = this.node.y;
      },
      Start_Skill_Check: function Start_Skill_Check() {
        this.Battle_Controller.Camera_Shake_Medium();
        var Bullet = cc.instantiate(this.Skill_Bullet);
        Bullet.parent = this.Particle_Parent;
        Bullet.setPosition(this.node.x - 6.4, this.node.y + 2.8);
        var Script = Bullet.getComponent("Zhiqing_Skill_Bullet");
        Script.Battle_Controller = this.Battle_Controller;
        Script.Hero_Script = this;
        for (var i = 0; i < 20; i++) {
          var Particle = cc.instantiate(this.New_White_Particle_Long_Single);
          Particle.parent = this.Particle_Parent;
          Particle.setPosition(this.node.x - 6.4, this.node.y + 2.8);
          Particle.angle = 360 * Math.random();
        }
      },
      Back_To_Stay: function Back_To_Stay() {
        this.Is_Doing_Something = 0;
        this.Is_Attacking = 0;
        this.Will_Attack = 0;
        this.Animation.play(this.node.name + "_Stay");
      }
    });
    cc._RF.pop();
  }, {
    Hero_Common: "Hero_Common"
  } ],
  "\u51cf\u5c11\u6d4b\u8bd5": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9a9a97Q/FJIW6k+hXoB8xzK", "\u51cf\u5c11\u6d4b\u8bd5");
    "use strict";
    var Battle_Controller = require("Battle_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: Battle_Controller
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          this.Battle_Controller.Restore_Enemy_Move();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Battle_Controller: "Battle_Controller"
  } ],
  "\u524d\u5f80\u6218\u6597": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4b88egiOHxHg7HaSKImpNH4", "\u524d\u5f80\u6218\u6597");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Progress: 0,
        Progress_Label: cc.Label
      },
      start: function start() {
        var Progress = 0;
        var Progress_Label = this.Progress_Label;
        cc.director.preloadScene("Battle", function(completedCount, totalCount) {
          Progress = completedCount / totalCount * 100;
          Progress_Label.string = Progress.toFixed(2) + "%";
        }, function() {
          console.log("Battle Scene Preloaded");
        });
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          console.log("Touch Start");
          var Progress = 0;
          var Progress_Label = this.Progress_Label;
          cc.director.preloadScene("Battle", function(completedCount, totalCount) {
            Progress = completedCount / totalCount * 100;
            Progress_Label.string = Progress.toFixed(2) + "%";
          }, function() {
            cc.director.loadScene("Battle");
          });
        }, this);
      }
    });
    cc._RF.pop();
  }, {} ],
  "\u6062\u590d\u6d4b\u8bd5": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec587p35rBJqrtmakV5+tdC", "\u6062\u590d\u6d4b\u8bd5");
    "use strict";
    var Battle_Controller = require("Battle_Controller");
    cc.Class({
      extends: cc.Component,
      properties: {
        Battle_Controller: Battle_Controller
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_START, function(event) {
          this.Battle_Controller.Stop_Enemy_Move();
        }, this);
      }
    });
    cc._RF.pop();
  }, {
    Battle_Controller: "Battle_Controller"
  } ],
  "\u6362\u4eba": [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19eee+Jha9Pi6rbqyj5pNvW", "\u6362\u4eba");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        Hero_Edit_Box: cc.EditBox,
        Hero_Star: cc.EditBox,
        Boss_Boci: cc.EditBox,
        Enemy_Number: cc.EditBox,
        Enemy_Type: cc.EditBox,
        Boss_ID: cc.EditBox,
        BG_ID: cc.EditBox,
        Team_Level: cc.EditBox,
        Now_Guanqia: cc.EditBox,
        Fly_Item_Opacity: cc.EditBox,
        Rain_Opacity: cc.EditBox,
        Wukkong_Friend: cc.EditBox
      },
      ChangeMan: function ChangeMan() {
        cc.sys.localStorage.setItem("Selected_Hero", this.Hero_Edit_Box.string);
      },
      Change_Star: function Change_Star() {
        cc.sys.localStorage.setItem("Hero_Star", this.Hero_Star.string);
      },
      Change_Boss_Boci: function Change_Boss_Boci() {
        cc.sys.localStorage.setItem("Boss_Boci", this.Boss_Boci.string);
      },
      Change_Enemy_Number: function Change_Enemy_Number() {
        cc.sys.localStorage.setItem("Enemy_Number", this.Enemy_Number.string);
      },
      Change_Enemy_Type: function Change_Enemy_Type() {
        cc.sys.localStorage.setItem("Enemy_Type", this.Enemy_Type.string);
      },
      Change_Boss_ID: function Change_Boss_ID() {
        cc.sys.localStorage.setItem("Now_Boss", this.Boss_ID.string);
      },
      Change_BG_ID: function Change_BG_ID() {
        cc.sys.localStorage.setItem("Which_BG", this.BG_ID.string);
      },
      Change_Team_Level: function Change_Team_Level() {
        cc.sys.localStorage.setItem("Team_Level", this.Team_Level.string);
      },
      Change_Now_Guanqia: function Change_Now_Guanqia() {
        cc.sys.localStorage.setItem("Now_Guanqia", this.Now_Guanqia.string);
      },
      Change_Fly_Item_Opacity: function Change_Fly_Item_Opacity() {
        cc.sys.localStorage.setItem("Fly_Item_Opacity", this.Fly_Item_Opacity.string);
      },
      Change_Rain_Opacity: function Change_Rain_Opacity() {
        cc.sys.localStorage.setItem("Rain_Opacity", this.Rain_Opacity.string);
      },
      Change_Wukkong_Friend: function Change_Wukkong_Friend() {
        cc.sys.localStorage.setItem("Wukkong_Friend", this.Wukkong_Friend.string);
      }
    });
    cc._RF.pop();
  }, {} ]
}, {}, [ "Down_Cloud", "IndexTest", "Move_Item", "NewScript", "Save_Data", "Lovelace_Attack_Button", "Luxue_Attack_Button", "Meixi_Attack_Button", "Mozu_Attack_Button", "Muguiying_Attack_Button", "Police_Attack_Button", "Qitian_Attack_Button", "Red_Hood_Attack_Button", "SWAT_Attack_Button", "Wukong_Attack_Button", "Xiake_Attack_Button", "Xiaoming_Attack_Button", "Yumo_Attack_Button", "Zhaoyun_Attack_Button", "Zhiqing_Attack_Button", "Cloud_1", "Cloud_2", "Cloud_3", "Cloud_4", "Mountain_1", "Mountain_2", "Railing", "BG_Item", "BUG_Coin", "Battle_Audio_Controller", "Battle_Coin", "Battle_Controller - 001", "Battle_Controller", "Boss_Hp_Line_Parent", "Boss_Tips", "Buff_Icon", "Camera_Follow", "Chat_Menu", "Code_Rain", "Code_Rain_Up_Down", "Property_Count", "Destroy_Self", "Anxious_Enchantment", "Jiejie_Meixi", "Jiejie_Pet_Bajie", "Boss_Absorb_Item", "Boss_Fire", "Boss_God", "Boss_Gun", "Boss_Japan_Jijia", "Boss_Japan_Jijia_FS", "Boss_Jijia", "Boss_Picture", "Boss_Sword", "Boss_Tetris", "Boss_Water", "Boss_Water_Fire_Defend", "Boss_YHWD", "Boss_YKNG", "Enemy_Angle", "Enemy_BUG", "Enemy_Black_Man", "Enemy_Bullet_Thunder", "Enemy_Common", "Enemy_Demon", "Enemy_Doctor", "Enemy_Knight", "Enemy_Konfu", "Enemy_L337", "Enemy_Magic", "Enemy_Mario_Cube", "Enemy_Ninja", "Enemy_Normal", "Enemy_Poem", "Enemy_Red_Ninja", "Enemy_Ruler", "Enemy_SAS", "Enemy_Soldier", "Enemy_Sprint", "Enemy_Staff", "Enemy_Stone", "Enemy_Sword", "Enemy_UAV", "Enemy_Warrior", "Enemy_White_Man", "GBA_Absorb_Item", "Mario", "Thunder_Red", "Boss_Fire_First_Heart_Bullet", "Boss_Fire_Stage_2_Bullet_1", "Boss_Fire_Stage_2_Bullet_Big", "Boss_Fire_Third_Heart_Bullet", "Boss_Fire_Third_Heart_Bullet_Child", "Boss_Fire_Water_Stage_2_Red_Bar", "Boss_Jijia_Big_Mother_Bullet", "Boss_Tetris_Red_Bar", "Boss_Water_Fire_Stage_2_Bullet_2", "Boss_Water_Fire_Stage_2_Bullet_Big", "Boss_Water_First_Heart_Bullet", "Boss_Water_Second_Heart_Bullet", "Boss_Water_Stage_2_Bullet_1", "Boss_Water_Third_Heart_Bullet", "Boss_Water_Third_Heart_Bullet_Child", "Boss_YHWD_Stage_1_Flower_Bullet", "Boss_YHWD_Stage_1_Heart_Bullet", "Boss_YHWD_Stage_1_Heart_Mother_Bullet", "Boss_YHWD_Stage_1_Mother_Bullet", "Boss_YHWD_Stage_1_Rose_Bullet", "Boss_YHWD_Stage_1_Seed_Bullet", "Boss_YKNG_Big_Chushou_Bullet", "Boss_YKNG_Bullet_Eye", "Enemy_Black_Man_Bomb", "Enemy_Bullet_Accelerate", "Enemy_Bullet_Angle_Stone", "Enemy_Bullet_Butterfly", "Enemy_Bullet_Coin", "Enemy_Bullet_Coin_Son", "Enemy_Bullet_Common", "Enemy_Bullet_Demon", "Enemy_Bullet_Doctor", "Enemy_Bullet_Fish", "Enemy_Bullet_Fish_Seed", "Enemy_Bullet_Heart", "Enemy_Bullet_Heart_Son", "Enemy_Bullet_Luan", "Enemy_Bullet_Magic", "Enemy_Bullet_Posion", "Enemy_Bullet_San", "Enemy_Bullet_San_Luan", "Enemy_Bullet_Seed", "Enemy_Bullet_Seed_Wait_Trigger", "Enemy_Bullet_Strong", "Enemy_Bullet_Sword", "Enemy_Bullet_Sword_Big", "Enemy_Bullet_Sword_Crazy", "Enemy_Bullet_Sword_Stright", "Enemy_Bullet_Tetris", "Enemy_Bullet_Tetris_Up_To_Down", "Enemy_Bullet_Tetris_Word", "Enemy_Poem_Bullet", "Enemy_SAS_Bomb", "Enemy_Warrior_Mother_Bullet", "Enemy_White_Man_Bomb", "Enemy_Create", "A008_Double_Return_Extra_Check", "A000_Fire_God_Blessing", "Bullet_Hit_Extra_Check", "Meixi_Weak_Hit_Extra_Check", "Muguiying_Hit_Extra_Check", "Police_Sky_Net_Hit_Extra_Check", "Xiaoming_Recovery_Bullet_Hit_Extra_Check", "Hero_Be_Hit_Extra_Check", "Hp_Change_Extra_Check", "Meixi_Next_Xiaoguanqia_Extra_Check - 001", "Meixi_Next_Xiaoguanqia_Extra_Check", "Mozu_Move_Start_Extra_Check", "Mozu_Start_Attack_Extra_Check", "Mozu_Stop_Attack_Extra_Check", "Next_Xiaoguanqia_Extra_Check", "Normal_Attack_After_Extra_Check", "A000_Small_Missile_Extra_Check", "A002_Small_Missile_Extra_Check", "Meixi_Normal_Attack_After_Extra_Check", "Normal_Attack_Extra_Check", "SWAT_Small_Missile_Extra_Check", "Yumo_Normal_Attack_After_Extra_Check", "Pet_Be_Hit_Extra_Check", "Pet_Born_Extra_Check", "Red_Hood_Pet_Born_Extra_Check", "Red_Hood_Pet_Dead_Extra_Check", "Wukong_Pet_Born_Extra_Check", "Pet_Dead_Extra_Check", "Wukong_Pet_Dead_Extra_Check", "Qitian_FTXD_Injured_Extra_Check", "Recovery_Extra_Check", "Red_Hood_Be_Hit_Extra_Check", "Red_Hood_Pet_Be_Hit_Extra_Check", "A005_Anxious_Enchantment_Extra_Check", "Schedule_Extra_Check", "Sprint_Extra_Check", "Xiake_Five_Star_Sprint_Extra_Check", "Xiake_Sprint_Extra_Check", "A006_Wait_Rabbit_Start_Move_Extra_Check", "Start_Move_Extra_Check", "Stop_Attack_Extra_Check", "A006_Wait_Rabbit_Stop_Move_Extra_Check", "Mozu_Stop_Move_Extra_Check", "Stop_Move_Extra_Check", "Wukong_5_Star_Next_Xiaoguanqia_Extra_Check", "Xiaoguanqia_End_Extra_Check", "Xiaoming_Be_Hit_Extra_Check", "Xiaoming_Next_Xiaoguanqia_Extra_Check", "Yumo_Next_Xiaoguanqia_Extra_Check", "Zhaoyun_5_Star_Hp_Change_Extra_Check", "Zhaoyun_5_Star_Injured_Extra_Check", "Zhaoyun_5_Star_Recovery_Extra_Check", "Zhiqing_Next_Xiaoguanqia_Extra_Check", "Zhiqing_Xiaoguanqia_End_Extra_Check", "Police_Extra_Skill_Button", "SWAT_Extra_Skill_Button", "Xiaoming_Extra_Skill_Button", "Extra_Skill_Script", "Fly_Item", "Fly_Item_Big_Cloud", "Fly_Item_Cloud", "Fly_Item_Up_Cloud", "Follow_Hero_Item_Common", "Fu_Bagua", "Fu_Common", "Fu_Fire", "Fu_Heart", "Fu_Poison", "Fu_Thunder", "Fu_Water", "Fu_Water_Dragon", "God_Menu", "Green_Coin", "Hero_Common", "Lovelace", "Lovelace_Code_Button", "Lovelace_Hidden_Collider", "Lovelace_Skill_Menu", "Luxue", "Meixi", "Mozu", "Mozu_Blackhole", "Mozu_Blackhole_Star", "Mozu_Blackhole_Time_Circle", "Muguiying", "Muguiying_Jiejie", "Muguiying_Knife_Surround_Parent", "Police", "Police_Bullet_Icon", "Police_Crucial_Crosshair", "Qitian", "Qitian_FS", "Qitian_FS_Image", "Qitian_FTXD_Parent", "Qitian_Weapon_Roll", "Red_Hood", "Red_Hood_Angry_Particle", "SWAT", "Wukong", "Wukong_FS", "Xiake", "Xiaoming", "Yumo", "Zhaoyun", "Zhaoyun_Dragon_Shield", "Zhaoyun_Weapon_Parent", "Zhiqing", "Fire_Bullet", "Hero_Bullet_Common", "Lovelace_Skill_Bullet", "Luxue_Attack_Bullet", "Luxue_Bagua_Bullet", "Meixi_Attack_Bullet", "Meixi_Skill_Bullet", "Mozu_Attack_Bullet", "Mozu_Skill_Bullet", "Mozu_Skill_Light_Bullet", "Muguiying_Attack_Bullet", "Muguiying_Skill_Jian", "Pet_Wolf_Bullet", "Poison_Bullet", "Police_Attack_Bullet", "Police_Attack_Bullet_Gold", "Police_Attack_Bullet_Purple", "Police_Key_People_Bullet", "Qitian_Skill_Bullet_Big", "Qitian_Skill_True_Bullet", "Red_Hood_Scary_Icon", "Rogue_Double_Return_Bullet", "SWAT_Attack_Bullet", "SWAT_Grenade_Bullet", "SWAT_Grenade_Flash - 001", "SWAT_Grenade_Flash", "SWAT_Skill_Cross_Hair", "Small_Missile", "Tangsen_Attack_Bullet", "Thunder_Bullet", "Water_Bullet", "Wukong_Attack_Bullet", "Wukong_FS_Bullet", "Wukong_FS_Recovery_Bullet", "Xiake_Attack_Bullet", "Xiake_Five_Star_Sprint_Sword", "Xiake_Skill_Bullet", "Xiake_Sprint_Sword", "Xiaoming_Attack_Bullet", "Xiaoming_Skill_Bullet", "Xiaoming_Skill_Star_Bullet", "Yumo_Attack_Bullet", "Yumo_Dragon_Bullet - 001", "Yumo_Dragon_Bullet", "Zhaoyun_Attack_Bullet", "Zhaoyun_Attack_Bullet_New", "Zhaoyun_Dragon_Bullet", "Zhaoyun_Skill_Bullet", "Zhiqing_Attack_Bullet", "Zhiqing_Order", "Zhiqing_Skill_Bullet", "Hidden_Code_Rain", "History_Card", "History_Card_Detail_Menu", "History_Card_Menu", "Hit_Effect", "Hit_Number_Label", "Jiejie_Meixi_Bullet_Particle", "JoyStick", "Left_Up_Buff_Icon_Common", "Motion_Streak_Script", "New_White_Particle_Long_Single", "Next_Xiaoguanqia_Menu", "Open_PhysicsManager", "Pause_History_Card", "Pause_Menu", "Pet_Bajie", "Pet_Shasen", "Pet_Tangsen", "Pet_Wolf", "Pet_Common", "Police_Area_Line_H", "Police_Area_Line_V", "Rogue", "Rogue_Energy", "SWAT_Shield", "Show_Dead_Menu", "Skill_Button_Common", "Skill_Follow_Particle", "Skill_Follow_Smoke", "Hero_Skill_Picture_Common", "Lovelace_Skill_Picture", "Police_Extra_Skill_Picture", "Qitian_FTXD_Picture", "Skill_Up_Fire", "Speed_Line", "Sprint", "Muguiying_4_Star_Knife_Surround", "Muguiying_Attack_Surround_Kinfe", "Surround_Small_Shield", "Surround_Zhiqing_Shield", "God_Information", "Hero_Initial_Data", "Normal_Initial_Data", "Rogue_Information", "All_Black", "Hero_Introduce", "Hero_Select_Button", "Level_Select_Button", "Level_Select_Controller", "Main_Controller", "Main_UI_Button", "Title_Click_Area", "NewScript - 001", "Rain", "Hero_Select_Head", "Ready_All_Black", "Ready_Back_Button", "Ready_Controller", "Ready_Next_Button", "Shine_Star", "Hero_Button", "Select_Hero_Controller", "Small_Rain", "Story", "Test_Button", "Test_Data", "Example1", "TextMeshPro", "TmpRichText", "HtmlParser", "TmpAssembler", "TmpFontConfig", "TmpUtils", "\u51cf\u5c11\u6d4b\u8bd5", "\u524d\u5f80\u6218\u6597", "\u6062\u590d\u6d4b\u8bd5", "\u6362\u4eba" ]);