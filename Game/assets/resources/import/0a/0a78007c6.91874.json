[1,["39PFfrkH5IpqgErP7V5/2d"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1]],[[0,0,1,2,4],[1,0,1,3]],[[[[0,"Mult-material",[{"hash":1143119839,"record":null,"name":"Mult-material|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout lowp vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout mediump vec3 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0.y = a_uv0.y;\n    v_uv0.z = mod(a_uv0.x,10.0);\n    v_uv0.x = (a_uv0.x-v_uv0.z)*0.000001;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision mediump float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin lowp vec4 v_color;\n#if USE_TEXTURE\n  in mediump vec3 v_uv0;\n  uniform sampler2D texture0;\n  uniform sampler2D texture1;\n  uniform sampler2D texture2;\n  uniform sampler2D texture3;\n  uniform sampler2D texture4;\n  uniform sampler2D texture5;\n  uniform sampler2D texture6;\n  uniform sampler2D texture7;\n#endif\nvec4 Texture(sampler2D texture,vec2 uv, vec4 o){\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    return o;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n      float index = v_uv0.z;\n      if(index<0.5) o = Texture(texture0 , v_uv0.xy , o);\n      else if(index<1.5) o = Texture(texture1 , v_uv0.xy , o);\n      else if(index<2.5) o = Texture(texture2 , v_uv0.xy , o);\n      else if(index<3.5) o = Texture(texture3 , v_uv0.xy , o);\n      else if(index<4.5) o = Texture(texture4 , v_uv0.xy , o);\n      else if(index<5.5) o = Texture(texture5 , v_uv0.xy , o);\n      else if(index<6.5) o = Texture(texture6 , v_uv0.xy , o);\n      else  o = Texture(texture7 , v_uv0.xy , o);\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying lowp vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying mediump vec3 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0.y = a_uv0.y;\n    v_uv0.z = mod(a_uv0.x,10.0);\n    v_uv0.x = (a_uv0.x-v_uv0.z)*0.000001;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision mediump float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying lowp vec4 v_color;\n#if USE_TEXTURE\n  varying mediump vec3 v_uv0;\n  uniform sampler2D texture0;\n  uniform sampler2D texture1;\n  uniform sampler2D texture2;\n  uniform sampler2D texture3;\n  uniform sampler2D texture4;\n  uniform sampler2D texture5;\n  uniform sampler2D texture6;\n  uniform sampler2D texture7;\n#endif\nvec4 Texture(sampler2D texture,vec2 uv, vec4 o){\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    return o;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n      float index = v_uv0.z;\n      if(index<0.5) o = Texture(texture0 , v_uv0.xy , o);\n      else if(index<1.5) o = Texture(texture1 , v_uv0.xy , o);\n      else if(index<2.5) o = Texture(texture2 , v_uv0.xy , o);\n      else if(index<3.5) o = Texture(texture3 , v_uv0.xy , o);\n      else if(index<4.5) o = Texture(texture4 , v_uv0.xy , o);\n      else if(index<5.5) o = Texture(texture5 , v_uv0.xy , o);\n      else if(index<6.5) o = Texture(texture6 , v_uv0.xy , o);\n      else  o = Texture(texture7 , v_uv0.xy , o);\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":[]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":[]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture0","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]},{"name":"texture1","type":29,"count":1,"binding":31,"defines":["USE_TEXTURE"]},{"name":"texture2","type":29,"count":1,"binding":32,"defines":["USE_TEXTURE"]},{"name":"texture3","type":29,"count":1,"binding":33,"defines":["USE_TEXTURE"]},{"name":"texture4","type":29,"count":1,"binding":34,"defines":["USE_TEXTURE"]},{"name":"texture5","type":29,"count":1,"binding":35,"defines":["USE_TEXTURE"]},{"name":"texture6","type":29,"count":1,"binding":36,"defines":["USE_TEXTURE"]},{"name":"texture7","type":29,"count":1,"binding":37,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Mult-material|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture0":{"value":"white","type":29},"texture1":{"value":"white","type":29},"texture2":{"value":"white","type":29},"texture3":{"value":"white","type":29},"texture4":{"value":"white","type":29},"texture5":{"value":"white","type":29},"texture6":{"value":"white","type":29},"texture7":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[1,"Mult-material",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[0],[0]]]]